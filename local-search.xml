<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringcloudAlibaba</title>
    <link href="/2022/08/01/2022-8-1-SpringCloudError/"/>
    <url>/2022/08/01/2022-8-1-SpringCloudError/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringcloudAlibaba⏳"><a href="#SpringcloudAlibaba⏳" class="headerlink" title="SpringcloudAlibaba⏳"></a>SpringcloudAlibaba⏳</h1><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven子类继承父类"><a href="#Maven子类继承父类" class="headerlink" title="Maven子类继承父类"></a>Maven子类继承父类</h2><p><a href="https://blog.csdn.net/weixin_42565135/article/details/895022891">https://blog.csdn.net/weixin_42565135/article/details/895022891</a></p><p>需要注意父工程中的 dependencies 与 dependencyManagement</p><p>dependencies：子工程即使不写该依赖项，也会从父工程中加载</p><p>dependencyManagement：父工程只是声明，子工程还需要写，只不过版本一些问题可以直接使用父工程的</p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p><code>UnknownHostException: service-product</code></p><p><a href="https://blog.csdn.net/blue_show/article/details/123958611">https://blog.csdn.net/blue_show/article/details/123958611</a></p><blockquote><p>报错信息：UnknownHostException: service-product</p></blockquote><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.chaoo.mapper&quot;)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">// Ribbon实现负载均衡</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在启动类上加了注解但是访问会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/prod/&#123;pid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> &#123;<br>        <span class="hljs-comment">// 从服务中心获取请求的地址</span><br>        <span class="hljs-comment">/*List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;service-product&quot;);</span><br><span class="hljs-comment">        // 定义一个随机数</span><br><span class="hljs-comment">        int index = new Random().nextInt(instances.size());</span><br><span class="hljs-comment">        ServiceInstance instance = instances.get(index);</span><br><span class="hljs-comment">        // 获取主机名称</span><br><span class="hljs-comment">        String host = instance.getHost();</span><br><span class="hljs-comment">        int port = instance.getPort();</span><br><span class="hljs-comment">        log.info(&quot;当前主机和端口:&quot; + host + &quot;-------&quot; +port);*/</span><br><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://service-product/product/&quot;</span> + pid, Product.class);<br><br><br>        System.out.println(<span class="hljs-string">&quot;product = &quot;</span> + product);<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder()<br>            .uid(<span class="hljs-number">1L</span>)<br>            .username(<span class="hljs-string">&quot;李白&quot;</span>)<br>            .pid(<span class="hljs-number">1L</span>)<br>            .pname(product.getName())<br>            .price(product.getPrice())<br>            .number(<span class="hljs-number">2</span>)<br>            .build();<br>        <span class="hljs-comment">//        orderService.save(order);</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解决：</strong></p><p>加 <code>spring-cloud-loadbalancer</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>貌似是因为新版本的原因，因为我项目中使用的版本过于高</p><p><strong>补：</strong></p><p>nacos自从2020版本之后不再整合的是Netflix，也就没有ribbon了，它之所以报错是因为，你使用了负载均衡算法，但是没有ribbon了，它不知道该使用哪个服务</p>]]></content>
    
    
    <categories>
      
      <category>Springcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务启动指令及位置</title>
    <link href="/2022/08/01/2022-8-1-%E5%90%84%E7%A7%8D%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/"/>
    <url>/2022/08/01/2022-8-1-%E5%90%84%E7%A7%8D%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="📒Template"><a href="#📒Template" class="headerlink" title="📒Template"></a>📒Template</h1><h2 id="版本🌼"><a href="#版本🌼" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><h2 id="启动🎉"><a href="#启动🎉" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><h2 id="访问⏳"><a href="#访问⏳" class="headerlink" title="访问⏳"></a><strong>访问⏳</strong></h2><hr><h1 id="📒Windows"><a href="#📒Windows" class="headerlink" title="📒Windows"></a>📒Windows</h1><h1 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h1><h2 id="版本🌼-1"><a href="#版本🌼-1" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><p><code>jmeter 5.5</code></p><h2 id="启动🎉-1"><a href="#启动🎉-1" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><p><code>D:\C_Other\apache-jmeter-5.5\bin</code></p><p>直接双击 <code>jmeter.bat</code></p><h1 id="📒Docker-Redis"><a href="#📒Docker-Redis" class="headerlink" title="📒Docker-Redis"></a>📒Docker-Redis</h1><p>ip: 192.168.33.135</p><h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h1><h2 id="版本🌼-2"><a href="#版本🌼-2" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><p><code>MySql 5.7.14</code></p><p>在本机上是使用docker容器</p><h2 id="启动🎉-2"><a href="#启动🎉-2" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><p><code>/usr/local/mysql</code>中有容器关联的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a <span class="hljs-comment"># 查看所有容器</span><br>docker ps  <span class="hljs-comment"># 查看已启动容器</span><br><br>docker <span class="hljs-built_in">exec</span> -it mysql-test /bin/bash<br></code></pre></td></tr></table></figure><h2 id="访问⏳-1"><a href="#访问⏳-1" class="headerlink" title="访问⏳"></a><strong>访问⏳</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -p  <span class="hljs-comment"># root</span><br></code></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="版本🌼-3"><a href="#版本🌼-3" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><p><code>Redis 6.2.7</code></p><h2 id="启动🎉-3"><a href="#启动🎉-3" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><p><code>/usr/local/redis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server<br></code></pre></td></tr></table></figure><h2 id="访问⏳-2"><a href="#访问⏳-2" class="headerlink" title="访问⏳"></a><strong>访问⏳</strong></h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">redis-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h2 id="版本🌼-4"><a href="#版本🌼-4" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><p><code>nacos 2.1.0</code></p><h2 id="启动🎉-4"><a href="#启动🎉-4" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><p><code>/usr/local/nacos</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nacos/bin<br><br>sh startup.sh -m standalone<br><br>======== or  ======== <span class="hljs-comment"># 使用脚本启动</span><br><span class="hljs-built_in">cd</span> /usr/local/nacos<br><br>sh nacos.sh start<br></code></pre></td></tr></table></figure><h2 id="访问⏳-3"><a href="#访问⏳-3" class="headerlink" title="访问⏳"></a><strong>访问⏳</strong></h2><p><a href="http://192.168.33.135:8848/nacos">http://192.168.33.135:8848/nacos</a></p><p>账号和密码均是 nacos</p><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><h2 id="版本🌼-5"><a href="#版本🌼-5" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><p><code>sentinel 1.8.4</code></p><h2 id="启动🎉-5"><a href="#启动🎉-5" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><p><code>/usr/local/sentinel</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/sentinel<br><br>java -Dserver.port=8868 -Dcsp.sentinel.dashboard.server=192.168.33.135:8868 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.4.jar<br></code></pre></td></tr></table></figure><h2 id="访问⏳-4"><a href="#访问⏳-4" class="headerlink" title="访问⏳"></a><strong>访问⏳</strong></h2><p><a href="http://192.168.33.135:8868/">http://192.168.33.135:8868/</a></p><p>账号和密码均是 sentinel</p><h1 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h1><h2 id="版本🌼-6"><a href="#版本🌼-6" class="headerlink" title="版本🌼"></a><strong>版本🌼</strong></h2><p><code>zipkin 2.27.17</code></p><h2 id="启动🎉-6"><a href="#启动🎉-6" class="headerlink" title="启动🎉"></a><strong>启动🎉</strong></h2><p><code>/usr/local/zipkin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/zipkin<br><br>java -jar zipkin-server-2.23.17-exec.jar<br><br><br>java -jar zipkin-server-2.23.17-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=192.168.33.135 --MYSQL_TCP_PORT=3306 --MYSQL_DB=zipkin --MYSQL_USER=root --MYSQL_PASS=root<br></code></pre></td></tr></table></figure><h2 id="访问⏳-5"><a href="#访问⏳-5" class="headerlink" title="访问⏳"></a><strong>访问⏳</strong></h2><p><a href="http://192.168.33.135:9411/">http://192.168.33.135:9411</a></p>]]></content>
    
    
    <categories>
      
      <category>服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Linux</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch案例演示</title>
    <link href="/2022/07/31/2022-7-31-ElasticSearch%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/"/>
    <url>/2022/07/31/2022-7-31-ElasticSearch%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h1><h1 id="—-问题解决⏳—"><a href="#—-问题解决⏳—" class="headerlink" title="—-问题解决⏳—-"></a>—-问题解决⏳—-</h1><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>默认路径访问不了 <code>static/index.html</code></p><blockquote><p>这个搞不懂为什么，百度说要加 Thymeleaf插件</p><p>但是 Thymeleaf 我记得是个模板，不知道二者联系是什么，很奇怪</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>隔了一个小时，我又去测了一遍</p><p>发现现在不加插件也可以了，说明这个插件和这个没有联系</p><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><a href="https://blog.csdn.net/qq_41682069/article/details/123335998">https://blog.csdn.net/qq_41682069/article/details/123335998</a></p><blockquote><p>因为在前一天我都可以正常使用，但是今天突然间启动项目就出现这些异常</p></blockquote><p><strong>RemotingTimeoutException: invokeSync call timeout</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Caused by: org.apache.rocketmq.remoting.exception.RemotingTimeoutException: invokeSync call timeout<br>at org.apache.rocketmq.remoting.netty.NettyRemotingClient.invokeSync(NettyRemotingClient.java:<span class="hljs-number">375</span>)<br>at org.apache.rocketmq.client.impl.MQClientAPIImpl.getTopicRouteInfoFromNameServer(MQClientAPIImpl.java:<span class="hljs-number">1367</span>)<br>at org.apache.rocketmq.client.impl.MQClientAPIImpl.getTopicRouteInfoFromNameServer(MQClientAPIImpl.java:<span class="hljs-number">1357</span>)<br>at org.apache.rocketmq.client.impl.factory.MQClientInstance.updateTopicRouteInfoFromNameServer(MQClientInstance.java:<span class="hljs-number">622</span>)<br>... <span class="hljs-number">6</span> more<br></code></pre></td></tr></table></figure><p>这个异常字面上是<strong>调用超时</strong>，所以围绕这个去解决，就是延长时间</p><hr><p><strong>RemotingTooMuchRequestException: sendDefaultImpl call timeout</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout<br>at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:<span class="hljs-number">683</span>)<br>at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="hljs-number">1391</span>)<br>at org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:<span class="hljs-number">1335</span>)<br>at org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:<span class="hljs-number">336</span>)<br>at hh.simple.SyncSendMsg.main(SyncSendMsg.java:<span class="hljs-number">35</span>)<br></code></pre></td></tr></table></figure><blockquote><p>这个异常我想的是在发送完消息后加一个延迟，一开始我加了3秒，没问题，然后我想换个小点的，但是又感觉不是这个问题，于是就把3秒延迟注掉了，发现他又好了，很奇怪</p></blockquote><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>elasticsearch 中的条件查询全部 默认只能查10条</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /test_open/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们需要使用下面的方法进行查询，此处的 size 可以通过上面条件查询全部获取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /es-mq/_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">16</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询全部文档</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T&gt;&gt; <span class="hljs-title function_">searchDocument</span><span class="hljs-params">(String indexName, Class&lt;T&gt; clazz)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个地方我进行 matchAll 查询 默认 10 条 所以要进行 _search &#123; &quot;size&quot; : 20 &#125;查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">MatchAllQuery</span> <span class="hljs-variable">matchAllQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatchAllQuery</span>.Builder().build();<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>.Builder()<br>                .matchAll(matchAllQuery)<br>                .build();<br><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>.Builder()<br>                .index(indexName)<br>                .query(query)<br>                .build();<br>        SearchResponse&lt;T&gt; response = elasticsearchClient.search(request, clazz);<br>        <span class="hljs-comment">// 真正的数据数量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> response.hits().total().value();<br>        <span class="hljs-comment">// 再次进行查询 通过数据大小</span><br>        request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>.Builder()<br>                .index(indexName)<br>                .size((<span class="hljs-type">int</span>) size)<br>                .build();<br>        response = elasticsearchClient.search(request, clazz);<br>        <span class="hljs-keyword">return</span> response.hits().hits();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;查询全部文档,索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>ElasticSearch</tag>
      
      <tag>kibana</tag>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springcloud</title>
    <link href="/2022/07/31/2022-7-31-SpringCloud/"/>
    <url>/2022/07/31/2022-7-31-SpringCloud/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务介绍⏳"><a href="#微服务介绍⏳" class="headerlink" title="微服务介绍⏳"></a>微服务介绍⏳</h1><p><strong>单体应用架构</strong>：早期互联网中使用，将所有模块都部署在一个节点上</p><p>项目简单，小项目开发成本低，但是对于大型项目不易开发和维护</p><p><strong>垂直应用架构</strong>：系统拆分</p><p>流量分担，解决了并发问题，可以针对不同模块进行优化和水平扩展，一个系统的问题不会影响到其它系统，提高容错，但是系统之间相互独立，无法向后调用，会有重复的开发任务</p><p><strong>分布式架构</strong>：将工程拆分成表现层和服务层</p><p>抽取公共的功能为服务层，提高代码服用性，系统耦合度变高</p><p><strong>SOA架构</strong>：在分布式架构基础上多了一个<code>服务注册中心</code></p><p>使用注册中心解决服务间调用关系的自动调节，但是附件右依赖，一旦某个环境出错会影响较大（服务雪崩）</p><p><strong>微服务架构</strong>：服务原子化拆分，独立打包、部署和升级</p><p>分布式系统开发成本高</p><h1 id="📒服务治理"><a href="#📒服务治理" class="headerlink" title="📒服务治理"></a>📒服务治理</h1><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>服务治理</p><blockquote><p>实现各个微服务的自动化注册与发现</p></blockquote><p>常见的注册中心有 <code>Zookeeper</code>、<code>Eureka</code>、<code>Consul</code>、<code>Nacos</code></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先要保证环境搭建完成，并可以成功访问</p><p><a href="http://192.168.33.135:8848/nacos">http://192.168.33.135:8848/nacos</a></p><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><h3 id="注册商品微服务"><a href="#注册商品微服务" class="headerlink" title="注册商品微服务"></a>注册商品微服务</h3><blockquote><p>module: shop-product</p></blockquote><p>1.首先需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.启动类添加 Nacos 注解</p><blockquote><p>为了将服务注册到注册中心</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.chaoo.mapper&quot;)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// nacos 发现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProductApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>application.yml</code>中配置 nacos</p><blockquote><p>将商品服务注册到注册中心中</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 配置 nacos</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><span class="hljs-string">:8848</span><br></code></pre></td></tr></table></figure><p>4.启动商品服务</p><p>可以发现服务已经被注册到注册中心中</p><h3 id="注册订单微服务"><a href="#注册订单微服务" class="headerlink" title="注册订单微服务"></a>注册订单微服务</h3><blockquote><p>module: shop-order</p></blockquote><p>1.引入依赖</p><p>2.添加注解</p><p>3.写配置文件</p><p>4.启动订单微服务</p><p>5.测试微服调用</p><p>在 OrderApplication.java 启动中添加 RestTemplate 方法，并把这个对象放到容器中，便于微服之间的调用</p><blockquote><p>RestTemplate 是 Spring 提供的用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 Http 服务的方法,能够大大提高客户端的编写效率</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.chaoo.mapper&quot;)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 注册 Nacos</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// 开启Fein</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">// Ribbon实现负载均衡</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.测试远程调用</p><p>在 OrderController.java 中添加如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/prod/&#123;pid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://localhost:8081/product/&quot;</span> + pid, Product.class);<br>        System.out.println(product);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder()<br>                .uid(<span class="hljs-number">1L</span>)<br>                .username(<span class="hljs-string">&quot;张三&quot;</span>)<br>                .pid(product.getId())<br>                .pname(product.getName())<br>                .price(product.getPrice())<br>                .number(<span class="hljs-number">1</span>)<br>                .build();<br>        orderService.save(order);<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.启动运行</p><p>启动 shop-product 和 shop-order ，然后在浏览器中输入 <a href="http://lcoalhost:8091/order/prod/1%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C">http://lcoalhost:8091/order/prod/1，即可看到效果</a></p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>负载均衡就是将负载（工作任务，访问请求）进行分摊到多个操作单元（服务器组件）上进行执行</p><p>根据负载均衡发生位置的不同，一般分为服务端负载均衡和客户端负载均衡。 服务端负载均衡指的是发生在服务提供者一方，比如常见的 nginx 负载均衡。而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求</p><p>在<strong>微服务</strong>调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行</p><h2 id="自定义实现负载均衡"><a href="#自定义实现负载均衡" class="headerlink" title="自定义实现负载均衡"></a>自定义实现负载均衡</h2><h3 id="1-配置一个新的服务提供者"><a href="#1-配置一个新的服务提供者" class="headerlink" title="1.配置一个新的服务提供者"></a>1.配置一个新的服务提供者</h3><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208022245839.png" alt="image-20220802222833731"></p><h4 id="2-修改OrderController"><a href="#2-修改OrderController" class="headerlink" title="2.修改OrderController"></a>2.修改OrderController</h4><p>由于有两个服务提供者，而现在 OrderController 是只能获取一个服务，因此我们需要修改这部分代码</p><blockquote><p>通过 Random 去随机指定服务提供者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/prod/&#123;pid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> &#123;<br>        <span class="hljs-comment">// 从服务中心获取请求的地址</span><br>        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">&quot;service-</span><br><span class="hljs-string">                product&quot;</span>);<br>        <span class="hljs-comment">// 定义一个随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(instances.size());<br>        <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> instances.get(index);<br>        <span class="hljs-comment">// 获取主机名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> instance.getHost();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> instance.getPort();<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://&quot;</span> + host + <span class="hljs-string">&quot;:&quot;</span> + port<br>                + <span class="hljs-string">&quot;/product/&quot;</span> + pid, Product.class);<br>        <span class="hljs-comment">//Product product =</span><br>        restTemplate.getForObject(<span class="hljs-string">&quot;http://localhost:8081/product/&quot;</span> + pid,<br>                Product.class);<br>        System.out.println(product);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder()<br>                .uid(<span class="hljs-number">1L</span>)<br>                .username(<span class="hljs-string">&quot;张三&quot;</span>)<br>                .pid(product.getId())<br>                .pname(product.getName())<br>                .price(product.getPrice())<br>                .number(<span class="hljs-number">1</span>)<br>                .build();<br>        <span class="hljs-comment">//orderService.save(order);</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-启动测试"><a href="#3-启动测试" class="headerlink" title="3.启动测试"></a>3.启动测试</h3><p>启动 shop-order 服务，并访问 <a href="http://localhost:8091/order/prod/2">http://localhost:8091/order/prod/2</a> 来查看负载均衡效果</p><h2 id="基于Ribbon实现负载均衡"><a href="#基于Ribbon实现负载均衡" class="headerlink" title="基于Ribbon实现负载均衡"></a>基于Ribbon实现负载均衡</h2><blockquote><p>Ribbon是 Spring Cloud 的一个组件，它可以让我们使用一个注解就能轻松的搞定负载均衡</p></blockquote><h3 id="1-实现负载均衡"><a href="#1-实现负载均衡" class="headerlink" title="1.实现负载均衡"></a>1.实现负载均衡</h3><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在启动类中 RestTemplate 方法上添加 <code>@LoadBalanced</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.openlab.mapper&quot;)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 注册 Nacos</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">// 负载均衡注解</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.修改控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/prod/&#123;pid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;service-product&quot;</span>;<br>        <span class="hljs-comment">// 使用 Ribbon 后，通过服务的名称来获取</span><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://&quot;</span> + url + <span class="hljs-string">&quot;/product/&quot;</span> + pid, Product.class);<br>        System.out.println(product);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder().uid(<span class="hljs-number">1L</span>)<br>                .username(<span class="hljs-string">&quot;张三&quot;</span>)<br>                .pid(product.getId())<br>                .pname(product.getName())<br>                .price(product.getPrice())<br>                .number(<span class="hljs-number">1</span>)<br>                .build();<br>        <span class="hljs-comment">//orderService.save(order);</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Ribbon支持的负载均衡策略"><a href="#2-Ribbon支持的负载均衡策略" class="headerlink" title="2.Ribbon支持的负载均衡策略"></a>2.Ribbon支持的负载均衡策略</h3><p>Ribbon内置了多种负载均衡策略,内部负载均衡的顶级接口为 com.netflix.loadbalancer.IRule , 具体的负载策略如下图所示</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208022244198.png" alt="image-20220802224410129"></p><p>修改配置来调整Ribbon的负载均衡策略</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">service-product:</span> <span class="hljs-comment"># 调用的提供者的名称</span><br>    <span class="hljs-attr">ribbon:</span><br>        <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span><br></code></pre></td></tr></table></figure><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><p>Feign 是 Spring Cloud 提供的一个声明式的伪 HTTP 客户端，它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可</p><p>Nacos 很好的兼容了 Feign，Feign默认集成了 Ribbon，所以在 Nacos 下使用 Fegin 默认就实现了负载均衡的效果</p><h2 id="使用Feign"><a href="#使用Feign" class="headerlink" title="使用Feign"></a>使用Feign</h2><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--feign组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-添加注解"><a href="#2-添加注解" class="headerlink" title="2.添加注解"></a>2.添加注解</h2><p>在 OrderApplication 启动类上添加 @EnableFeignClient 注解，开启 Feign 的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.openlab.mapper&quot;)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// 开启Feign</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-创建调用接口"><a href="#3-创建调用接口" class="headerlink" title="3.创建调用接口"></a>3.创建调用接口</h2><p>在 shop-order 微服应用中 ProductService 接口上使用 Feign 的注解，来实现远程方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;service-product&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;pid&#125;&quot;)</span><br>    Product <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>@FeignClient 注解中指定的名称是微服注册中心中的服务名称，也就是服务提供的名称</li><li>接口中的方法名称可以任意，但是尽量取一个有意义的名称</li><li>在这个接口中需要指定调用的提供者的哪个方法</li><li>@FeignClient 注解的 value + @GetMapping 注解的value 值就组成一个完整的请求路径</li></ol><h2 id="4-修改控制器类"><a href="#4-修改控制器类" class="headerlink" title="4.修改控制器类"></a>4.修改控制器类</h2><p>修改 shop-order 模块的 OrderController 控制器类，注入 ProductService 接口，并调用接口中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductService productService;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/prod/&#123;pid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.getById(pid);<br>        <br>        <span class="hljs-comment">//......省略</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-启动测试"><a href="#5-启动测试" class="headerlink" title="5.启动测试"></a>5.启动测试</h2><p>重启order微服务查看效果</p><h1 id="📒服务容错"><a href="#📒服务容错" class="headerlink" title="📒服务容错"></a>📒服务容错</h1><h2 id="高并发带来的问题"><a href="#高并发带来的问题" class="headerlink" title="高并发带来的问题"></a>高并发带来的问题</h2><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络原因或者自身的原因，服务并不能保证服务的 100% 可用，如果单个服务出现问题，调用这个服务就会出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪</p><h2 id="服务雪崩效应"><a href="#服务雪崩效应" class="headerlink" title="服务雪崩效应"></a>服务雪崩效应</h2><p>在分布式系统中，由于网络原因或自身的原因，服务一般无法保证 100% 可用。如果一个服务出现了问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等待，进而导致服务瘫痪</p><p>由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 “雪崩效应”</p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208031553988.png" alt="image-20220803155304904"  /><p>雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是 “雪落而不雪崩”</p><h2 id="常见的容错思路"><a href="#常见的容错思路" class="headerlink" title="常见的容错思路"></a>常见的容错思路</h2><p>常见的容错思路有隔离、超时、限流、熔断、降级这几种</p><h3 id="1-隔离"><a href="#1-隔离" class="headerlink" title="1.隔离"></a>1.隔离</h3><p>它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的系统服务。常见的隔离方式有：线程池隔离和信号量隔离</p><h3 id="2-超时"><a href="#2-超时" class="headerlink" title="2.超时"></a>2.超时</h3><p>在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应， 就断开请求，释放掉线程</p><h3 id="3-限流"><a href="#3-限流" class="headerlink" title="3.限流"></a>3.限流</h3><p>限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行，一旦达到的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的</p><h3 id="4-熔断"><a href="#4-熔断" class="headerlink" title="4.熔断"></a>4.熔断</h3><p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p><p>服务熔断一般有三种状态：</p><ul><li>熔断关闭状态（Closed）<ul><li>服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制</li></ul></li><li>熔断开启状态（Open）<ul><li>后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法</li></ul></li><li>半熔断状态（Half-Open）<ul><li>尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态；如果成功率仍旧很低，则重新进入熔断关闭状态</li></ul></li></ul><h3 id="5-降级"><a href="#5-降级" class="headerlink" title="5.降级"></a>5.降级</h3><p>降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案</p><blockquote><p>例如：显示网络异常</p></blockquote><h2 id="常见的容错组件"><a href="#常见的容错组件" class="headerlink" title="常见的容错组件"></a>常见的容错组件</h2><p><strong>Hystrix</strong><br>Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。</p><p><strong>Resilience4J</strong><br>Resilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x&#x2F;2.x，而且监控也支持和 prometheus等多款主流产品进行整合。</p><p><strong>Sentinel</strong><br>Sentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定。</p><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><p><strong>资源</strong>：资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码。它其实就是 Sentinal 要保护的内容</p><p><strong>规则</strong>：作用在资源之上, 定义以什么样的方式保护资源，主要包括流量控制规则、熔断降级规则以及系统保护规则。其实规则就是用来定义如何进行保护资源</p><blockquote><p>像案例中的 message1 方法就是资源，然后对此资源进行保护的就是规则</p></blockquote><p>Sentinel 的主要功能就是容错</p><p>主要体现在下面三点：</p><ol><li>流量控制</li><li>熔断降级</li><li>系统负载保护</li></ol><p>最终目的就是在 Sentinel 上配置各种各样的规则，去实现各种各样的容错功能</p><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p><strong>资源名</strong>：唯一名称，默认是请求路径，可自定义</p><p><strong>针对来源</strong>：指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制</p><p><strong>阈值类型&#x2F;单机阈值</strong>：QPS（每秒请求数量）: 当调用该接口的QPS达到阈值的时候，进行限流</p><p><strong>线程数</strong>：当调用该接口的线程数达到阈值的时候，进行限流</p><p><strong>是否集群</strong>：暂不需要集群</p><p>Sentinel 流控模式</p><ul><li>直接（默认）：接口达到限流条件时，开启限流。即只对指定的接口进行流控。</li><li>关联：当关联的资源达到限流条件时，开启限流 [适合做应用让步，也就是关联的资源优先]</li><li>链路：当从某个接口过来的资源达到限流条件时，开启限流</li></ul><h3 id="直接流控"><a href="#直接流控" class="headerlink" title="直接流控"></a>直接流控</h3><blockquote><p>限制QPS为2，即每秒最多两次</p></blockquote><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041129124.png" alt="image-20220804112909021" style="zoom: 67%;" /><p>从图上可以看出来我们只是去配置了单机阈值为2，并没有去做其它改变，因为 Sentinel 的默认流控方式就是直接流控</p><p>当然也可以去测试一下<strong>并发线程数</strong></p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041135753.png" alt="image-20220804113514679" style="zoom:50%;" /><p>只不过这样就需要去使用 Jmeter 去测试</p><blockquote><p>Jemter:</p><p>首先添加一个线程组，设置好线程数为 2，并选择循环次数为永远<br>然后再添加取样器中的 HTTP 请求，设置好协议为 http，服务器名称或IP 为localhost，端口号为8091，路径设置为 &#x2F;order&#x2F;message1，方法设置为 GET。这样就可以点击启动了</p></blockquote><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041136596.png" alt="image-20220804113622521" style="zoom: 67%;" /><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041136886.png" alt="image-20220804113636835"></p><h3 id="关联流控"><a href="#关联流控" class="headerlink" title="关联流控"></a>关联流控</h3><p>让我们的 message1接口 去关联 message2接口，当 message2 接口达到一定阈值条件时，就会对 message1 接口进行限流</p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041140341.png" alt="image-20220804114029282" style="zoom:67%;" /><p>设置完成后，使用 Jmeter 向&#x2F;order&#x2F;message2连续发送请求，注意QPS一定要大于3</p><p>Jmeter 线程组配置</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041141298.png" alt="image-20220804114108227"></p><p>Jmeter 请求配置</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041141439.png" alt="image-20220804114141362"></p><p>启动 Jmeter 后，我们会发现访问不了 message1 接口</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041136886.png" alt="image-20220804113636835"></p><h3 id="链路流控"><a href="#链路流控" class="headerlink" title="链路流控"></a>链路流控</h3><p>链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流。它的功能有点类似于针对来源配置项，区别在于：<strong>针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度更细</strong></p><p>例如，有一个 Controller 控制器类，里面有两个方法 message1 和 message2，而这两个方法都会调用 Service 中的 message 方法，这时，我们就可以针对这两个链路进行限流了。我们把 Service中的 message 方法当做是资源，在它上面设置规则：当 message1 请求的 QPS 达到 3 时限流</p><p>第1步： 编写一个service，在里面添加一个方法message</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl2</span> &#123;<br>    <span class="hljs-comment">// 通过 @SentinelResource 注解的 value 属性来指定资源的名称</span><br>    <span class="hljs-meta">@SentinelResource(&quot;message&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;message&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第2步： 在Controller中声明两个方法，分别调用service中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-comment">//...省略</span><br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderServiceImpl2 orderServiceImpl2;<br>    <br>    <span class="hljs-comment">//......省略</span><br>    <br>    <span class="hljs-comment">// 用于测试高并发的方法</span><br>    <span class="hljs-meta">@GetMapping(&quot;/message&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message&quot;</span>;<br>        &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/message1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message1</span><span class="hljs-params">()</span> &#123;<br>    orderServiceImpl2.message();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message1&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/message2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message2</span><span class="hljs-params">()</span> &#123;<br>        orderServiceImpl2.message();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041146409.png" alt="image-20220804114628298" style="zoom: 50%;" /><blockquote><p>感觉链路和关联在某些方向上是相似的</p><p>但是不同在于链路中， 入口资源是需要去调用资源的，当入口资源访问QPS达到一定程度，我们会对此资源实行限制</p><p>而关联则是通过另一个资源 message2 去影响 message1</p></blockquote><h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><p>RT: <code>Round Trip Time</code>,响应时间</p><h3 id="平均响应时间"><a href="#平均响应时间" class="headerlink" title="平均响应时间"></a>平均响应时间</h3><p>在 Sentinel 流控规则中找到 &#x2F;order&#x2F;message1 ，然后点击“熔断”按钮，打开熔断规则配置面版，并进行如下图所示的规则配置</p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041156234.png" alt="image-20220804115614118" style="zoom: 50%;" /><p>上面的配置意思是：当资源的平均响应时间超过阈值（以 ms 为单位）之后，资源进入准降级状态。如果接下来 1s 内持续进入 5 个请求，它们的 RT (Round Trip Time,响应时间)都持续超过这个阈值，那么在接下的时间窗口（以 s 为单位）之内，就会对这个方法进行服务降级</p><h3 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h3><p>当资源的每秒异常总数占通过量的比值超过阈值之后，资源进入降级状态，即在接下的时间窗口（以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]</p><p>第1步: 首先模拟一个异常。首先设置了一个全局变量 i，每次访问这个值加 1，并在 message1 方法中手动抛出异常。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-meta">@GetMapping(&quot;/message1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// orderServiceImpl2.message(20);</span><br>    i++;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message1&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第2步: 设置异常比例为0.25</p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041158739.png" alt="image-20220804115812637" style="zoom:50%;" /><p>设置好后保存，然后频繁访问 message1，就可以看到被降低了，降低的维持时间为 5 秒钟</p><h3 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h3><p>当资源近 1 分钟的异常数目超过阈值之后会进行服务降级。注意由于统计时间窗口是秒钟级别的，若时间窗口小于 60s，则结束熔断状态后仍可能再进入熔断状态</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041154864.png" alt="image-20220804115408774"></p><h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><p>热点参数流控规则是一种更细粒度的流控规则，它允许将规则具体到参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/message3&quot;)</span><br><span class="hljs-meta">@SentinelResource(&quot;message3&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message3</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;&quot;)</span> String name,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(value = &quot;age&quot;, defaultValue = &quot;0&quot;)</span> Integer age)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message3 &quot;</span> + name + <span class="hljs-string">&quot; &quot;</span> + age;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：要想热点规则生效，必须在方法上添加 @SentinelResource 注解，并通过这个注解来指定资源的名称，然后在这个资源名称上进行热点规则的指定，这样才会有流控的效果</p><blockquote><p>在配置name的热点规则，不生效</p></blockquote><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041200021.png" alt="image-20220804120049902" style="zoom:50%;" /><p>上面的配置表示除了 age 的值为 18 以外，其它的值都会被流控</p><h2 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h2><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源访问控制的功能。来源访问控制根据资源的请求来源（origin）限制资源是否通过：</p><ul><li>若配置白名单，则只有请求来源位于白名单内时才可通过；</li><li>若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过</li></ul><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 Load（负载）、RT（平均响应时间）、入口 QPS 、CPU 使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效。</p><ul><li>Load（仅对 Linux&#x2F;Unix-like 机器生效）：当系统 load1（在Linux中包含load1~load15，表示1分钟到15分钟）超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般是 CPU cores * 2.5。</li><li>RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li>线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li><li>CPU使用率：当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护。</li></ul><h2 id="自定义异常返回"><a href="#自定义异常返回" class="headerlink" title="自定义异常返回"></a>自定义异常返回</h2><p>在前面的规则中，如果被限流了，会显示一个异常页面。当有多个规则同时起作用时，这个异常页面就不知道是那个规则返回的页面，不便于程序维护。为了解决这个问题，Sentinel 支持自定义异常返回</p><p>在 shop-order 微服中的 config 包下，新增 ExceptionHandlerPage 类，并实现 BlockExceptionHandler 接口，然后重写 handle 方法。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义异常处理页</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionHandlerPage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse response, BlockException ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> FlowException) &#123;<br>            msg = <span class="hljs-string">&quot;限流了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> DegradeException) &#123;<br>            msg = <span class="hljs-string">&quot;降级了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> ParamFlowException) &#123;<br>            msg = <span class="hljs-string">&quot;热点参数限流&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> SystemBlockException) &#123;<br>            msg = <span class="hljs-string">&quot;系统规则(负载/...不满足要求)&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> AuthorityException) &#123;<br>            msg = <span class="hljs-string">&quot;授权规则不通过&quot;</span>;<br>        &#125;<br><br>        response.setStatus(<span class="hljs-number">500</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br><br>        response.getWriter().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(msg));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CTRL + ALT + B</code></p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041449241.png" alt="image-20220804144908155" style="zoom:67%;" /><p>重启服务后，设置流控，再次访问可以看到如下效果</p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041449733.png" alt="image-20220804144939679" style="zoom:67%;" /><h2 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="@SentinelResource"></a>@SentinelResource</h2><p>在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护。同时还能通过 @SentinelResource 来指定出现异常时的处理策略</p><p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041450222.png" alt="image-20220804145032135"></p><h3 id="定义在方法中"><a href="#定义在方法中" class="headerlink" title="定义在方法中"></a>定义在方法中</h3><p>可以直接将限流和降级方法定义在方法中</p><p><strong>定义限流和降级方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl2</span> &#123;<br>    <span class="hljs-comment">// 通过 @SentinelResource 注解的 value 属性来指定资源的名称</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;message&quot;,</span><br><span class="hljs-meta">            blockHandler = &quot;blockHandler&quot;, // 发生 BlockException 时进入的方法</span><br><span class="hljs-meta">            fallback = &quot;fallback&quot; // 发生 Throwable 异常时会进入</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">(Integer age)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理BlockException的函数名称，函数要求：</span><br><span class="hljs-comment">     * 1. 必须是 public</span><br><span class="hljs-comment">     * 2. 返回类型参数与原方法一致</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">blockHandler</span><span class="hljs-params">(Integer age, BlockException e)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, e.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口被限流了。。。。&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理Throwable的函数名称，函数要求：</span><br><span class="hljs-comment">     * 1. 必须是 public</span><br><span class="hljs-comment">     * 2. 返回类型参数与原方法一致</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fallback</span><span class="hljs-params">(Integer age, Throwable e)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, e.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口发生异常了。。。&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>调用方法</strong></p><p>在 OrderController 控制器类中添加一个方法 message()，并在这个方法中调用 Service 中定义的 message() 方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/message1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message1</span><span class="hljs-params">()</span> &#123;<br>    orderServiceImpl2.message(<span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message1&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意要在加了 @SentinelResource 注解的资源上添加限流才会有效果</p><h3 id="定义在单独类中"><a href="#定义在单独类中" class="headerlink" title="定义在单独类中"></a>定义在单独类中</h3><p>将限流和降级方法外置到单独的类中</p><p><strong>自定义外部BlockHandler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerBlockExceptionHandler</span> &#123;<br>    <span class="hljs-comment">// 如果是定义在类的外部这个方法必须是静态的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">blockHandler</span><span class="hljs-params">(Integer age, BlockException e)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, e.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口被限流了。。。。&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义外部Fallback类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerFallbackHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">fallback</span><span class="hljs-params">(Integer age, Throwable e)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, e.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口发生异常了。。。&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：当定义为外部类时，方法必须是 static 的，否则不生效</p></blockquote><p><strong>使用外部定义的类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SentinelResource(value = &quot;message&quot;,</span><br><span class="hljs-meta">                  blockHandler = &quot;blockHandler&quot;, // 发生 BlockException 时进入的方法</span><br><span class="hljs-meta">                  blockHandlerClass = CustomerBlockExceptionHandler.class,</span><br><span class="hljs-meta">                  fallback = &quot;fallback&quot;, // 发生 Throwable 异常时会进入</span><br><span class="hljs-meta">                  fallbackClass = CustomerFallbackHandler.class</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">(Integer age)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message &quot;</span> + age;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041454502.png" alt="image-20220804145450355"></p><h1 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041455454.png" alt="image-20220804145524393"></p><p>首先 Sentinel 控制台通过 API 将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中</p><h3 id="编写处理类"><a href="#编写处理类" class="headerlink" title="编写处理类"></a>编写处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个类是用于持久化 Sentinel 的配置,它需要实现 InitFunc 接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilePersistence</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitFunc</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String applicationName;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ruleDir</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>) + <span class="hljs-string">&quot;/sentinel-rules/&quot;</span>+applicationName;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">flowRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/flow-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">degradeRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/degrade-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">systemRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/system-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">authorityRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/authority-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">paramFlowRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/param-flow-rule.json&quot;</span>;<br><br>        <span class="hljs-built_in">this</span>.mkdirIfNotExits(ruleDir);<br>        <span class="hljs-built_in">this</span>.createFileIfNotExits(flowRulePath);<br>        <span class="hljs-built_in">this</span>.createFileIfNotExits(degradeRulePath);<br>        <span class="hljs-built_in">this</span>.createFileIfNotExits(systemRulePath);<br>        <span class="hljs-built_in">this</span>.createFileIfNotExits(authorityRulePath);<br>        <span class="hljs-built_in">this</span>.createFileIfNotExits(paramFlowRulePath);<br><br>        <span class="hljs-comment">// 流控规则</span><br>        ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(flowRulePath, flowRuleListParser);<br>        FlowRuleManager.register2Property(flowRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(flowRulePath, <span class="hljs-built_in">this</span>::encodeJson);<br>        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);<br><br>        <span class="hljs-comment">// 降级规则</span><br>        ReadableDataSource&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(degradeRulePath, degradeRuleListParser);<br>        DegradeRuleManager.register2Property(degradeRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;DegradeRule&gt;&gt; degradeRuleWDS = <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(degradeRulePath, <span class="hljs-built_in">this</span>::encodeJson);<br>        WritableDataSourceRegistry.registerDegradeDataSource(degradeRuleWDS);<br><br>        <span class="hljs-comment">// 系统规则</span><br>        ReadableDataSource&lt;String, List&lt;SystemRule&gt;&gt; systemRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(systemRulePath, systemRuleListParser);<br>        SystemRuleManager.register2Property(systemRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;SystemRule&gt;&gt; systemRuleWDS = <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(systemRulePath, <span class="hljs-built_in">this</span>::encodeJson);<br>        WritableDataSourceRegistry.registerSystemDataSource(systemRuleWDS);<br><br>        <span class="hljs-comment">// 授权规则</span><br>        ReadableDataSource&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(authorityRulePath, authorityRuleListParser);<br>        AuthorityRuleManager.register2Property(authorityRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;AuthorityRule&gt;&gt; authorityRuleWDS = <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(authorityRulePath, <span class="hljs-built_in">this</span>::encodeJson);<br>        WritableDataSourceRegistry.registerAuthorityDataSource(authorityRuleWDS);<br><br>        <span class="hljs-comment">// 热点参数规则</span><br>        ReadableDataSource&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(paramFlowRulePath, paramFlowRuleListParser);<br>        ParamFlowRuleManager.register2Property(paramFlowRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;ParamFlowRule&gt;&gt; paramFlowRuleWDS = <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(paramFlowRulePath, <span class="hljs-built_in">this</span>::encodeJson);<br>        ModifyParamFlowRulesCommandHandler.setWritableDataSource(paramFlowRuleWDS);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;FlowRule&gt;&gt; flowRuleListParser = source -&gt; JSON.parseObject(source, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;FlowRule&gt;&gt;() &#123;&#125;);<br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleListParser = source<br>            -&gt; JSON.parseObject(source, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;DegradeRule&gt;&gt;() &#123;&#125;);<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;SystemRule&gt;&gt; systemRuleListParser = source -&gt; JSON.parseObject(source, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;SystemRule&gt;&gt;() &#123;&#125;);<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleListParser = source -&gt; JSON.parseObject(source, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;AuthorityRule&gt;&gt;() &#123;&#125;);<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleListParser = source -&gt; JSON.parseObject(source, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;ParamFlowRule&gt;&gt;() &#123;&#125;);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mkdirIfNotExits</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.mkdirs();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFileIfNotExits</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.createNewFile();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> &lt;T&gt; String <span class="hljs-title function_">encodeJson</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在resources下创建配置目录 META-INF&#x2F;services ,然后添加文件</p><p><code>com.alibaba.csp.sentinel.init.InitFunc</code></p><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><p>在文件中添加配置类的全路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">com.openlab.config.FilePersistence</span><br></code></pre></td></tr></table></figure><p>做完以上步骤后，重新启动服务，添加流控规则，然后再重新启动服务来查看效果</p><h1 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel</h1><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Sentinel--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="开启支持"><a href="#开启支持" class="headerlink" title="开启支持"></a>开启支持</h3><p>在 sho-order 微服的 application.yml 配置文件中开启Feign对Sentinel的支持</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>    <span class="hljs-attr">sentinel:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="编写容错"><a href="#编写容错" class="headerlink" title="编写容错"></a>编写容错</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceFallBack</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getById</span><span class="hljs-params">(Long pid)</span> &#123;<br>        <span class="hljs-comment">// 编写业务代码</span><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> Product.builder()<br>                .id(<span class="hljs-number">1L</span>)<br>                .name(<span class="hljs-string">&quot;远程调用&quot;</span>)<br>                .price(<span class="hljs-number">100.00</span>)<br>                .build();<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在这个类中，需要实现 Fegin 所在的接口，并去实现接口中的所有方法，一旦Fegin远程调用出现问题，就会进入当前类中同名方法，执行容错逻辑</p></blockquote><h3 id="指定容错类"><a href="#指定容错类" class="headerlink" title="指定容错类"></a>指定容错类</h3><p>为被容器的接口指定容错类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;service-product&quot;</span><br><span class="hljs-meta">        , fallback = ProductServiceFallBack.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/product/&#123;pid&#125;&quot;)</span><br>    Product <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>value 用于指定调用 nacos 中定义的服务名</li><li>fallback 用于指定当前的 Feign 接口的容错类</li></ol></blockquote><h3 id="修改controller"><a href="#修改controller" class="headerlink" title="修改controller"></a>修改controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/prod/&#123;pid&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> &#123;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.getById(pid);<br>    <br>    log.info(<span class="hljs-string">&quot;查询商品信息为:&#123;&#125;&quot;</span>, product);<br><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder()<br>        .uid(<span class="hljs-number">1L</span>)<br>        .username(<span class="hljs-string">&quot;张三&quot;</span>)<br>        .pid(product.getId())<br>        .pname(product.getName())<br>        .price(product.getPrice())<br>        .number(<span class="hljs-number">1</span>)<br>        .build();<br>    <span class="hljs-comment">//orderService.save(order);</span><br>    log.info(<span class="hljs-string">&quot;创建订单成功,订单信息为:&#123;&#125;&quot;</span>, order);<br>    <br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>启动 shop-product 服务和 shop-order 服务，然后访问 <a href="http://localhost:8091/order/prod/1%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E7%9A%84%E3%80%82%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E5%81%9C%E6%AD%A2%E6%89%80%E6%9C%89">http://localhost:8091/order/prod/1，发现是可以正常访问的。接下来我们停止所有</a> shop-product 服务，重启 shop-order 服务，访问请求观察容错效</p><h1 id="📒服务网关"><a href="#📒服务网关" class="headerlink" title="📒服务网关"></a>📒服务网关</h1><ul><li><p>Ngnix+lua</p></li><li><p>Kong</p></li><li><p>Zuul</p></li><li><p>Spring Cloud Gateway</p></li></ul><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><blockquote><p>SPring Cloud中使用</p></blockquote><h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>我们创建一个新的模块，api-gateway</p><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--gateway --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写主类"><a href="#编写主类" class="headerlink" title="编写主类"></a>编写主类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(GatewayApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">api-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment"># 配置 nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><span class="hljs-string">:8848</span><br>    <span class="hljs-comment"># 配置 gateway</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># 表示让 gateway 可以发现 nacos 中的服务</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 配置路由</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">product_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8081</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/product-api/**</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Method=GET</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8091</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">2</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order-api/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><p>网关配置参数说明：</p><ul><li>routes: 路由数组，所谓路由是指定当请求满足什么条件的时候转到哪个微服务</li><li>id：当前路由的标识，要求唯一</li><li>uri：请求要转发到的地址</li><li>order：路由的优先级,数字越小级别越高</li><li>predicates：断言，所谓断言是指路由转发要满足的条件<ul><li>Path：当请求路径满足Path指定的规则时，才进行路由转发</li></ul></li><li>filters：过滤器，是请求在传递过程中可以通过过滤器对其进行一定的修改<ul><li>StripPrefix：转发之前去掉 1 层路径</li></ul></li></ul><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>在浏览器中输入 <a href="http://localhost:7000/product-api/product/1%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E7%BD%91%E5%85%B3%E5%8E%BB%E8%AE%BF%E9%97%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1">http://localhost:7000/product-api/product/1，并通过网关去访问微服务</a></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041507701.png" alt="image-20220804150731631"></p><h2 id="整合Nacos"><a href="#整合Nacos" class="headerlink" title="整合Nacos"></a>整合Nacos</h2><p>由于网关也是一个微服，因此它也需要注册到 Nacos的注册中，并且它需要从注册中心获取服务<br>在 api-gateway 模块中添加 nacos 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--负载均衡插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加好依赖，还需要在启动类上添加 @EnableDiscoveryClient 来开启 Nacos 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 开启 Nacos 功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APIGatApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(APIGatApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改配置文件，添加 Nacos 的服务地址</p><blockquote><p>注意：因为下面使用了负载均衡，所以必须要要在maven中导入负载均衡的插件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">api-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment"># 配置 nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><span class="hljs-string">:8848</span><br>    <span class="hljs-comment"># 配置 gateway</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># 表示让 gateway 可以发现 nacos 中的服务</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 配置路由</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">product_route</span><br><span class="hljs-comment">#          uri: http://localhost:8081</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-product</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/product-api/**</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Method=GET</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order_route</span><br><span class="hljs-comment">#          uri: http://localhost:8091</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-order</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">2</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order-api/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><p>配置参数说明：</p><ol><li>将 gateway 注册到 nacos 中，因此要配置 nacos 的服务地址</li><li>gateway.discovery.locator.enabled&#x3D;true 表示让gateway可以发现nacos中的微服务</li><li>gateway.routes.id&#x3D;product_route 中的 product_route 是给这个路由取的标识，即服务<br>名称</li><li>gateway.routes.uri&#x3D;lb:&#x2F;&#x2F;service-product 中的 lb指的是从 nacos 中按照名称获取微服<br>务，并遵循负载均衡策略。而 service-product 是 nacos 中的服务名称</li></ol><h1 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h1><p>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:</p><ul><li>id，路由标识符，区别于其他 Route。</li><li>uri，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。</li><li>order，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。</li><li>predicate，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li><li>filter，过滤器用于修改请求和响应信息。</li></ul><p><strong>执行流程</strong></p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208041510648.png" alt="image-20220804151053531" style="zoom:50%;" /><p>执行流程大概如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> Gateway Client向Gateway Server发送请求<br><span class="hljs-bullet">2.</span> 请求首先会被HttpWebHandlerAdapter进行提取组装成网关上下文<br><span class="hljs-bullet">3.</span> 然后网关的上下文会传递到DispatcherHandler，它负责将请求分发给<br>RoutePredicateHandlerMapping<br><span class="hljs-bullet">4.</span> RoutePredicateHandlerMapping负责路由查找，并根据路由断言判断路由是否可用<br><span class="hljs-bullet">5.</span> 如果过断言成功，由FilteringWebHandler创建过滤器链并调用<br><span class="hljs-bullet">6.</span> 请求会一次经过PreFilter--微服务--PostFilter的方法，最终返回响应<br></code></pre></td></tr></table></figure><h1 id="断言⏳"><a href="#断言⏳" class="headerlink" title="断言⏳"></a>断言⏳</h1><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h2><p>局部过滤器是针对单个路由的过滤器</p><h3 id="内置局部过滤器"><a href="#内置局部过滤器" class="headerlink" title="内置局部过滤器"></a>内置局部过滤器</h3><p>在SpringCloud Gateway中内置了很多不同类型的网关路由过滤器</p><h3 id="内置局部过滤器的使用"><a href="#内置局部过滤器的使用" class="headerlink" title="内置局部过滤器的使用"></a>内置局部过滤器的使用</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order_route</span><br><span class="hljs-comment"># uri: http://localhost:8091</span><br><span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-order</span><br><span class="hljs-attr">order:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">predicates:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order-api/**</span><br><span class="hljs-attr">filters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">SetStatus=201</span> <span class="hljs-comment"># 配置设置响应的状态码</span><br></code></pre></td></tr></table></figure><h3 id="自定义局部过滤器"><a href="#自定义局部过滤器" class="headerlink" title="自定义局部过滤器"></a>自定义局部过滤器</h3><p>1.在配置文件中添加一个Log的过滤器配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order_route</span><br><span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-order</span><br><span class="hljs-attr">order:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">predicates:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order-api/**</span><br><span class="hljs-attr">filters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Log=true</span><br></code></pre></td></tr></table></figure><p>2.自定义一个过滤器工厂并实现相应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chaoo.predicates;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义过滤器,</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogGatewayFilterFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractGatewayFilterFactory</span>&lt;LogGatewayFilterFactory.Config&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogGatewayFilterFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(LogGatewayFilterFactory.Config.class);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">shortcutFieldOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;flag&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> GatewayFilter <span class="hljs-title function_">apply</span><span class="hljs-params">(Config config)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFilter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>                <span class="hljs-keyword">if</span> (config.isFlag()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Log过滤已经生效了.....&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 执行下一个过滤器</span><br>                <span class="hljs-keyword">return</span> chain.filter(exchange);<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@NoArgsConstructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.启动测试</p><p>在浏览器中输入 <a href="http://localhost:8091/product-api/product/1">http://localhost:8091/product-api/product/1</a> 来进行访问并查看效果</p><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><p>全局过滤器作用于所有路由, 无需配置。通过全局过滤器可以实现对权限的统一校验，安全性验证等功能</p><h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chaoo.filter;<br><br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.utils.StringUtils;<br><span class="hljs-keyword">import</span> io.netty.util.internal.StringUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">//@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 完成判断的业务逻辑</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">// 获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-comment">// StringUtils 是 nacos 包中</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.equals(<span class="hljs-string">&quot;admin&quot;</span>, token)) &#123;<br>            log.info(<span class="hljs-string">&quot;鉴权失败....&quot;</span>);<br>            <span class="hljs-comment">// 向客户端响应数据</span><br>            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">// 响应一个完整的状态</span><br>            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>        &#125;<br>        <span class="hljs-comment">// 如果条件成立，则执行目标对象</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤器优先级,数字越小越优先</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动服务后，访问 <a href="http://localhost:7000/product-api/product/1%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%8E%B0%E4%B8%8D%E8%83%BD%E8%BF%94%E5%9B%9E%E4%BA%86%EF%BC%8C%E8%BF%94%E5%9B%9E401">http://localhost:7000/product-api/product/1，会发现不能返回了，返回401</a> 状态码。如果希望能够访问，则需要加 token 参数。请求链接修改为：<a href="http://localhost:7000/product-api/product/1?token=admin">http://localhost:7000/product-api/product/1?token=admin</a></p><h1 id="网关限流"><a href="#网关限流" class="headerlink" title="网关限流"></a>网关限流</h1><h2 id="基于route维度限流"><a href="#基于route维度限流" class="headerlink" title="基于route维度限流"></a>基于route维度限流</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a><strong>1.导入依赖</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-编写配置类"><a href="#2-编写配置类" class="headerlink" title="2.编写配置类"></a><strong>2.编写配置类</strong></h3><p>基于Sentinel 的Gateway限流是通过其提供的Filter来完成的，使用时只需注入对应的SentinelGatewayFilter实例以及 SentinelGatewayBlockExceptionHandler 实例即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.openlab.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.SentinelGatewayConstants;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiDefinition;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPathPredicateItem;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPredicateItem;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.GatewayApiDefinitionManager;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectProvider;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.function.BodyInserters;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于route维度限流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayConfiguration</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GatewayConfiguration</span><span class="hljs-params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider, ServerCodecConfigurer serverCodecConfigurer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);<br>        <span class="hljs-built_in">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化一个限流的过滤器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-keyword">public</span> GlobalFilter <span class="hljs-title function_">sentinelGatewayFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelGatewayFilter</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 配置初始化的限流参数</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initGatewayRules</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*Set&lt;GatewayFlowRule&gt; rules = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">        rules.add(</span><br><span class="hljs-comment">                new GatewayFlowRule(&quot;product_route&quot;) //资源名称,对应路由id</span><br><span class="hljs-comment">                        .setCount(1) // 限流阈值</span><br><span class="hljs-comment">                        .setIntervalSec(1) // 统计时间窗口,单位是秒,默认是 1 秒</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">        GatewayRuleManager.loadRules(rules);*/</span><br><br>        <span class="hljs-comment">// 上面的代码是基于 route维度进行限流</span><br>        <span class="hljs-comment">// 下面的代码是基于自定义API维度进行限流</span><br><br>        Set&lt;GatewayFlowRule&gt; rules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        rules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;product_api1&quot;</span>)<br>                .setCount(<span class="hljs-number">1</span>)<br>                .setIntervalSec(<span class="hljs-number">1</span>));<br><br>        rules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;product_api2&quot;</span>)<br>                .setCount(<span class="hljs-number">1</span>)<br>                .setIntervalSec(<span class="hljs-number">1</span>));<br>        GatewayRuleManager.loadRules(rules);<br>    &#125;<br><br>    <span class="hljs-comment">// 配置限流的异常处理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="hljs-title function_">sentinelGatewayBlockExceptionHandler</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelGatewayBlockExceptionHandler</span>(viewResolvers, serverCodecConfigurer);<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义限流异常页面</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBlockHandlers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BlockRequestHandler</span> <span class="hljs-variable">blockRequestHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockRequestHandler</span>() &#123;<br>            <span class="hljs-keyword">public</span> Mono&lt;ServerResponse&gt; <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(ServerWebExchange</span><br><span class="hljs-params">                                                              serverWebExchange, Throwable throwable)</span> &#123;<br>                <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">0</span>);<br>                map.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;接口被限流了&quot;</span>);<br>                <span class="hljs-keyword">return</span> ServerResponse.status(HttpStatus.OK)<br>                        .contentType(MediaType.APPLICATION_JSON_UTF8)<br>                        .body(BodyInserters.fromObject(map));<br>            &#125;<br>        &#125;;<br>        GatewayCallbackManager.setBlockHandler(blockRequestHandler);<br>    &#125;<br><br><br>    <span class="hljs-comment">//自定义API分组</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initCustomizedApis</span><span class="hljs-params">()</span> &#123;<br>        Set&lt;ApiDefinition&gt; definitions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ApiDefinition</span> <span class="hljs-variable">api1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiDefinition</span>(<span class="hljs-string">&quot;product_api1&quot;</span>)<br>                .setPredicateItems(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ApiPredicateItem&gt;() &#123;&#123;<br>                    <span class="hljs-comment">// 以/product-serv/product/api1 开头的请求</span><br>                    add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiPathPredicateItem</span>()<br>                            .setPattern(<span class="hljs-string">&quot;/product-api/product/api1/**&quot;</span>)<br>                            .setMatchStrategy(<br>                                    SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));<br><br>                &#125;&#125;);<br><br>        <span class="hljs-type">ApiDefinition</span> <span class="hljs-variable">api2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiDefinition</span>(<span class="hljs-string">&quot;product_api2&quot;</span>)<br>                .setPredicateItems(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ApiPredicateItem&gt;() &#123;&#123;<br>                    <span class="hljs-comment">// 以/product-serv/product/api2/demo1 完成的url路径匹配</span><br>                    add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiPathPredicateItem</span>()<br>                            .setPattern(<span class="hljs-string">&quot;/product-api/product/api2/demo1&quot;</span>));<br>                &#125;&#125;);<br>        definitions.add(api1);<br>        definitions.add(api2);<br><br>        GatewayApiDefinitionManager.loadApiDefinitions(definitions);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-启动测试-1"><a href="#3-启动测试-1" class="headerlink" title="3.启动测试"></a><strong>3.启动测试</strong></h3><p>重新启动服务 shop-product 和 shop-gateway 服务。</p><p>在一秒钟内多次访问<a href="http://localhost:7000/product-api/product/1%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%99%90%E6%B5%81%E5%90%AF%E4%BD%9C%E7%94%A8%E4%BA%86">http://localhost:7000/product-api/product/1就可以看到限流启作用了</a></p><h2 id="自定义API维度限流"><a href="#自定义API维度限流" class="headerlink" title="自定义API维度限流"></a>自定义API维度限流</h2><p>自定义API维度限流是一种更细粒度的限流规则定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.openlab.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.SentinelGatewayConstants;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiDefinition;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPathPredicateItem;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPredicateItem;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.GatewayApiDefinitionManager;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectProvider;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.function.BodyInserters;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于route维度限流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayConfiguration</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GatewayConfiguration</span><span class="hljs-params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider, ServerCodecConfigurer serverCodecConfigurer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);<br>        <span class="hljs-built_in">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化一个限流的过滤器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-keyword">public</span> GlobalFilter <span class="hljs-title function_">sentinelGatewayFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelGatewayFilter</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 配置初始化的限流参数</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initGatewayRules</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*Set&lt;GatewayFlowRule&gt; rules = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">        rules.add(</span><br><span class="hljs-comment">                new GatewayFlowRule(&quot;product_route&quot;) //资源名称,对应路由id</span><br><span class="hljs-comment">                        .setCount(1) // 限流阈值</span><br><span class="hljs-comment">                        .setIntervalSec(1) // 统计时间窗口,单位是秒,默认是 1 秒</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">        GatewayRuleManager.loadRules(rules);*/</span><br><br>        <span class="hljs-comment">// 上面的代码是基于 route维度进行限流</span><br>        <span class="hljs-comment">// 下面的代码是基于自定义API维度进行限流</span><br><br>        Set&lt;GatewayFlowRule&gt; rules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        rules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;product_api1&quot;</span>)<br>                .setCount(<span class="hljs-number">1</span>)<br>                .setIntervalSec(<span class="hljs-number">1</span>));<br><br>        rules.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;product_api2&quot;</span>)<br>                .setCount(<span class="hljs-number">1</span>)<br>                .setIntervalSec(<span class="hljs-number">1</span>));<br>        GatewayRuleManager.loadRules(rules);<br>    &#125;<br><br>    <span class="hljs-comment">// 配置限流的异常处理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="hljs-title function_">sentinelGatewayBlockExceptionHandler</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelGatewayBlockExceptionHandler</span>(viewResolvers, serverCodecConfigurer);<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义限流异常页面</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBlockHandlers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BlockRequestHandler</span> <span class="hljs-variable">blockRequestHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockRequestHandler</span>() &#123;<br>            <span class="hljs-keyword">public</span> Mono&lt;ServerResponse&gt; <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(ServerWebExchange</span><br><span class="hljs-params">                                                              serverWebExchange, Throwable throwable)</span> &#123;<br>                <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">0</span>);<br>                map.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;接口被限流了&quot;</span>);<br>                <span class="hljs-keyword">return</span> ServerResponse.status(HttpStatus.OK)<br>                        .contentType(MediaType.APPLICATION_JSON_UTF8)<br>                        .body(BodyInserters.fromObject(map));<br>            &#125;<br>        &#125;;<br>        GatewayCallbackManager.setBlockHandler(blockRequestHandler);<br>    &#125;<br><br><br>    <span class="hljs-comment">//自定义API分组</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initCustomizedApis</span><span class="hljs-params">()</span> &#123;<br>        Set&lt;ApiDefinition&gt; definitions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ApiDefinition</span> <span class="hljs-variable">api1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiDefinition</span>(<span class="hljs-string">&quot;product_api1&quot;</span>)<br>                .setPredicateItems(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ApiPredicateItem&gt;() &#123;&#123;<br>                    <span class="hljs-comment">// 以/product-serv/product/api1 开头的请求</span><br>                    add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiPathPredicateItem</span>()<br>                            .setPattern(<span class="hljs-string">&quot;/product-api/product/api1/**&quot;</span>)<br>                            .setMatchStrategy(<br>                                    SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));<br><br>                &#125;&#125;);<br><br>        <span class="hljs-type">ApiDefinition</span> <span class="hljs-variable">api2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiDefinition</span>(<span class="hljs-string">&quot;product_api2&quot;</span>)<br>                .setPredicateItems(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ApiPredicateItem&gt;() &#123;&#123;<br>                    <span class="hljs-comment">// 以/product-serv/product/api2/demo1 完成的url路径匹配</span><br>                    add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiPathPredicateItem</span>()<br>                            .setPattern(<span class="hljs-string">&quot;/product-api/product/api2/demo1&quot;</span>));<br>                &#125;&#125;);<br>        definitions.add(api1);<br>        definitions.add(api2);<br><br>        GatewayApiDefinitionManager.loadApiDefinitions(definitions);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 shop-product 服务中的 ProductController 类中添加几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/product&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductService productService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;pid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">product</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> Long pid)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;查询商品编号为 &#123;&#125; 的商品信息&quot;</span>, pid);<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.getById(pid);<br>        log.info(<span class="hljs-string">&quot;查询商品成功,商品信息为 &#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(product));<br>        <span class="hljs-comment">//TimeUnit.SECONDS.sleep(40);</span><br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/api1/demo1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;api1 demo1&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/api1/demo2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;api1 demo2&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/api2/demo1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;api2 demo1&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/api2/demo2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;api2 demo2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动 shop-product 和 shop-gateway 两个服务，然后添加的几个路径</p><h1 id="📒链路追踪⏳"><a href="#📒链路追踪⏳" class="headerlink" title="📒链路追踪⏳"></a>📒链路追踪⏳</h1><h1 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h1><h1 id="ZipKin"><a href="#ZipKin" class="headerlink" title="ZipKin"></a>ZipKin</h1><h1 id="📒服务配置"><a href="#📒服务配置" class="headerlink" title="📒服务配置"></a>📒服务配置</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 配置文件相对分散。在一个微服务架构下，配置文件会随着微服务的增多变的越来越多，而且分散在各个微服务中，不好统一配置和管理<br><span class="hljs-bullet">2.</span> 配置文件无法区分环境。微服务项目可能会有多个环境，例如：测试环境、预发布环境、生产环境。每一个环境所使用的配置理论上都是不同的，一旦需要修改，就需要我们去各个微服务下手动维护，这比较困难<br><span class="hljs-bullet">3.</span> 配置文件无法实时更新。我们修改了配置文件之后，必须重新启动微服务才能使配置生效，这对一个正在运行的项目来说是非常不友好<br></code></pre></td></tr></table></figure><p>基于上面这些问题，我们就需要配置中心的加入来解决这些问题。 配置中心的思路是：</p><ul><li>首先把项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。</li><li>当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。</li><li>当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新</li></ul><p><strong>常见的服务配置中心</strong></p><ul><li>Apollo</li><li>Disconf</li><li>Spring Cloud Config</li><li>Nacos</li></ul><h2 id="快速使用-1"><a href="#快速使用-1" class="headerlink" title="快速使用"></a>快速使用</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><blockquote><p>在 shop-product 微服务中引入nacos 配置中心的依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h3><p><strong>添加配置</strong></p><p>进入 Nacos 控制台，找以配置管理中的配置列表，点击右边的“+”号，打开配置界面来新增一个配置</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208051010414.png" alt="image-20220805101022243"></p><p><strong>引入配置</strong></p><p>当在 Nacos 中配置好后，还需要把 Nacos 中的配置引入到 shop-product 微服中来。要实现这个功能，我们需要在 shop-product 微服中的 resources 目录下新建一个叫 bootstrap.yml 文件</p><blockquote><p>注意：不能使用原来的 application.yml 作为配置文件，而是新建一个 bootstrap.yml 作为配置文件</p><p>在 SpringBoot 中，默认定义了以下四种配置文件，并且加载顺序如下：<br>bootstrap.properties -&gt; bootstrap.yml -&gt; application.properties -&gt; application.yml</p></blockquote><p>然后在 bootstrap.yml 文件中添加如下内容来进行引入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">service-product</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 获取配置中心地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment"># 配置文件格式</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境标识</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：在 bootstrap.yml 文件中配置服务名称为 service-product，因此在 Nacos 配置的 DataID 处的名称格式为：service-product-dev.yml，也就是 <code>服务名称-环境标识.配置文件格式</code></p></blockquote><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208051011311.png" alt="image-20220805101124217"></p><p>SpringBoot 加载 bootstrap.yml 文件需要引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>注释本地的 application.yam 中的内容， 启动程序进行测试</p><p>如果依旧可以成功访问程序，说明我们nacos的配置中心功能已经实现</p><h2 id="配置动态刷新"><a href="#配置动态刷新" class="headerlink" title="配置动态刷新"></a>配置动态刷新</h2><p>1.修改Nacos配置</p><p>在 <code>nacos </code>中的 service-product-dev.yaml 配置项中添加下面配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">config:</span><br>    <span class="hljs-attr">appName:</span> <span class="hljs-string">product</span><br></code></pre></td></tr></table></figure><p>2.硬编码方式</p><p>在 shop-product 微服中新建一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-comment">//@RefreshScope // 之前版本中需要添加这个注解,新版本中不用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosConfigController</span> &#123;<br>    <span class="hljs-comment">// 用于启动 Nacos 中的配置</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ConfigurableApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/nacos-config&quot;)</span><br>    <span class="hljs-keyword">public</span> String  <span class="hljs-title function_">nacos</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getEnvironment().getProperty(<span class="hljs-string">&quot;config.appName&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写好的，重新启动 shop-product 微服，然后访问 http&#x2F;&#x2F;localhost:8081&#x2F;product&#x2F;nacos-config 可以发现能够获取到 Nacos 中的配置信息。再次修改 Nacos 中的 config.appName 的值为 product1，然后再刷新页面，可以发现能够动态更新</p><h2 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h2><h3 id="相同微服务不同环境配置共享"><a href="#相同微服务不同环境配置共享" class="headerlink" title="相同微服务不同环境配置共享"></a>相同微服务不同环境配置共享</h3><blockquote><p>如果想在同一个微服务的不同环境之间实现配置共享，其实很简单。只需要提取一个以 spring.application.name 命名的配置文件，然后将其所有环境的公共配置放在里面即可</p></blockquote><p>新建一个名为service-product.yaml配置存放商品微服务的公共配置</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208051023685.png" alt="image-20220805102355581"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202208051024865.png" alt="image-20220805102405774"></p><h3 id="不同微服务之间配置共享"><a href="#不同微服务之间配置共享" class="headerlink" title="不同微服务之间配置共享"></a>不同微服务之间配置共享</h3><p>不同为服务之间实现配置共享的原理类似于文件引入，就是定义一个公共配置，然后在当前配置中引入</p><p>1.在nacos中定义一个DataID为 share-config.yaml 的配置，用于所有微服务共享</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">service-product</span><br>    <span class="hljs-comment"># 配置数据库链接信息</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.33.135:3306/shop?useSSL=false&amp;characterEncoding=UTF8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-comment"># 配置 nacos</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><span class="hljs-string">:8848</span><br>      <br><span class="hljs-comment"># 配置 Mybatis-Plus</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment"># 控制台输出 SQL</span><br></code></pre></td></tr></table></figure><p>2.在nacos的中修改 service-product.yaml 中为下面内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">config:</span><br>    <span class="hljs-attr">appName:</span> <span class="hljs-string">product</span><br></code></pre></td></tr></table></figure><p>3.修改bootstrap.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">service-product</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 获取配置中心地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment"># 配置文件格式</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span><br>        <span class="hljs-attr">shared-dataids:</span> <span class="hljs-string">share-config.yaml</span> <span class="hljs-comment"># 配置要引入的配置</span><br>        <span class="hljs-attr">refreshable-dataids:</span> <span class="hljs-string">share-config.yaml</span> <span class="hljs-comment"># 配置要实现动态配置刷新的配置</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境标识</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>4.启动商品微服务进行测试</p><h1 id="📒分布式事务⏳"><a href="#📒分布式事务⏳" class="headerlink" title="📒分布式事务⏳"></a>📒分布式事务⏳</h1><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上</p><p>简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败</p><p>本质上来说，分布式事务就是为了保证不同数据库的数据一致性</p><h2 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h2><h3 id="全局事务"><a href="#全局事务" class="headerlink" title="全局事务"></a>全局事务</h3><h3 id="可靠消息服务"><a href="#可靠消息服务" class="headerlink" title="可靠消息服务"></a>可靠消息服务</h3><h3 id="最大努力通知"><a href="#最大努力通知" class="headerlink" title="最大努力通知"></a>最大努力通知</h3><h3 id="TCC事务"><a href="#TCC事务" class="headerlink" title="TCC事务"></a>TCC事务</h3><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1>]]></content>
    
    
    <categories>
      
      <category>Springcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2022/07/27/2022-7-27-ElasticSearch/"/>
    <url>/2022/07/27/2022-7-27-ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h1 id="概述⏳"><a href="#概述⏳" class="headerlink" title="概述⏳"></a>概述⏳</h1><p>倒排索引</p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h2><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>Elasticsearch 的官方地址：<a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><p>Elasticsearch 最新的版本是 8.3.2（截止 2022.7.25），我们选择 8.2.3 版本。之前版本下载地址</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207271626753.png" alt="image-20220727162609652"></p><h3 id="Windows单机"><a href="#Windows单机" class="headerlink" title="Windows单机"></a>Windows单机</h3><blockquote><p>因为我是在centos7上面配置的，所以就不对windows的安装进行描述</p></blockquote><p>📃</p><h3 id="Linux单机"><a href="#Linux单机" class="headerlink" title="Linux单机"></a>Linux单机</h3><blockquote><p>安装一定要仔细</p></blockquote><p><strong>1.安装软件</strong></p><p>将下载好的软件上传到服务器并执行如下命令解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf elasticsearch-8.2.3-linux-x86_64.tar.gz -C /usr/local<br><span class="hljs-built_in">cd</span> /usr/local<br><span class="hljs-built_in">mv</span> elasticsearch-8.2.3 es<br></code></pre></td></tr></table></figure><p><strong>2.创建用户</strong></p><p>因为安全问题，Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用 户中创建新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd es <span class="hljs-comment">#新增 es 用户</span><br>passwd es <span class="hljs-comment">#为 es 用户设置密码</span><br><br>userdel -r es <span class="hljs-comment">#如果错了，可以删除再加</span><br><br><br><span class="hljs-built_in">chown</span> -R es:es /usr/local/es <span class="hljs-comment">#文件夹所有者</span><br></code></pre></td></tr></table></figure><p><code>chown -R es:es /usr/local/es #文件夹所有者</code>这个命令很重要，后面报错有可能还需要用到</p><p><strong>3.修改配置</strong></p><p>修改 &#x2F;usr&#x2F;local&#x2F;es&#x2F;config&#x2F;elasticsearch.yml 文件，添加如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">elasticsearch</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>]<br></code></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;security&#x2F;limits.conf，在文件末尾中增加下面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每个进程可以打开的文件数的限制</span><br>es soft nofile 65536<br>es hard nofile 65536<br></code></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf，在文件末尾中增加下面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每个进程可以打开的文件数的限制</span><br>es soft nofile 65536<br>es hard nofile 65536<br><span class="hljs-comment"># 操作系统级别对每个用户创建的进程数的限制</span><br>* hard <span class="hljs-built_in">nproc</span> 4096<br><span class="hljs-comment"># 注：* 带表 Linux 所有用户名称</span><br></code></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;sysctl.conf，在文件中增加下面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536</span><br>vm.max_map_count=655360<br></code></pre></td></tr></table></figure><p>修改 &#x2F;usr&#x2F;local&#x2F;es&#x2F;config&#x2F;jvm.options 方法，指定内存占用大小，默认是 4G，我们修改为 512M：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">-Xms512m<br>-Xmx512m<br></code></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p<br></code></pre></td></tr></table></figure><p><strong>4.启动软件</strong></p><p>使用 ES 用户启动，由于 ES 不允许 root 用户直接使用，因此需要先切换到 es 用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su es<br></code></pre></td></tr></table></figure><p>然后再执行启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/es/<br><span class="hljs-comment"># 启动 bin/elasticsearch</span><br><br><span class="hljs-comment"># 加了-d后是后台启动</span><br>bin/elasticsearch<br>bin/elasticsearch -d<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207271634305.png" alt="image-20220727163415264"></p><p>打开浏览器，输入 <a href="https://192.168.33.137:9200/">https://192.168.33.137:9200</a> 后，输入上图中的用户名和密码，即可查看到如下信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node-1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cluster_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elasticsearch&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cluster_uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;KC4qlPfhT6KBU0k1CWBuQQ&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;number&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.2.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_flavor&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tar&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_hash&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9905bfb62a3f0b044948376b4f607f70a8a151b4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_date&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-06-08T22:21:36.455508792Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_snapshot&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lucene_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9.1.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.17.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tagline&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;You Know, for Search&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：是HTTPS不是HTTP</p><p>因为这个是有安全的链接，如果取消密码，那么就要用<code>http</code></p></blockquote><p>如果不想使用用户名密码和SSL，修改 conf&#x2F;elasticsearch.yml 文件，配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Enable security features</span><br><span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 其实好像就改这一个为false也可以</span><br><span class="hljs-attr">xpack.security.enrollment.enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash,and Agents</span><br><span class="hljs-attr">xpack.security.http.ssl:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">keystore.path:</span> <span class="hljs-string">certs/http.p12</span><br>    <br><span class="hljs-comment"># Enable encryption and mutual authentication between cluster nodes</span><br><span class="hljs-attr">xpack.security.transport.ssl:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">verification_mode:</span> <span class="hljs-string">certificate</span><br>    <span class="hljs-attr">keystore.path:</span> <span class="hljs-string">certs/transport.p12</span><br>    <span class="hljs-attr">truststore.path:</span> <span class="hljs-string">certs/transport.p12</span><br></code></pre></td></tr></table></figure><p>原来都是true，这里都改成了false，前面是要求用户登录的，后面是要求SSL的，没必要，干掉。再次执行 bin&#x2F;elasticsearch 命令来启动后，就可以通过 <a href="http://192.168.72.90:9200/">http://192.168.72.90:9200</a> 来直接访问了</p><h3 id="Linux集群"><a href="#Linux集群" class="headerlink" title="Linux集群"></a>Linux集群</h3><p>待写</p><p>📃</p><h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><p>Kibana 是一个免费且开放的用户界面，能够让你对 Elasticsearch 数据进行可视化，并 让你在Elastic Stack 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如 何流经你的整个应用，都能轻松完成</p><p>下载地址为：<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-8-2-3">https://www.elastic.co/cn/downloads/past-releases/kibana-8-2-3</a></p><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压安装</span><br>tar -zxvf kibana-8.2.3-linux-x86_64.tar.gz -C /usr/local<br><span class="hljs-comment"># 切换目录</span><br><span class="hljs-built_in">cd</span> /usr/local<br><span class="hljs-comment"># 重新命名</span><br><span class="hljs-built_in">mv</span> kibana-8.2.3 kibana<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> kibana<br></code></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>修改 <code>config/kibana.yml</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认端口</span><br>server.port: 5601<br><span class="hljs-comment"># 主机地址</span><br>server.host: <span class="hljs-string">&quot;192.168.33.137&quot;</span><br><span class="hljs-comment"># ES 服务器的地址</span><br><span class="hljs-comment"># 如果关闭了那个验证服务就是http,否则就是https</span><br>elasticsearch.hosts: [<span class="hljs-string">&quot;http://192.168.33.137:9200&quot;</span>] <br><span class="hljs-comment"># 支持中文</span><br>i18n.locale: <span class="hljs-string">&quot;zh-CN&quot;</span><br>xpack.reporting.roles.enabled: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sh 在 linux 中是运行shell脚本的意思</span><br>sh bin/kibana<br></code></pre></td></tr></table></figure><p>注意：Kibana 也不能使用 root 用户来启动，它的目录权限也需要赋给普通用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换root用户</span><br>su root<br><span class="hljs-comment"># 修改权限</span><br><span class="hljs-built_in">chown</span> -R es:es kibana<br><span class="hljs-comment"># 切换普通用户</span><br>su es<br></code></pre></td></tr></table></figure><h3 id="验证服务"><a href="#验证服务" class="headerlink" title="验证服务"></a>验证服务</h3><p>启动成功后，在浏览器地址栏中输入：<a href="http://192.168.33.137:5601/">http://192.168.33.137:5601</a> 进行访问操作</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207291707698.png" alt="image-20220729170713495"></p><h1 id="进阶⏳"><a href="#进阶⏳" class="headerlink" title="进阶⏳"></a>进阶⏳</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h2 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h2><h2 id="分片控制"><a href="#分片控制" class="headerlink" title="分片控制"></a>分片控制</h2><h2 id="分片原理"><a href="#分片原理" class="headerlink" title="分片原理"></a>分片原理</h2><h2 id="文档分析"><a href="#文档分析" class="headerlink" title="文档分析"></a>文档分析</h2><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><h2 id="操作ES"><a href="#操作ES" class="headerlink" title="操作ES"></a>操作ES</h2><h3 id="映射属性"><a href="#映射属性" class="headerlink" title="映射属性"></a>映射属性</h3><p>这里使用到了 mapping 属性。mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><p><strong>创建</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">PUT /索引库名称<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;字段名&quot;</span> :&#123;<br>        <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;字段名2&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-string">&quot;字段名3&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;子字段&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-comment">// ...略</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="1-新增文档"><a href="#1-新增文档" class="headerlink" title="1.新增文档"></a>1.<strong>新增文档</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /索引库名/_doc/文档id<br>&#123;<br>    <span class="hljs-string">&quot;字段1&quot;</span>: <span class="hljs-string">&quot;值1&quot;</span>,<br>    <span class="hljs-string">&quot;字段2&quot;</span>: <span class="hljs-string">&quot;值2&quot;</span>,<br>    <span class="hljs-string">&quot;字段3&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;子属性1&quot;</span>: <span class="hljs-string">&quot;值3&quot;</span>,<br>        <span class="hljs-string">&quot;子属性2&quot;</span>: <span class="hljs-string">&quot;值4&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-删除文档"><a href="#2-删除文档" class="headerlink" title="2.删除文档"></a><strong>2.删除文档</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">DELETE /&#123;索引库名&#125;/_doc/id值<br></code></pre></td></tr></table></figure><h4 id="3-查询文档"><a href="#3-查询文档" class="headerlink" title="3.查询文档"></a>3.<strong>查询文档</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /&#123;索引库名称&#125;/_doc/&#123;id&#125;<br></code></pre></td></tr></table></figure><h4 id="4-修改文档"><a href="#4-修改文档" class="headerlink" title="4.修改文档"></a>4.<strong>修改文档</strong></h4><p>修改文档有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ul><p><strong>全量修改</strong></p><p>全量修改是覆盖原来的文档其本质是：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><blockquote><p>注意：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">PUT /&#123;索引库名&#125;/_doc/文档id<br>&#123;<br>    <span class="hljs-string">&quot;字段1&quot;</span>: <span class="hljs-string">&quot;值1&quot;</span>,<br>    <span class="hljs-string">&quot;字段2&quot;</span>: <span class="hljs-string">&quot;值2&quot;</span>,<br>    <span class="hljs-comment">// ... 略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高级查询⏳"><a href="#高级查询⏳" class="headerlink" title="高级查询⏳"></a>高级查询⏳</h3><p><strong>查询所有</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /es-mq/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个查询只能查出来10条</p></blockquote><h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><p>在springboot中使用elasticsearch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticsearchUtil</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchClient elasticsearchClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     *         索引名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回 True 表示创建成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">createIndex</span><span class="hljs-params">(String indexName)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ElasticsearchIndicesClient</span> <span class="hljs-variable">indices</span> <span class="hljs-operator">=</span> elasticsearchClient.indices();<br><br>            <span class="hljs-type">ExistsRequest</span> <span class="hljs-variable">existsRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExistsRequest</span>.Builder()<br>                    .index(indexName)<br>                    .build();<br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> indices.exists(existsRequest).value();<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;你要创建的索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 已经存在,不能重复创建&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>.Builder()<br>                    .index(indexName)<br>                    .build();<br>            <span class="hljs-type">CreateIndexResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> indices.create(request);<br>            <span class="hljs-keyword">return</span> response.acknowledged();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;创建索引出错,错误信息为:&quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询索引</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     *         索引名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回索引信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> IndexState <span class="hljs-title function_">getIndex</span><span class="hljs-params">(String indexName)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ElasticsearchIndicesClient</span> <span class="hljs-variable">indices</span> <span class="hljs-operator">=</span> elasticsearchClient.indices();<br>            <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>.Builder()<br>                    .index(indexName)<br>                    .build();<br>            <span class="hljs-type">GetIndexResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> indices.get(request);<br>            <span class="hljs-keyword">return</span> response.get(indexName);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;查询索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除索引</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteIndex</span><span class="hljs-params">(String indexName)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ElasticsearchIndicesClient</span> <span class="hljs-variable">indices</span> <span class="hljs-operator">=</span> elasticsearchClient.indices();<br>            <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>.Builder()<br>                    .index(indexName)<br>                    .build();<br>            <span class="hljs-type">DeleteIndexResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> indices.delete(request);<br>            <span class="hljs-keyword">return</span> response.acknowledged();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;删除索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加文档</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     *         索引名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     *         添加文档数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createDocument</span><span class="hljs-params">(String indexName, User user)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建 CreateRequest 对象 通过这个方法创建对象</span><br>            CreateRequest&lt;User&gt; request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateRequest</span>.Builder&lt;User&gt;()<br>                    .id(user.getId().toString()) <span class="hljs-comment">// 文档标识 需要文艺</span><br>                    .index(indexName)<br>                    .document(user)<br>                    .build();<br>            <span class="hljs-type">CreateResponse</span> <span class="hljs-variable">respose</span> <span class="hljs-operator">=</span> elasticsearchClient.create(request);<br>            <span class="hljs-keyword">return</span> respose.result().jsonValue();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;添加文档,索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量添加文档</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> users</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bulkCreatDocument</span><span class="hljs-params">(String indexName, List&lt;User&gt; users)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ArrayList&lt;BulkOperation&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (User user : users) &#123;<br>                CreateOperation&lt;User&gt; opt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateOperation</span>.Builder&lt;User&gt;()<br>                        .id(user.getId().toString())<br>                        .index(indexName)<br>                        .document(user)<br>                        .build();<br><br>                <span class="hljs-type">BulkOperation</span> <span class="hljs-variable">operation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkOperation</span>.Builder()<br>                        .create(opt)<br>                        .build();<br>                list.add(operation);<br>            &#125;<br><br>            <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>.Builder()<br>                    .operations(list)<br>                    .build();<br>            <span class="hljs-type">BulkResponse</span> <span class="hljs-variable">bulk</span> <span class="hljs-operator">=</span> elasticsearchClient.bulk(request);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;批量添加文档 ,索引&quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部文档</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T&gt;&gt; <span class="hljs-title function_">searchDocument</span><span class="hljs-params">(String indexName, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 这个地方我进行 matchAll 查询 默认 10 条 所以要进行 _search &#123; &quot;size&quot; : 20 &#125;查询</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">MatchAllQuery</span> <span class="hljs-variable">matchAllQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatchAllQuery</span>.Builder().build();<br>            <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>.Builder()<br>                    .matchAll(matchAllQuery)<br>                    .build();<br><br>            <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>.Builder()<br>                    .index(indexName)<br>                    .query(query)<br>                    .build();<br>            SearchResponse&lt;T&gt; response = elasticsearchClient.search(request, clazz);<br>            <span class="hljs-comment">// 真正的数据数量</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> response.hits().total().value();<br>            <span class="hljs-comment">// 再次进行查询 通过数据大小</span><br>            request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>.Builder()<br>                    .index(indexName)<br>                    .size((<span class="hljs-type">int</span>) size)<br>                    .build();<br>            response = elasticsearchClient.search(request, clazz);<br>            <span class="hljs-keyword">return</span> response.hits().hits();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;查询全部文档,索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询指定文档</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldValue</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;Hit&lt;T&gt;&gt; <span class="hljs-title function_">queryByIdDocument</span><span class="hljs-params">(String indexName, Class&lt;T&gt; clazz, String fieldName, Object fieldValue)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">MatchQuery</span> <span class="hljs-variable">matchQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatchQuery</span>.Builder()<br>                    .field(fieldName)<br>                    .query(fieldValue.toString())<br>                    .build();<br>            <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>.Builder().match(matchQuery).build();<br><br>            <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>.Builder()<br>                    .index(indexName)<br>                    .query(query)<br>                    .build();<br>            SearchResponse&lt;T&gt; response = elasticsearchClient.search(request, clazz);<br>            <span class="hljs-keyword">return</span> response.hits().hits();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;查询单个文档,索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br><br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定文档</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> indexName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> documentID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteDocument</span><span class="hljs-params">(String indexName, String documentID)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>.Builder()<br>                    .index(indexName)<br>                    .id(documentID)<br>                    .build();<br>            <span class="hljs-type">DeleteResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> elasticsearchClient.delete(request);<br>            <span class="hljs-keyword">return</span> response.result().jsonValue();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;删除指定文档,索引 &quot;</span> + indexName + <span class="hljs-string">&quot; 出错,出错信息为 &quot;</span> + e.getMessage());<br><br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面试题⏳"><a href="#面试题⏳" class="headerlink" title="面试题⏳"></a>面试题⏳</h1>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
      <tag>kibana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7月报错小结</title>
    <link href="/2022/07/23/2022-7-23-7%E6%9C%88%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/23/2022-7-23-7%E6%9C%88%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="⏳软件问题解决"><a href="#⏳软件问题解决" class="headerlink" title="⏳软件问题解决"></a>⏳软件问题解决</h1><blockquote><p>如果是要在浏览器上进行操作和验证，那么可以换个浏览器或者清空缓存，涉及密码注意<code>http</code>和<code>https</code></p></blockquote><ol><li>百度&#x2F;CSDN(<code>10min</code>)</li><li>Google(<code>10min</code>)</li><li>重启电脑重复上面步骤</li><li>重装软件</li><li>重启电脑重装软件</li></ol><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux下字符问题报错"><a href="#Linux下字符问题报错" class="headerlink" title="Linux下字符问题报错"></a>Linux下字符问题报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-bash: ./shutdown.sh^M: No such file or directory<br></code></pre></td></tr></table></figure><p>解决办法</p><ol><li>下载<code>dos2unix</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install dos2unix <span class="hljs-comment"># 下载 dos2unix</span><br>dos2unix startup.sh <span class="hljs-comment"># 使用它进行格式化</span><br>====================================<br>[root@localhost bin]<span class="hljs-comment"># dos2unix shutdown.sh</span><br>dos2unix: converting file shutdown.sh to Unix format ...<br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://blog.csdn.net/jimbooks/article/details/98037922">https://blog.csdn.net/jimbooks/article/details/98037922</a></li></ol><h2 id="CentOS-7-could-not-retrieve-mirrorlist"><a href="#CentOS-7-could-not-retrieve-mirrorlist" class="headerlink" title="CentOS 7 could not retrieve mirrorlist"></a>CentOS 7 could not retrieve mirrorlist</h2><p><a href="https://blog.csdn.net/shareye1992/article/details/88390994">https://blog.csdn.net/shareye1992/article/details/88390994</a></p><h2 id="vim方向键和删除键出错"><a href="#vim方向键和删除键出错" class="headerlink" title="vim方向键和删除键出错"></a>vim方向键和删除键出错</h2><p>按删除不起作用，方向键是字母</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/vimrc.tiny<br><span class="hljs-comment"># 添加内容 </span><br><span class="hljs-built_in">set</span> nocompatible  <span class="hljs-comment"># 解决方向键</span><br><span class="hljs-built_in">set</span> backspace=2  <span class="hljs-comment"># 解决空格键</span><br></code></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Linux中卸载Redis"><a href="#Linux中卸载Redis" class="headerlink" title="Linux中卸载Redis"></a>Linux中卸载Redis</h2><p><a href="http://www.muzhuangnet.com/show/71316.html">http://www.muzhuangnet.com/show/71316.html</a></p><h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="win系统下cmd方式运行报错"><a href="#win系统下cmd方式运行报错" class="headerlink" title="win系统下cmd方式运行报错"></a><strong>win系统下cmd方式运行报错</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">log4j:WARN No appenders could be found <span class="hljs-keyword">for</span> logger (org.apache.dubbo.common.logger.LoggerFactory).<br>log4j:WARN Please initialize the log4j system properly.<br>log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html<span class="hljs-comment">#noconfig for more info.</span><br>2022-07-25 09:51:09.172  INFO 12256 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br>2022-07-25 09:51:09.263  INFO 12256 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed <span class="hljs-keyword">in</span> 1742 ms<br>2022-07-25 09:51:09.372  WARN 12256 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="hljs-string">&#x27;routeServiceImpl&#x27;</span>: Unsatisfied dependency expressed through field <span class="hljs-string">&#x27;registry&#x27;</span>; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="hljs-string">&#x27;governanceConfiguration&#x27;</span> defined <span class="hljs-keyword">in</span> class path resource [org/apache/dubbo/admin/config/ConfigCenter.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.dubbo.admin.registry.config.GovernanceConfiguration]: Factory method <span class="hljs-string">&#x27;getDynamicConfiguration&#x27;</span> threw exception; nested exception is org.apache.dubbo.admin.common.exception.ConfigurationException: Either config center or registry address is needed, please refer to https://github.com/apache/incubator-dubbo-admin/wiki/Dubbo-Admin-configuration<br>2022-07-25 09:51:09.388  INFO 12256 --- [           main] ConditionEvaluationReportLoggingListener :<br><br>Error starting ApplicationContext. To display the conditions report re-run your application with <span class="hljs-string">&#x27;debug&#x27;</span> enabled.<br>2022-07-25 09:51:09.406 ERROR 12256 --- [           main] o.s.boot.SpringApplication               : Application run failed<br><br>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="hljs-string">&#x27;routeServiceImpl&#x27;</span>: Unsatisfied dependency expressed through field <span class="hljs-string">&#x27;registry&#x27;</span>; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="hljs-string">&#x27;governanceConfiguration&#x27;</span> defined <span class="hljs-keyword">in</span> class path resource [org/apache/dubbo/admin/config/ConfigCenter.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.dubbo.admin.registry.config.GovernanceConfiguration]: Factory method <span class="hljs-string">&#x27;getDynamicConfiguration&#x27;</span> threw exception; nested exception is org.apache.dubbo.admin.common.exception.ConfigurationException: Either config center or registry address is needed, please refer to https://github.com/apache/incubator-dubbo-admin/wiki/Dubbo-Admin-configuration<br><br><br>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="hljs-string">&#x27;governanceConfiguration&#x27;</span> defined <span class="hljs-keyword">in</span> class path resource [org/apache/dubbo/admin/config/ConfigCenter.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.dubbo.admin.registry.config.GovernanceConfiguration]: Factory method <span class="hljs-string">&#x27;getDynamicConfiguration&#x27;</span> threw exception; nested exception is org.apache.dubbo.admin.common.exception.ConfigurationException: Either config center or registry address is needed, please refer to https://github.com/apache/incubator-dubbo-admin/wiki/Dubbo-Admin-configuration<br>        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)<br>        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:485)<br>        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsin<br></code></pre></td></tr></table></figure><p>😊解决方法</p><p>去官网重新下一个，我感觉是本地的包出了问题</p><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="事务消息中的事务监听器不起作用"><a href="#事务消息中的事务监听器不起作用" class="headerlink" title="事务消息中的事务监听器不起作用"></a>事务消息中的事务监听器不起作用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">producer.setTransactionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionListener</span>() &#123;<br>    <span class="hljs-comment">// 在该方法中执行本地事务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">executeLocalTransaction</span><span class="hljs-params">(Message msg, Object arg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hhhhhh&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.equals(<span class="hljs-string">&quot;TagA&quot;</span>, msg.getTags())) &#123;<br>            <span class="hljs-comment">// 提交</span><br>            System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>            <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(<span class="hljs-string">&quot;TagB&quot;</span>, msg.getTags())) &#123;<br>            <span class="hljs-comment">// 回滚</span><br>            System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>            <span class="hljs-keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(<span class="hljs-string">&quot;TagC&quot;</span>, msg.getTags()))&#123;<br>            System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>            <span class="hljs-comment">// 未知</span><br>            <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>        &#125;<br>        <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>    &#125;<br>    <span class="hljs-comment">// 在该方法中执行 MQ 事务状态回查</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">checkLocalTransaction</span><span class="hljs-params">(MessageExt msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;回查消息的Tag为:&quot;</span> + msg.getTags());<br>        <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>设置完事务监听后，实际上并没有执行事务</p><p>解决：</p><p>debug的时候好了，后面又重写运行并且等了一会，也会出来消息</p><p><a href="https://blog.csdn.net/qq_34709656/article/details/116701490">https://blog.csdn.net/qq_34709656/article/details/116701490</a></p>]]></content>
    
    
    <categories>
      
      <category>error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自动配置</title>
    <link href="/2022/07/22/2022-7-19-SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/22/2022-7-19-SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="话题引入"><a href="#话题引入" class="headerlink" title="话题引入"></a>话题引入</h1><p>1.什么是springboot自动装配？</p><p>2.springboot是如何实现自动装配的？如何实现按需加载？</p><h1 id="1-什么是springboot自动装配？"><a href="#1-什么是springboot自动装配？" class="headerlink" title="1.什么是springboot自动装配？"></a>1.什么是springboot自动装配？</h1><p>自动装配是springboot的核心，一般提到自动装配就会和springboot联系在一起。实际上 SpringFramework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化。</p><p>SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的 META-INF&#x2F;spring.factories 文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。</p><p>没有 Spring Boot 的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，Spring Boot 中，我们直接引入一个 starter 即可。比如你想要在项目中使用 redis 的话，直接在项目中引入对应的 starter 即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入 starter 之后，我们通过少量注解和一些简单的配置就能使用第三方组件提供的功能了。</p><p>所以说，其实自动装配可以简单的理解为：<strong>通过注解或者一些简单的配置就能在 spring boot 的帮助下实现某款功能</strong></p><h1 id="2-springboot是如何实现自动装配的？如何实现按需加载？"><a href="#2-springboot是如何实现自动装配的？如何实现按需加载？" class="headerlink" title="2.springboot是如何实现自动装配的？如何实现按需加载？"></a>2.springboot是如何实现自动装配的？如何实现按需加载？</h1><p>首先我们先来看一些springboot的核心注解@SpringBootApplication的类：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221621550.png" alt="image-20220722162147498"></p><p>点击@SpringBootConfiguration注解，发现这个注解其实就是一个配置注解，SpringBoot 把 @Configuration 注解做一个包装</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221624063.png" alt="image-20220722162423023"></p><p>所以说 @SpringBootApplication 是一个复合注解，大概就可以把 @SpringBootApplication 看作是 @Configuration 、 @EnableAutoConfiguration @ComponentScan 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：</p><ul><li><p>@EnableAutoConfiguration ：启用 SpringBoot 的自动配置机制。</p></li><li><p>@Configuration ：允许在上下文中注册额外的 bean 或导入其他配置类，作用与applicationContext.xml 的功能相同。</p></li><li><p>@ComponentScan ： 扫描包下的类中添加了 @Component ( @Service ， @Controller ，@Repostory ， @RestController )注解的类 ，并添加的到spring的容器中，可以自定义不扫描某些 bean。如下图所示，容器中将排除 TypeExcludeFilter 和 AutoConfigurationExcludeFilter </p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221626994.png" alt="image-20220722162615951"></p></li></ul><h2 id="EnableAutoConfiguration-实现自动装配的核心注解"><a href="#EnableAutoConfiguration-实现自动装配的核心注解" class="headerlink" title="@EnableAutoConfiguration:实现自动装配的核心注解"></a>@EnableAutoConfiguration:实现自动装配的核心注解</h2><p>@EnableAutoConfiguration 只是一个简单地注解，自动装配核心功能的实现实际是通过 AutoConfigurationImportSelector 类</p><p>点进 @EnableAutoConfiguration 注解</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221628414.png" alt="image-20220722162801367"></p><p>我们现在重点分析下 AutoConfigurationImportSelector 类到底做了什么</p><h2 id="AutoConfigurationImportSelector-加载自动装配类"><a href="#AutoConfigurationImportSelector-加载自动装配类" class="headerlink" title="AutoConfigurationImportSelector:加载自动装配类"></a>AutoConfigurationImportSelector:加载自动装配类</h2><p>AutoConfigurationImportSelector 类的继承体系如下：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221629498.png" alt="image-20220722162947462"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221642678.png" alt="image-20220722164229628"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221643844.png" alt="image-20220722164329796"></p><p>可以看出， AutoConfigurationImportSelector 类实现了 ImportSelector 接口，也就实现了这个接口中的 selectImports 方法，该方法主要用于获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221644881.png" alt="image-20220722164439840"></p><p>这里我们需要重点关注一下 getAutoConfigurationEntry() 方法，这个方法主要负责加载自动配置类的</p><p>该方法调用链</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221645432.png" alt="image-20220722164514381"></p><p>现在我们结合 getAutoConfigurationEntry() 的源码来详细分析一下</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221645064.png" alt="image-20220722164534009"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata</span><br><span class="hljs-params">                                                                       annotationMetadata)</span> &#123;<br>        <span class="hljs-comment">//第1步：判断自动装配开关是否打开</span><br>        <span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br>            <span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>        &#125;<br>        <span class="hljs-comment">//第2步：用于获取注解中的exclude和excludeName。</span><br>        <span class="hljs-comment">//获取注解属性</span><br>        <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> getAttributes(annotationMetadata);<br>        <span class="hljs-comment">//第3步：获取需要自动装配的所有配置类，读取META-INF/spring.factories</span><br>        <span class="hljs-comment">//读取所有预配置类</span><br>        List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,<br>                attributes);<br>        <span class="hljs-comment">//第4步：符合条件加载</span><br>        <span class="hljs-comment">//去掉重复的配置类</span><br>        configurations = removeDuplicates(configurations);<br>        <span class="hljs-comment">//执行</span><br>        Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);<br>        <span class="hljs-comment">//校验</span><br>        checkExcludedClasses(configurations, exclusions);<br>        <span class="hljs-comment">//删除</span><br>        configurations.removeAll(exclusions);<br>        <span class="hljs-comment">//过滤</span><br>        configurations = getConfigurationClassFilter().filter(configurations);<br>        fireAutoConfigurationImportEvents(configurations, exclusions);<br>        <span class="hljs-comment">//创建自动配置的对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationEntry</span>(configurations, exclusions);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="第-1-步"><a href="#第-1-步" class="headerlink" title="第 1 步:"></a><strong>第 1 步:</strong></h3><p>判断自动装配开关是否打开。默认 spring.boot.enableautoconfiguration&#x3D;true ，可在 application.properties 或 application.yml 中设置</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221658641.png" alt="image-20220722165800607"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221657993.png" alt="image-20220722165700957"></p><h3 id="第-2-步"><a href="#第-2-步" class="headerlink" title="第 2 步:"></a><strong>第 2 步:</strong></h3><p>用于获取 EnableAutoConfiguration 注解中的 exclude 和 excludeName</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221658837.png" alt="image-20220722165834704"></p><h3 id="第-3-步"><a href="#第-3-步" class="headerlink" title="第 3 步:"></a><strong>第 3 步:</strong></h3><p>获取需要自动装配的所有配置类，读取 META-INF&#x2F;spring.factories<br>先进入 getCandidateConfigurations() 方法中</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221700292.png" alt="image-20220722170031163"></p><p>进入 loadFactoryNames() 方法中</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221701217.png" alt="image-20220722170137168"></p><p>再进入 loadSpringFactories() 方法中</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221702532.png" alt="image-20220722170245469"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221702055.png" alt="image-20220722170259026"></p><p>从下图可以看到这个文件的配置内容都被我们读取到了</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221707122.png" alt="image-20220722170704049"></p><p>不光是这个依赖下的 META-INF&#x2F;spring.factories 被读取到，所有 Spring Boot Starter 下的 META-INF&#x2F;spring.factories 都会被读取到</p><h3 id="第-4-步"><a href="#第-4-步" class="headerlink" title="第 4 步:"></a><strong>第 4 步:</strong></h3><p>到这里可能面试官会问你:“ spring.factories 中这么多配置，每次启动都要全部加载么？”。</p><p>很明显，这是不现实的。我们 debug 到后面你会发现， configurations 的值变小了。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221709982.png" alt="image-20220722170945825"></p><p>因为，这一步有经历了一遍筛选过滤， @ConditionalOnXXX 中的所有条件都满足，该类才会生效。</p><p>Spring Boot 提供的条件注解如下：</p><ul><li>@ConditionalOnBean ：当容器里有指定 Bean 的条件下</li><li>@ConditionalOnMissingBean ：当容器里没有指定 Bean 的情况下</li><li>@ConditionalOnSingleCandidate ：当指定 Bean 在容器中只有一个，或者虽然有多个但是指定首选 Bean</li><li>@ConditionalOnClass ：当类路径下有指定类的条件下</li><li>@ConditionalOnMissingClass ：当类路径下没有指定类的条件下</li><li>@ConditionalOnProperty ：指定的属性是否有指定的值</li><li>@ConditionalOnResource ：类路径是否有指定的值</li><li>@ConditionalOnExpression ：基于 SpEL 表达式作为判断条件</li><li>@ConditionalOnJava ：基于 Java 版本作为判断条件</li><li>@ConditionalOnJndi ：在 JNDI 存在的条件下差在指定的位置</li><li>@ConditionalOnNotWebApplication ：当前项目不是 Web 项目的条件下</li><li>@ConditionalOnWebApplication ：当前项目是 Web 项 目的条件下</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring Boot 通过 @EnableAutoConfiguration 开启自动装配，通过 SpringFactoriesLoader 最终加载 META-INF&#x2F;spring.factories 中的自动配置类实现自动装配，自动配置类其实就是通过 @Conditional 按需加载的配置类，想要其生效必须引入 spring-boot-starter-xxx 包实现起步依赖。</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的基本使用</title>
    <link href="/2022/07/21/2022-7-21-Redis%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/21/2022-7-21-Redis%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis安装"><a href="#1-Redis安装" class="headerlink" title="1. Redis安装"></a>1. Redis安装</h1><h2 id="📒Docker安装"><a href="#📒Docker安装" class="headerlink" title="📒Docker安装"></a>📒Docker安装</h2><blockquote><p>使用 Docker 进行安装</p></blockquote><h3 id="查看可用-Redis-版本"><a href="#查看可用-Redis-版本" class="headerlink" title="查看可用 Redis 版本"></a>查看可用 Redis 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search redis<br></code></pre></td></tr></table></figure><h3 id="拉取官镜像"><a href="#拉取官镜像" class="headerlink" title="拉取官镜像"></a>拉取官镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br><br><span class="hljs-comment"># 可以指定版本号:不加版本号默认获取最新版本</span><br>docker pull redis:6.2.7<br></code></pre></td></tr></table></figure><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="准备-redis-的配置文件"><a href="#准备-redis-的配置文件" class="headerlink" title="准备 redis 的配置文件"></a>准备 redis 的配置文件</h3><p>redis中文官方网站:<a href="http://www.redis.cn/download.html">http://www.redis.cn/download.html</a></p><p>下载下来后解压，找到 <code>redis.conf</code> 文件</p><h3 id="配置-redis-conf-配置文件"><a href="#配置-redis-conf-配置文件" class="headerlink" title="配置 redis.conf 配置文件"></a>配置 redis.conf 配置文件</h3><p>只需要改下面这些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1 <span class="hljs-comment"># 注释掉这部分，使redis可以外部访问</span><br>protected-mode no   <span class="hljs-comment"># 修改保护模式为no</span><br>daemonize no<span class="hljs-comment"># 用守护线程的方式启动</span><br>requirepass <span class="hljs-comment"># 给redis设置密码，默认没有密码</span><br>appendonly <span class="hljs-built_in">yes</span><span class="hljs-comment"># redis持久化　　默认是no</span><br>tcp-keepalive 300 <span class="hljs-comment"># 防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300</span><br></code></pre></td></tr></table></figure><h3 id="创建本地存放redis的位置"><a href="#创建本地存放redis的位置" class="headerlink" title="创建本地存放redis的位置"></a>创建本地存放redis的位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建目录</span><br><span class="hljs-built_in">mkdir</span> /usr/local/redis<br><span class="hljs-built_in">mkdir</span> /usr/local/redis/conf<br></code></pre></td></tr></table></figure><p>然后把前面修改的 redis.conf 配置文件拷贝到刚才创建好的 <code>/redis/conf</code> 文件夹下，可以使用 ftp 拷贝过去，或者直接复制内容，然后粘贴过去</p><h3 id="启动-Docker-容器"><a href="#启动-Docker-容器" class="headerlink" title="启动 Docker 容器"></a>启动 Docker 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>-p 6379:6379 \<br>--name redis-test \<br>-v /usr/local/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-v /usr/local/redis/data:/data \<br>-d redis:6.2.7 redis-server /etc/redis/redis.conf \<br>--appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">参数解释:<br>-p 6379:6379: <span class="hljs-comment"># 把容器内的6379端口映射到宿主机6379端口</span><br>–name redis : <span class="hljs-comment"># 指定该容器名称，查看和进行操作都比较方便</span><br>-v /usr/local/redis/conf/redis.conf:/etc/redis/redis.conf: <span class="hljs-comment"># 把宿主机配置好的redis.conf放到容器内的这个位置中</span><br>-v /usr/local/redis/data:/data:  <span class="hljs-comment"># 把redis持久化的数据在宿主机内显示，做数据备份</span><br>redis-server /etc/redis/redis.conf:  <span class="hljs-comment"># 这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的配置启动</span><br>–appendonly <span class="hljs-built_in">yes</span>: <span class="hljs-comment"># redis启动后数据持久化</span><br></code></pre></td></tr></table></figure><h3 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="设置Redis容器自动启动"><a href="#设置Redis容器自动启动" class="headerlink" title="设置Redis容器自动启动"></a>设置Redis容器自动启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update redis --restart=always<br></code></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-test /bin/bash<br></code></pre></td></tr></table></figure><hr><h2 id="📒压缩包安装"><a href="#📒压缩包安装" class="headerlink" title="📒压缩包安装"></a>📒压缩包安装</h2><p>从Redis官网进行下载。<a href="https://redis.io/">https://redis.io/</a></p><p>下面以 redis-6.2.7.tar.gz 版为例，来说明redis的安装与配置</p><h3 id="准备依赖环境"><a href="#准备依赖环境" class="headerlink" title="准备依赖环境"></a>准备依赖环境</h3><p>由于 Redis 是基于 C 语言编写的，因此首先需要安装 Redis 所需要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y gcc tcl gcc-c++ make<br></code></pre></td></tr></table></figure><h3 id="上传安装文件"><a href="#上传安装文件" class="headerlink" title="上传安装文件"></a>上传安装文件</h3><p>将下载好的 redis-6.2.7.tar.gz 安装包上传到虚拟机的任意目录（一般推荐上传到 &#x2F;usr&#x2F;local&#x2F;src目录）</p><h3 id="解压安装文件"><a href="#解压安装文件" class="headerlink" title="解压安装文件"></a>解压安装文件</h3><p>上传后执行如下命令来进行解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf redis-6.2.7.tar.gz<br></code></pre></td></tr></table></figure><h3 id="进入安装目录"><a href="#进入安装目录" class="headerlink" title="进入安装目录"></a>进入安装目录</h3><p>解压完成后，执行如下命令进入解压目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> redis-6.2.7<br></code></pre></td></tr></table></figure><h3 id="运行编译命令"><a href="#运行编译命令" class="headerlink" title="运行编译命令"></a>运行编译命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><blockquote><p>说明：如果在编译过程中出现 <code>Jemalloc/jemalloc.h：没有那个文件</code> 没有的错误，在确保 gcc 安装成功后，可执行 <code>make distclean</code> 进行清除后再次安装。</p></blockquote><p>如果没有出错，就会安装成功。默认的安装路径是在 <code>/usr/local/bin</code> 目录下。可以将这个目录配置到环境变量中，这样就可以在任意目录下运行这些命令了。主要的几个命令说明如下：</p><ul><li>redis-server：它是 redis 的服务端启动脚本</li><li>redis-cli：它是 redis 提供的客户端启动脚本</li><li>redis-sentinel：它是 redis 提供的哨兵启动脚本</li><li>redis-benchmark：性能测试工具，可以在自己电脑上运行来查看性能</li><li>redis-check-aof：修复有问题的AOF文件</li><li>redis-check-dump：修复有问题的dump.rdb文件</li></ul><h3 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h3><p>执行如下命令来启动 redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231108752.png" alt="image-20220723110800660"></p><p>注意：这里直接执行 <code>redis-server</code> 启动的 Redis 服务，是在前台直接运行的(效果如上图)，也就是说，执行完该命令后，如果关闭当前会话，则Redis服务也随即关闭，因此这种方式不推荐使用。正常情况下，启动 Redis 服务需要从后台启动</p><blockquote><p><strong>查看Redis服务：</strong></p><ol><li>ps -ef | grep redis</li></ol><p><strong>关闭Redis服务：</strong></p><ol><li>pkill redis-server</li><li>kill 进程号</li><li>单实例关闭：redis-cli shutdown</li><li>多实例关闭：redis-cli -p 6379 shutdown</li></ol></blockquote><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><p>在 redis 的安装目录中，有一个 redis.conf 文件，我们把这个文件复制到 &#x2F;etc&#x2F;目录下：</p><blockquote><p>这个每个人安装目录有可能不太一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep redis <span class="hljs-comment"># 查找进程id</span><br><span class="hljs-built_in">ls</span> -l /proc/进程<span class="hljs-built_in">id</span>/cwd <span class="hljs-comment"># 查找安装目录</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /usr/local/redis/redis.conf /etc/<br></code></pre></td></tr></table></figure><p>然后修改 &#x2F;etc&#x2F;redis.conf 文件，把 daemonize 值设置为 yes 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/redis.conf <span class="hljs-comment"># 修改daemonize no</span><br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231122171.png" alt="image-20220723112243118"></p><p>保存退出后，执行如下命令来启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server /etc/redis.conf<br></code></pre></td></tr></table></figure><h3 id="验证服务"><a href="#验证服务" class="headerlink" title="验证服务"></a>验证服务</h3><p>我们可以使用 redis-cli 脚本来连接 redis 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -p 6379<br></code></pre></td></tr></table></figure><p>然后执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; ping<br>PONG<br></code></pre></td></tr></table></figure><h3 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redis-cli shutdown<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep redis<br></code></pre></td></tr></table></figure><blockquote><p>注意：也可以进入终端后再关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; shutdown<br></code></pre></td></tr></table></figure></blockquote><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h1><h2 id="key操作"><a href="#key操作" class="headerlink" title="key操作"></a>key操作</h2><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h2 id="BitMaps"><a href="#BitMaps" class="headerlink" title="BitMaps"></a>BitMaps</h2><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h2 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h2><h1 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h1><blockquote><p>配置文件更改后要重启服务器</p><p>或</p><p>.&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf 在启动时加载配置文件</p></blockquote><h2 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h2><p>配置大小单位，开头定义了一些基本的变量单位，只支持 byte，不支持 bit。大小不敏感</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221517115.png" alt="image-20220722151721041"></p><h2 id="INCLUDES"><a href="#INCLUDES" class="headerlink" title="INCLUDES"></a>INCLUDES</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221517637.png" alt="image-20220722151739579"></p><p>它类似于 JSP 中的 include，大多数实例可以把公共部分用到的配置文件提取来，然后通过 include 把这个公共部分包含进来</p><h2 id="NETWORK"><a href="#NETWORK" class="headerlink" title="NETWORK"></a>NETWORK</h2><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>默认情况下 bind&#x3D;127.0.0.1 只能接受本机的访问请求。在不写的情况下，无限制接受任何 IP 地址的访问<br>生产环境需要填写你应用服务器的地址。由于服务器是需要远程访问的，所以需要将其注释掉</p><blockquote><p>注意：如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis 只允许接受本机的响应</p></blockquote><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221520788.png" alt="image-20220722152001733"></p><p>把 <code>bind 127.0.0.1 -::1</code> 它注释掉</p><h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221520628.png" alt="image-20220722152025576"></p><p>我们如果希望远程访问，那么需要把它设置为 no</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>默认端口号为 6379，可以在这里对它进行设置</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221520667.png" alt="image-20220722152045624"></p><h3 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h3><p>设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog队列总和 &#x3D; 未完成三次握手队列 + 已经完成三次握手队列</p><p>在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题</p><blockquote><p>注意：</p><p>Linux内核会将这个值减小到<code>/proc/sys/net/core/somaxconn</code>的值（128），所以需要确认增大<code>/proc/sys/net/core/somaxconn</code></p><p>和<code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>（128）两个值来达到想要的效果</p></blockquote><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221521293.png" alt="image-20220722152144244"></p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即<strong>永不关闭</strong></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221522824.png" alt="image-20220722152213779"></p><h3 id="tcp-keepalive"><a href="#tcp-keepalive" class="headerlink" title="tcp-keepalive"></a>tcp-keepalive</h3><p>对访问客户端的一种<strong>心跳检测</strong>，每 n 秒检测一次。单位为秒，如果设置为0，则不会进行 Keepalive 检测，建议设置成 60</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221522087.png" alt="image-20220722152232035"></p><h2 id="GENERAL"><a href="#GENERAL" class="headerlink" title="GENERAL"></a>GENERAL</h2><h3 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h3><p>是否为后台进程，即守护进程，用于后台启动，设置为yes</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221523826.png" alt="image-20220722152314783"></p><h3 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a>pidfile</h3><p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221523518.png" alt="image-20220722152330465"></p><h3 id="loglevel"><a href="#loglevel" class="headerlink" title="loglevel"></a>loglevel</h3><p>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 <strong>notice</strong></p><p>四个级别根据使用阶段来选择，生产环境选择 notice 或者warning</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221524686.png" alt="image-20220722152404643"></p><h3 id="logfile"><a href="#logfile" class="headerlink" title="logfile"></a>logfile</h3><p>指定日志文件名称</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221524006.png" alt="image-20220722152418968"></p><h3 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h3><p>设定库的数量，默认16，默认数据库为0，可以使用 <code>SELECT &lt;dbid&gt;</code> 命令在连接上指定数据库 id</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221524119.png" alt="image-20220722152440080"></p><h2 id="SECURITY"><a href="#SECURITY" class="headerlink" title="SECURITY"></a>SECURITY</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221524370.png" alt="image-20220722152446322"></p><p>当设置好密码后（即把 requirepass foobared 注解解开），然后使用客户端连接服务器后，在执行 set 命令时，提示需要获取权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@redis-101 bin]<span class="hljs-comment"># redis-cli</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v2<br>(error) NOAUTH Authentication required.<br></code></pre></td></tr></table></figure><p>此时需要使用 auth 命令来输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; auth foobared<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v2<br>OK<br></code></pre></td></tr></table></figure><h2 id="CLIENTS"><a href="#CLIENTS" class="headerlink" title="CLIENTS"></a>CLIENTS</h2><h3 id="maxclients"><a href="#maxclients" class="headerlink" title="maxclients"></a>maxclients</h3><p>设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发</p><p>出<strong>“max number of clients reached”</strong>以作回应</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221525684.png"></p><h3 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory"></a>maxmemory</h3><p>建议必须设置，否则可能导致将内存占满，造成服务器宕机。</p><p>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</p><p>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等</p><p>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221527915.png" alt="image-20220722152715860"></p><h3 id="maxmemory-policy"><a href="#maxmemory-policy" class="headerlink" title="maxmemory-policy"></a>maxmemory-policy</h3><p>用于设置内存达到使用上限后的移除规则。有以下参数可设置：</p><ul><li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li><li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li><li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li><li>allkeys-random：在所有集合key中，移除随机的key</li><li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li><li>noeviction：不进行移除。针对写操作，只是返回错误信息</li></ul><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221527237.png" alt="image-20220722152758187"></p><h3 id="maxmemory-samples"><a href="#maxmemory-samples" class="headerlink" title="maxmemory-samples"></a>maxmemory-samples</h3><p>用于设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个</p><p>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207221528267.png" alt="image-20220722152814199"></p><h1 id="4-Jedis使用"><a href="#4-Jedis使用" class="headerlink" title="4. Jedis使用"></a>4. Jedis使用</h1><p>在使用 Jedis 连接 Redis 之前，服务器需要做如下操作</p><p>1、关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld.service<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service<br></code></pre></td></tr></table></figure><p>2、redis开启远程访问</p><p>1）把 bind 值注释</p><p>2）把 protected-mode 的值设置为 no</p><p>剩下具体就是在项目中使用</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br>    <br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.72.101&quot;</span>, <span class="hljs-number">6379</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        jedis.close();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ping</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(ping);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试各个属性"><a href="#测试各个属性" class="headerlink" title="测试各个属性"></a>测试各个属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redis API 测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.72.101&quot;</span>, <span class="hljs-number">6379</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        jedis.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ping</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(ping);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKey</span><span class="hljs-params">()</span> &#123;<br>        jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>        jedis.set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br><br>        Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        keys.forEach(System.out::println);<br><br>        System.out.println(jedis.dbSize());<br><br>        <span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-comment">//jedis.expire(&quot;name&quot;, 20L);</span><br><br>        <span class="hljs-comment">// 获取过期时间</span><br>        System.out.println(jedis.ttl(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        jedis.flushDB();<br>    &#125;<br><br>    <span class="hljs-comment">// String 类型</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置 key 对应的 value</span><br>        jedis.set(<span class="hljs-string">&quot;course&quot;</span>, <span class="hljs-string">&quot;redis&quot;</span>);<br>        <span class="hljs-comment">// 根据 key 获取值</span><br>        System.out.println(jedis.get(<span class="hljs-string">&quot;course&quot;</span>));<br>        <span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-comment">//jedis.setex(&quot;open&quot;, 30L, &quot;123&quot;);</span><br><br>        <span class="hljs-comment">// 获取过期时间值</span><br>        System.out.println(jedis.getEx(<span class="hljs-string">&quot;open&quot;</span>, GetExParams.getExParams()));<br><br>        <span class="hljs-comment">// 获取动态的过期时间</span><br>        System.out.println(jedis.ttl(<span class="hljs-string">&quot;open&quot;</span>));<br><br>        <span class="hljs-comment">// 同时设置多个值</span><br>        jedis.mset(<span class="hljs-string">&quot;k1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;k2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-string">&quot;k3&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-comment">// 获取多个值</span><br>        List&lt;String&gt; values = jedis.mget(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>);<br>        values.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-comment">//jedis.lpush(&quot;mylist&quot;, &quot;a&quot;);</span><br>        <span class="hljs-comment">//jedis.lpush(&quot;mylist&quot;, &quot;b&quot;);</span><br>        <span class="hljs-comment">//jedis.lpush(&quot;mylist&quot;, &quot;c&quot;);</span><br><br>        <span class="hljs-comment">// 获取指定 key 的最左的数据</span><br>        <span class="hljs-comment">/*String mylist = jedis.lpop(&quot;mylist&quot;);</span><br><span class="hljs-comment">        System.out.println(mylist);</span><br><span class="hljs-comment">        // 获取指定 key 的数据个数</span><br><span class="hljs-comment">        System.out.println(jedis.lpop(&quot;mylist&quot;, 2));*/</span><br><br>        System.out.println(jedis.lrange(<span class="hljs-string">&quot;mylist&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>));<br><br>        System.out.println(jedis.llen(<span class="hljs-string">&quot;mylist&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-comment">//jedis.sadd(&quot;myredis&quot;, &quot;string&quot;, &quot;list&quot;, &quot;set&quot;, &quot;zset&quot;, &quot;hash&quot;, &quot;bitmaps&quot;);</span><br><br>        <span class="hljs-comment">// 获取数据个数</span><br>        <span class="hljs-comment">//System.out.println(jedis.scard(&quot;myredis&quot;));</span><br><br>        <span class="hljs-comment">// 获取数据</span><br>        Set&lt;String&gt; myredis = jedis.smembers(<span class="hljs-string">&quot;myredis&quot;</span>);<br>        myredis.forEach(System.out::println);<br><br>        <span class="hljs-comment">// 判断指定key和值 是否在集合中</span><br>        System.out.println(jedis.sismember(<span class="hljs-string">&quot;myredis&quot;</span>, <span class="hljs-string">&quot;string1&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZset</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-comment">/*jedis.zadd(&quot;lisi&quot;, 98, &quot;java&quot;);</span><br><span class="hljs-comment">        jedis.zadd(&quot;lisi&quot;, 100, &quot;math&quot;);</span><br><span class="hljs-comment">        jedis.zadd(&quot;lisi&quot;, 99, &quot;english&quot;);*/</span><br><br>        <span class="hljs-comment">// 获取指定分数段的个数</span><br>        System.out.println(jedis.zcount(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">98</span>, <span class="hljs-number">100</span>));<br><br>        <span class="hljs-comment">// 获取指定key和成员对应的分数</span><br>        System.out.println(jedis.zscore(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>));<br><br>        <span class="hljs-comment">// 获取指定范围的成员</span><br>        System.out.println(jedis.zrange(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// 返回有序集合中指定成员的索引</span><br>        System.out.println(jedis.zrank(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-comment">/*jedis.hset(&quot;student&quot;, &quot;name&quot;, &quot;张三&quot;);</span><br><span class="hljs-comment">        jedis.hset(&quot;student&quot;, &quot;age&quot;, &quot;20&quot;);</span><br><span class="hljs-comment">        jedis.hset(&quot;student&quot;, &quot;gender&quot;, &quot;男&quot;);</span><br><span class="hljs-comment">        jedis.hset(&quot;student&quot;, &quot;birth&quot;, String.valueOf(new Date()));*/</span><br><br>        <span class="hljs-comment">// 获取</span><br>        System.out.println(jedis.hget(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(jedis.hgetAll(<span class="hljs-string">&quot;student&quot;</span>));<br><br>        <span class="hljs-comment">// 批量添加</span><br>        <span class="hljs-comment">/*HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">        map.put(&quot;phone&quot;, &quot;123456789&quot;);</span><br><span class="hljs-comment">        map.put(&quot;email&quot;, &quot;abc@openlab.com&quot;);</span><br><span class="hljs-comment">        map.put(&quot;address&quot;, &quot;西安&quot;);</span><br><span class="hljs-comment">        jedis.hmset(&quot;info&quot;, map);*/</span><br><br>        <span class="hljs-comment">// 批量获取</span><br>        System.out.println(jedis.hmget(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGeo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加城市的经度和纬度值</span><br>        <span class="hljs-comment">/*Map&lt;String, GeoCoordinate&gt; memberCoordinateMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">        memberCoordinateMap.put(&quot;chongqing&quot;, new GeoCoordinate(106.50, 29.53));</span><br><span class="hljs-comment">        memberCoordinateMap.put(&quot;shanghai&quot;, new GeoCoordinate(121.47, 31.23));</span><br><span class="hljs-comment">        memberCoordinateMap.put(&quot;shenzhen&quot;, new GeoCoordinate(114.05, 22.52));</span><br><span class="hljs-comment">        memberCoordinateMap.put(&quot;beijing&quot;, new GeoCoordinate(116.38, 39.90));</span><br><span class="hljs-comment">        jedis.geoadd(&quot;china:city&quot;, memberCoordinateMap);*/</span><br><br>        <span class="hljs-comment">// 获得指定地区的坐标值 geopos  key  member  [member...]</span><br>        System.out.println(jedis.geopos(<span class="hljs-string">&quot;china:city&quot;</span>, <span class="hljs-string">&quot;chongqing&quot;</span>));<br><br>        <span class="hljs-comment">// 获取两个位置之间的直线距离  geodist  key  member1  member2 [m\|km\|ft\|mi]</span><br>        System.out.println(jedis.geodist(<span class="hljs-string">&quot;china:city&quot;</span>, <span class="hljs-string">&quot;chongqing&quot;</span>, <span class="hljs-string">&quot;beijing&quot;</span>, GeoUnit.KM));<br><br>        <span class="hljs-comment">// 以给定的经纬度为中心，找出某一半径内的元素 georadius  key   longitude  latitude  radius  [m\|km\|ft\|mi]</span><br>        List&lt;GeoRadiusResponse&gt; georadius = jedis.georadius(<span class="hljs-string">&quot;china:city&quot;</span>, <span class="hljs-number">106.49999767541885</span>, <span class="hljs-number">29.529999579006592</span>, <span class="hljs-number">5000</span>, GeoUnit.KM);<br>        georadius.forEach(g -&gt; &#123;<br>            System.out.println(g.getDistance());<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(g.getMember()));<br>        &#125;);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-整合SpringBoot"><a href="#5-整合SpringBoot" class="headerlink" title="5. 整合SpringBoot"></a>5. 整合SpringBoot</h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>创建一个 Maven 空工程即可</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置连接信息"><a href="#配置连接信息" class="headerlink" title="配置连接信息"></a>配置连接信息</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">180000</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 最大的活动数</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 最大空闲数</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 最大阻塞等待时间,如果为-1表示没有限制</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h2 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> chaoo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/07/20/ 21:00</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@EnableCaching</span> <span class="hljs-comment">// 开启缓存</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurationSelector</span> &#123;<br>    <span class="hljs-comment">// 配置 RedisTemplate 模板对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 配置序列化对象</span><br>        RedisSerializer&lt;String&gt; serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">// key序列化方式</span><br>        template.setKeySerializer(serializer);<br>        <span class="hljs-comment">// value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">// value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置缓存管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-comment">// 用于解决查询缓存转换异常的问题</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写Boot入口类"><a href="#编写Boot入口类" class="headerlink" title="编写Boot入口类"></a>编写Boot入口类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RedisApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * redisTemplate.opsForValue() 获取的是 string类型</span><br><span class="hljs-comment"> * redisTemplate.opsForHash() 获取hash类型</span><br><span class="hljs-comment"> * redisTemplate.opsForSet() 获取set类型</span><br><span class="hljs-comment"> * redisTemplate.opsForList() 获取list类型</span><br><span class="hljs-comment"> * redisTemplate.opsForZSet() 获取zset类型</span><br><span class="hljs-comment"> * redisTemplate.opsForHyperLogLog() 获取hyperLogLog类型</span><br><span class="hljs-comment"> * redisTemplate.opsForGeo() 获取geo类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisApiTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-comment">//redisTemplate.opsForValue().set(&quot;hello&quot;, &quot;world&quot;);</span><br><br>        <span class="hljs-comment">// 获取数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于 redisTemplate ,这个其实使用起来和 Jedis 大同小异，当我们需要获取某种类型值，只需要 redisTemplate.opsForXXX() 就可以获取我们想要的类型，学习成本不是很高 </p><h1 id="6-发布和订阅"><a href="#6-发布和订阅" class="headerlink" title="6. 发布和订阅"></a>6. 发布和订阅</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。Redis 客户端可以订阅任意数量的频道。下图展示了频道 channel1 ，以及订阅这个频道的三个客户端 —— client1 、client2 和 client3 之间的关系：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207210912401.png" alt="image-20220721091251347"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207210913033.png" alt="image-20220721091301986"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207210914587.png" alt="image-20220721091419521"></p><h2 id="命令演示"><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h2><p>先打开一个客户端，执行下面命令来订阅频道 redisChat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; subscribe redisChat<br>Reading messages... (press Ctrl-C to quit)<br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br>2) <span class="hljs-string">&quot;redisChat&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>在另外一个客户端发布消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; publish redisChat <span class="hljs-string">&quot;hello message&quot;</span><br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>发布完成后，在一开始第客户端就可以接收到消息了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; subscribe redisChat<br>Reading messages... (press Ctrl-C to quit)<br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br>2) <span class="hljs-string">&quot;redisChat&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br>1) <span class="hljs-string">&quot;message&quot;</span><br>2) <span class="hljs-string">&quot;redisChat&quot;</span><br>3) <span class="hljs-string">&quot;hello message&quot;</span><br></code></pre></td></tr></table></figure><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><h3 id="配置发布订阅"><a href="#配置发布订阅" class="headerlink" title="配置发布订阅"></a>配置发布订阅</h3><p><code>RedisConfig.java</code></p><blockquote><p>这是一个工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chaoo.config;<br><br><span class="hljs-keyword">import</span> com.chaoo.subscribe.Receiver;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.json.JsonObjectDecoder;<br><span class="hljs-keyword">import</span> org.springframework.cache.CacheManager;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CachingConfigurationSelector;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.listener.PatternTopic;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> chaoo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/07/20/ 21:00</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@EnableCaching</span> <span class="hljs-comment">// 开启缓存</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurationSelector</span> &#123;<br>    <span class="hljs-comment">// 配置 RedisTemplate 模板对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 配置序列化对象</span><br>        RedisSerializer&lt;String&gt; serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">// key序列化方式</span><br>        template.setKeySerializer(serializer);<br>        <span class="hljs-comment">// value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">// value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置缓存管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-comment">// 用于解决查询缓存转换异常的问题</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br><br>    <span class="hljs-comment">/*-------------------- 下面的配置是用于发布订阅，如果不使用这个功能可以删除 ------------------------*/</span><br>    <span class="hljs-comment">// 创建连接工厂</span><br>    <span class="hljs-meta">@Bean</span><br>    RedisMessageListenerContainer <span class="hljs-title function_">container</span><span class="hljs-params">(RedisConnectionFactory factory,</span><br><span class="hljs-params">                                            MessageListenerAdapter adapter)</span> &#123;<br>        <span class="hljs-type">RedisMessageListenerContainer</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisMessageListenerContainer</span>();<br>        container.setConnectionFactory(factory);<br>        <span class="hljs-comment">// 指定了一个消息的主题，叫 myTopic</span><br>        container.addMessageListener(adapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(<span class="hljs-string">&quot;myTopic&quot;</span>));<br><br>        <span class="hljs-keyword">return</span> container;<br>    &#125;<br><br>    <span class="hljs-comment">// 绑定消息监听者和接收监听的方法</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageListenerAdapter <span class="hljs-title function_">listenerAdapter</span><span class="hljs-params">(Receiver receiver)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(receiver, <span class="hljs-string">&quot;receiveMessage&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 注册订阅者</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Receiver <span class="hljs-title function_">receiver</span><span class="hljs-params">(CountDownLatch latch)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Receiver</span>(latch);<br>    &#125;<br><br>    <span class="hljs-comment">// 计数器，用来控制线程</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CountDownLatch <span class="hljs-title function_">latch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 指定了计数的次数 1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写消息接收者类"><a href="#编写消息接收者类" class="headerlink" title="编写消息接收者类"></a>编写消息接收者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chaoo.subscribe;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息接收者类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Receiver</span> &#123;<br>    <span class="hljs-keyword">private</span> CountDownLatch latch;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Receiver</span><span class="hljs-params">(CountDownLatch latch)</span> &#123;<br>        <span class="hljs-built_in">this</span>.latch = latch;<br>    &#125;<br><br>    <span class="hljs-comment">// 用于接收消息的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;接收到的消息为：&lt;&quot;</span> + message + <span class="hljs-string">&quot;&gt;&quot;</span>);<br>        latch.countDown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写消息发送者"><a href="#编写消息发送者" class="headerlink" title="编写消息发送者"></a>编写消息发送者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SenderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/send&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String msg)</span> &#123;<br>        redisTemplate.convertAndSend(<span class="hljs-string">&quot;myTopic&quot;</span>, msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;消息发送成功&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>启动项目，在浏览器中输入 <a href="http://localhost:8080/send?msg=hello">http://localhost:8080/send?msg=hello</a> 后就可以在 IDEA 控制台中看到如下信息：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207210922995.png" alt="image-20220721092213939"></p><h1 id="8-⏳事务管理"><a href="#8-⏳事务管理" class="headerlink" title="8.⏳事务管理"></a>8.⏳事务管理</h1><h2 id="8-1-事务定义"><a href="#8-1-事务定义" class="headerlink" title="8.1 事务定义"></a>8.1 事务定义</h2><h2 id="8-2-Multi、Exec、Discard"><a href="#8-2-Multi、Exec、Discard" class="headerlink" title="8.2 Multi、Exec、Discard"></a>8.2 Multi、Exec、Discard</h2><p>输入 Muti 命令开始</p><p>1)组队成功，提交成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> key1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> key2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt;  <span class="hljs-built_in">exec</span><br>1) OK<br>2) OK<br></code></pre></td></tr></table></figure><p>2)组队阶段报错，提交失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k3<br>(error) ERR wrong number of arguments <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;set&#x27;</span> <span class="hljs-built_in">command</span><br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k4 v4 <br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>(error) EXECABORT Transaction discarded because of previous errors.<br></code></pre></td></tr></table></figure><p>3)组队成功，提交失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k5 v5<br>QUEUED<br>127.0.0.1:6379(TX)&gt; incr k5<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k6 v6<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>1) OK<br>2) (error) ERR value is not an <span class="hljs-built_in">integer</span> or out of range<br>3) OK<br></code></pre></td></tr></table></figure><h2 id="8-3-事务冲突问题"><a href="#8-3-事务冲突问题" class="headerlink" title="8.3 事务冲突问题"></a>8.3 事务冲突问题</h2><h3 id="8-3-1-问题场景"><a href="#8-3-1-问题场景" class="headerlink" title="8.3.1 问题场景"></a>8.3.1 问题场景</h3><p>10000块</p><h3 id="8-3-2-悲观锁"><a href="#8-3-2-悲观锁" class="headerlink" title="8.3.2 悲观锁"></a>8.3.2 悲观锁</h3><p>这种方式能过解决透支问题，但是性能不高</p><h3 id="8-3-3-乐观锁"><a href="#8-3-3-乐观锁" class="headerlink" title="8.3.3 乐观锁"></a>8.3.3 乐观锁</h3><h3 id="8-3-4-watch"><a href="#8-3-4-watch" class="headerlink" title="8.3.4 watch"></a>8.3.4 watch</h3><blockquote><p>监听</p></blockquote><p>首先设置值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> balance 10000<br>OK<br></code></pre></td></tr></table></figure><p>在客户端A：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; watch balance<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; decrby balance 8000<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>1) (<span class="hljs-built_in">integer</span>) 2000<br></code></pre></td></tr></table></figure><p>首先在客户端 A 中监听 balance ，然后开启事务操作。同时，在客户端 B 中也监听 balance ，然后开启事务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; watch balance<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; decrby balance 5000<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>(nil)<br></code></pre></td></tr></table></figure><h2 id="8-4-Redis事务的特性"><a href="#8-4-Redis事务的特性" class="headerlink" title="8.4 Redis事务的特性"></a>8.4 Redis事务的特性</h2><h2 id="8-5-案例演示"><a href="#8-5-案例演示" class="headerlink" title="8.5 案例演示"></a>8.5 案例演示</h2><blockquote><p>秒杀项目</p></blockquote><h1 id="9-数据持久化"><a href="#9-数据持久化" class="headerlink" title="9. 数据持久化"></a>9. 数据持久化</h1><p>官网文档地址：<a href="https://redis.io/docs/manual/persistence/">https://redis.io/docs/manual/persistence/</a><br>Redis提供了主要提供了 2 种不同形式的持久化方式：</p><ul><li>RDB（Redis数据库）：RDB 持久性以指定的时间间隔执行数据集的时间点快照。</li><li>AOF（Append Only File）：AOF 持久化记录服务器接收到的每个写操作，在服务器启动时再次播放，重建原始数据集。 命令使用与 Redis 协议本身相同的格式以仅附加方式记录。 当日志变得太大时，Redis 能够在后台重写日志。</li></ul><h2 id="9-1-RDB"><a href="#9-1-RDB" class="headerlink" title="9.1 RDB"></a>9.1 RDB</h2><h3 id="9-1-1-什么RDB"><a href="#9-1-1-什么RDB" class="headerlink" title="9.1.1 什么RDB"></a>9.1.1 什么RDB</h3><p>在指定时间间隔内将内存中存储的数据集快照写入磁盘，也就是Snapshot快照，它恢复是是将快照文件直接读到内存里</p><h3 id="9-1-2-如何备份"><a href="#9-1-2-如何备份" class="headerlink" title="9.1.2 如何备份"></a>9.1.2 如何备份</h3><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束后，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong></p><h3 id="9-1-3-Fork"><a href="#9-1-3-Fork" class="headerlink" title="9.1.3 Fork"></a>9.1.3 Fork</h3><p>Fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但它是一个全新的进程，并作为原进程的子进程。</p><p>在 Linux 程序中，fork() 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统<br>调用，出于效率考虑，Linux 中引入了“<strong>写时复制技术</strong>”。</p><p>一<strong>般情况下父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231055747.png" alt="image-20220723105512674"></p><h3 id="9-1-4-执行流程"><a href="#9-1-4-执行流程" class="headerlink" title="9.1.4 执行流程"></a>9.1.4 执行流程</h3><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231124981.png" alt="image-20220723112416902"></p><p>启动：</p><ul><li>检查是否存在子进程正在执行 AOF 或者 RDB 的持久化任务。如果有则返回 false。</li><li>调用 Redis 源码中的 rdbSaveBackground 方法，方法中执行 fork() 产生子进程执行 RDB 操作。</li><li>关于 fork() 中的 Copy-On-Write</li></ul><h3 id="9-1-5-相关配置"><a href="#9-1-5-相关配置" class="headerlink" title="9.1.5 相关配置"></a>9.1.5 相关配置</h3><p><strong>1.配置文件名称</strong></p><p>快照持久化是Redis中默认开启的持久化方案，根据redis.conf中的配置，快照将被写入dbfilename指定的文件中（默认是dump.rdb文件）</p><blockquote><p>注意：RDB功能在 Redis中默认是开启的，而 dump.rdb 文件生成的目录是执行 redis-server 命令所在的目录</p></blockquote><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231131440.png"></p><p>在这里设置 RDB 的文件名称</p><p><strong>2.设置文件路径</strong></p><p>根据redis.conf中的配置，快照将保存在dir选项指定的路径上，我们可以修改为指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> ./<br></code></pre></td></tr></table></figure><p>修改这个值即可。注意要以绝对路径来表示</p><p><strong>3.save</strong></p><p>格式：save 秒钟 写操作次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">save 3600 1<br>save 300 100<br>save 60 10000<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231132378.png" alt="image-20220723113257298"></p><h3 id="9-1-6-优势"><a href="#9-1-6-优势" class="headerlink" title="9.1.6 优势"></a>9.1.6 优势</h3><p>RDB 方式适合大规模的数据恢复，并且对数据完整性和一致性要求不高更适合使用。它有以下几种优势：</p><ul><li>节省磁盘空间</li><li>恢复速度快</li></ul><h3 id="9-1-7-劣势"><a href="#9-1-7-劣势" class="headerlink" title="9.1.7 劣势"></a>9.1.7 劣势</h3><ul><li>Fork的时候，内存中的数据被克隆了一份，大致<strong>2倍的膨胀性</strong>需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>，但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改</li></ul><h2 id="9-2-AOF"><a href="#9-2-AOF" class="headerlink" title="9.2 AOF"></a>9.2 AOF</h2><h3 id="9-2-1-什么是AOF"><a href="#9-2-1-什么是AOF" class="headerlink" title="9.2.1 什么是AOF"></a>9.2.1 什么是AOF</h3><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， 只追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据。简单说，Redis 重启时会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>在Redis的默认配置中AOF（Append Only File）持久化机制是没有开启的，要想使用AOF持久化需要先开启此功能。AOF持久化会将被执行的写命令写到AOF文件末尾，以此来记录数据发生的变化，因此只要Redis从头到尾执行一次AOF文件所包含的所有写命令，就可以恢复AOF文件的记录的数据集</p><h3 id="9-2-2-持久化流程"><a href="#9-2-2-持久化流程" class="headerlink" title="9.2.2 持久化流程"></a>9.2.2 持久化流程</h3><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231150693.png" alt="image-20220723115023621"></p><p>1）客户端的请求写命令会被 append 追加到 AOF 缓冲区内。<br>2）AOF 缓冲区根据 AOF 持久化策略 [always,everysec,no] 将操作sync同步到磁盘的 AOF 文件中。<br>3）AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量。<br>4）Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作达到数据恢复的目的。</p><h3 id="9-2-3-使用AOF"><a href="#9-2-3-使用AOF" class="headerlink" title="9.2.3 使用AOF"></a>9.2.3 使用AOF</h3><p><strong>1.开启AOF</strong></p><p>修改 redis.conf 配置文件：</p><ul><li>通过修改redis.conf配置中 <code>appendonly yes</code> 来开启AOF持久化</li><li>通过appendfilename指定日志文件名字（默认为appendonly.aof）</li><li>通过appendfsync指定日志记录频率</li></ul><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231151169.png" alt="image-20220723115107096"></p><p><strong>2.配置选项</strong></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231151402.png" alt="image-20220723115129319"></p><p><strong>3.使用演示</strong></p><p>配置好后，连接到 redis中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@redis-101 bin]<span class="hljs-comment"># redis-server /etc/redis.conf</span><br>[root@redis-101 bin]<span class="hljs-comment"># redis-cli</span><br>127.0.0.1:6379&gt; keys *<br>(empty array)<br></code></pre></td></tr></table></figure><p>当启动后，发现原来的 5 条数据没有了。</p><p>什么原因？</p><p>原因是为当 AOF 和 RDB 同时存在时，以 AOF 持久化文件 appendonly.aof 文件中的内容为准。由于这个功能是刚开启，因此文件中内容为空。</p><p>appendonly.aof 生成所在的目录与 dump.rdb 文件生成所在的目录是一致的</p><p><strong>4.恢复</strong></p><p>如果 appendonly.aof 文件出问题了，可以使用 <code>redis-check-ao f</code> 命令来进行恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@redis-101 bin]<span class="hljs-comment"># redis-check-aof --fix appendonly.aof</span><br>0x d1: Expected prefix <span class="hljs-string">&#x27;*&#x27;</span>, got: <span class="hljs-string">&#x27;h&#x27;</span><br>AOF analyzed: size=216, ok_up_to=209, ok_up_to_line=48, diff=7<br>This will shrink the AOF from 216 bytes, with 7 bytes, to 209 bytes<br>Continue? [y/N]: y<br>Successfully truncated AOF<br></code></pre></td></tr></table></figure><h2 id="9-2-4-优势"><a href="#9-2-4-优势" class="headerlink" title="9.2.4 优势"></a>9.2.4 优势</h2><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作</li></ul><h2 id="9-2-5-劣势"><a href="#9-2-5-劣势" class="headerlink" title="9.2.5 劣势"></a>9.2.5 劣势</h2><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul><h1 id="10-主从复制"><a href="#10-主从复制" class="headerlink" title="10. 主从复制"></a>10. 主从复制</h1><p>随着项目访问量的增加，对Redis服务器的操作也越加频繁，虽然Redis读写速度都很快，但是一定程度上也会造成一定的延时，那么为了解决访问量大的问题，通常会采取的一种方式是主从架构Master&#x2F;Slave，Master 以写为主，Slave 以读为主</p><h2 id="10-1-主从复制原理"><a href="#10-1-主从复制原理" class="headerlink" title="10.1 主从复制原理"></a>10.1 主从复制原理</h2><p>Redis 一般是使用一个 Master 节点来进行写操作，而若干个 Slave 节点进行读操作，Master 和 Slave 分别代表了一个个不同的 Redis Server 实例。</p><p>另外定期的数据备份操作也是单独选择一个 Slave 去完成，这样可以最大程度发挥 Redis 的性能，为的是保证数据的弱一致性和最终一致性。</p><p>另外，Master 和 Slave 的数据不是一定要即时同步的，但是在一段时间后 Master 和 Slave 的数据是趋于同步的，这就是最终一致性。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231505758.png" alt="image-20220723150538660"></p><p><strong>全同步过程如下：</strong></p><ul><li>Slave 发送 Sync 命令到 Master。</li><li>Master 启动一个后台进程，将 Redis 中的数据快照保存到文件中。</li><li>Master 将保存数据快照期间接收到的写命令缓存起来。</li><li>Master 完成写文件操作后，将该文件发送给 Slave。</li><li>使用新的 RDB 或 AOF 文件替换掉旧的 RDB 或 AOF 文件。</li><li>Master 将这期间收集的增量写命令发送给 Slave 端。</li></ul><p><strong>增量同步过程如下：</strong></p><ul><li>Master 接收到用户的操作指令，判断是否需要传播到 Slave。</li><li>将操作记录追加到 AOF 文件。</li><li>将操作传播到其他 Slave：对齐主从库；往响应缓存写入指令。</li><li>将缓存中的数据发送给 Slave。</li></ul><h2 id="10-2-主从复制配置"><a href="#10-2-主从复制配置" class="headerlink" title="10.2 主从复制配置"></a>10.2 主从复制配置</h2><h3 id="10-2-1-一主双从"><a href="#10-2-1-一主双从" class="headerlink" title="10.2.1 一主双从"></a>10.2.1 一主双从</h3><p>准备三台虚拟机，配置好主机名、IP地址和Redis环境。本教程中为了演示方便，在一台虚拟机中配置三个Redis实例</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220723150638122.png" alt="image-20220723150638122"></p><p><strong>创建目录</strong></p><p>我们在根目录下创建 rediscluster 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /rediscluster<br></code></pre></td></tr></table></figure><p><strong>复制配置文件</strong></p><p>把 redis.conf 复制到这个目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/redis.conf /rediscluster/redis.conf<br></code></pre></td></tr></table></figure><p>为了演示方便，把 redis.conf 中的 appendonly no，即关闭 AOF</p><p><strong>创建三个文件</strong></p><p>在rediscluster目录下分别创建三个文件： redis-6379.conf、redis-6380.conf 和 redis-6381.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim redis-6379.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">include /rediscluster/redis.conf<br><span class="hljs-comment"># 修改端口号</span><br>port 6379<br><span class="hljs-comment"># 修改pid文件名</span><br>pidfile <span class="hljs-string">&quot;/var/run/redis_6379.pid&quot;</span><br><span class="hljs-comment"># 修改持久化文件名</span><br>dbfilename <span class="hljs-string">&quot;dump_6379.rdb&quot;</span><br><span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;/rediscluster&quot;</span><br></code></pre></td></tr></table></figure><p>同样的方式创建另外两个文件并做相应的修改</p><p><strong>启动服务</strong></p><p>分别启动三台 Redis 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rediscluster]<span class="hljs-comment"># redis-server redis-6379.conf</span><br>rediscluster]<span class="hljs-comment"># redis-server redis-6380.conf</span><br>rediscluster]<span class="hljs-comment"># redis-server redis-6381.conf</span><br></code></pre></td></tr></table></figure><p><strong>验证服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rediscluster]<span class="hljs-comment"># ps -ef | grep redis</span><br></code></pre></td></tr></table></figure><p><strong>连接服务</strong></p><p>分别使用 redis-cli 来连接这三台服务（三个窗口）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rediscluster]<span class="hljs-comment"># redis-cli -p 6379</span><br>rediscluster]<span class="hljs-comment"># redis-cli -p 6380</span><br>rediscluster]<span class="hljs-comment"># redis-cli -p 6381</span><br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231515243.png" alt="image-20220723151540162"></p><p><strong>进行复制</strong></p><p>客户端连接上后，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br>127.0.0.1:6380&gt; info replication<br>127.0.0.1:6381&gt; info replication<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231516562.png" alt="image-20220723151606477"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231516970.png" alt="image-20220723151613881"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231516970.png"></p><p>从图中可以发现，这三台都是 master，也就是都是主服务器</p><p><strong>配置主从</strong></p><p>假设我们希望 6379 是主服务器，而 6380 和 6381 是从服务器，则需要做如下配置。</p><p>命令格式： <code>slaveof &lt;ip&gt; &lt;port&gt;</code></p><p>我们分别在 6380 和 6381 客户端中执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379<br>OK<br>127.0.0.1:6381&gt; slaveof 127.0.0.1 6379<br>OK<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ol><li>在 redis-cli 客户端中执行 slaveof 命令只会对当前环境生效，重启后失效。要想永久生<br>效，需要在 redis.conf 配置文件中添加 <code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code> 配<br>置。</li><li>在 Redis 5.0 后，新增了 replicaof 命令，作用与 slaveof 命令效果一致。</li></ol></blockquote><p>再次执行 <code>info replication</code> 命令查看，可以发现已经变为了从机了。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231523658.png" alt="image-20220723152354582"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231523701.png" alt="image-20220723152359628"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231524606.png" alt="image-20220723152405526"></p><p><strong>集群测试</strong></p><p>我们在 6379 中添加如下数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2<br>OK<br></code></pre></td></tr></table></figure><p>然后在从机上查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; get k1<br>1) <span class="hljs-string">&quot;v1&quot;</span><br>127.0.0.1:6381&gt; get k1<br>1) <span class="hljs-string">&quot;v1&quot;</span><br></code></pre></td></tr></table></figure><p>发现数据已经同步了</p><blockquote><p><strong>注意：</strong></p><ol><li><p>如果我们在从服务器中添加数据，则会报错。因为从服务器只能读。</p></li><li><p>如果从机宕机了，重启后会变为主服务器，需要重新执行 <code>slaveof &lt;ip&gt; &lt;port&gt;</code>命令。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231526814.png" alt="image-20220723152655739"></p></li><li><p>如果主机宕机了，重启后一切正常</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231527456.png" alt="image-20220723152712380"></p></li></ol></blockquote><h3 id="10-2-2-主从切换"><a href="#10-2-2-主从切换" class="headerlink" title="10.2.2 主从切换"></a>10.2.2 主从切换</h3><blockquote><p>不过该方法较为麻烦，因此有了哨兵</p></blockquote><p>当一个 master 宕机后，后面的 slave 可以立刻升为 master，其后面的 slave 不用做任何修改。</p><p>用 slaveof no one 将从机变为主机。</p><p>假设主机 6379 宕机了，我们可以在 6380 上执行如下命令来切换为主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; slaveof no one<br></code></pre></td></tr></table></figure><p>查看 6380，已经变为主机了</p><h2 id="10-3-哨兵模式"><a href="#10-3-哨兵模式" class="headerlink" title="10.3 哨兵模式"></a>10.3 哨兵模式</h2><h3 id="10-3-1-什么是哨兵模式"><a href="#10-3-1-什么是哨兵模式" class="headerlink" title="10.3.1 什么是哨兵模式"></a>10.3.1 什么是哨兵模式</h3><p>哨兵也叫 sentinel，它的作用是能够在后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231529863.png" alt="image-20220723152933783"></p><h3 id="10-3-2-配置哨兵"><a href="#10-3-2-配置哨兵" class="headerlink" title="10.3.2 配置哨兵"></a>10.3.2 配置哨兵</h3><p>首先停止三台 Redis 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli shutdown<br></code></pre></td></tr></table></figure><p>然后再重新启动三台 Redis 服务器，并实现一主双从。</p><p>最后在 &#x2F;rediscluster 目录下新建 sentinel.conf 文件，文件名称不能写错，必须叫这个名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rediscluster]<span class="hljs-comment"># vim sentinel.conf</span><br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sentinel monitor redismaster 127.0.0.1 6379 1<br></code></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li>monitor：监控</li><li>redismaster：为监控对象起的服务名称</li><li>1：为至少有多个个哨兵同意迁移的数量</li></ul><p></p></blockquote><h3 id="10-3-3-启动哨兵"><a href="#10-3-3-启动哨兵" class="headerlink" title="10.3.3 启动哨兵"></a>10.3.3 启动哨兵</h3><p>执行如下命令来启动哨兵:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rediscluster]<span class="hljs-comment"># redis-sentinel sentinel.conf</span><br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231539724.png" alt="image-20220723153902617"></p><h3 id="10-3-4-验证哨兵"><a href="#10-3-4-验证哨兵" class="headerlink" title="10.3.4 验证哨兵"></a>10.3.4 验证哨兵</h3><p>我们把主服务器停止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; shutdown<br></code></pre></td></tr></table></figure><p>这时，哨兵就会介入，并进行选举，然后把选举成功的从面切换为主机。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231539341.png" alt="image-20220723153942264"></p><p>如果我们把 6379 重新启动，则它会变为从机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231541067.png" alt="image-20220723154059984"></p><h3 id="10-3-5-复制延时"><a href="#10-3-5-复制延时" class="headerlink" title="10.3.5 复制延时"></a>10.3.5 复制延时</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机<br>器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个<br>问题更加严重</p><h3 id="10-3-6-选举策略"><a href="#10-3-6-选举策略" class="headerlink" title="10.3.6 选举策略"></a>10.3.6 选举策略</h3><ol><li>选择优先级靠前的服务器。优先级的配置在 redis.conf 文件中的 replica-priority 配<br>置，默认为 100，值越小优先级越高。</li><li>选择偏移量最大的。偏移量是指获得原主机数据最全的。</li><li>选择 runid 最小的从服务器。每个redis实例启动后都会随机生成一个40位的runid</li></ol><h2 id="10-4-主从应用"><a href="#10-4-主从应用" class="headerlink" title="10.4 主从应用"></a>10.4 主从应用</h2><p>我们在 SpringBoot 应用中使用哨兵模式。</p><h3 id="10-4-1-配置Redis"><a href="#10-4-1-配置Redis" class="headerlink" title="10.4.1 配置Redis"></a>10.4.1 配置Redis</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">redis:</span><br>  <span class="hljs-attr">sentinel:</span><br>   <span class="hljs-attr">master:</span> <span class="hljs-string">redismaster</span><br>   <span class="hljs-attr">nodes:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:26379</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><ol><li>master：是哨兵的名字，即在 sentinel.conf 文件中配置的名称</li><li>nodes：哨兵集群节点，如果有多个，用逗号分隔</li><li>26379：是哨兵的端口号</li></ol></blockquote><h3 id="10-4-2-编写控制器"><a href="#10-4-2-编写控制器" class="headerlink" title="10.4.2 编写控制器"></a>10.4.2 编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-meta">@GetMapping(&quot;/set/&#123;key&#125;/&#123;value&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> HttpResult <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;key&quot;)</span> String key,</span><br><span class="hljs-params">                               <span class="hljs-meta">@PathVariable(&quot;value&quot;)</span> String value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>        <span class="hljs-keyword">return</span> HttpResult.success();<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/get/&#123;key&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> HttpResult <span class="hljs-title function_">getValue</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;key&quot;)</span> String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> HttpResult.success(redisTemplate.opsForValue().get(key));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11-⏳集群环境"><a href="#11-⏳集群环境" class="headerlink" title="11. ⏳集群环境"></a>11. ⏳集群环境</h1><p>官网文档地址：<a href="https://redis.io/docs/manual/scaling/">https://redis.io/docs/manual/scaling/</a></p><h2 id="11-1-集群介绍"><a href="#11-1-集群介绍" class="headerlink" title="11.1 集群介绍"></a>11.1 集群介绍</h2><p>Redis 集群是一个提供在<strong>多个 Redis 间节点间共享数据的程序集</strong>。Redis集群并不支持处理多个keys的命令，因为这需要在不同的节点间移动数据，从而达不到像Redis那样的性能，在高负载的情况下可能会导致不可预料的错误。<br>Redis 集群通过分区来提供<strong>一定程度的可用性</strong>，在实际环境中当某个节点宕机或者不可达的情况下继续处理命令。Redis 集群的优势:</p><ul><li>自动分割数据到不同的节点上。</li><li>整个集群的部分节点失败或者不可达的情况下能够继续处理命令。</li></ul><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231546072.png" alt="image-20220723154605992"></p><h2 id="11-2-数据分片"><a href="#11-2-数据分片" class="headerlink" title="11.2 数据分片"></a>11.2 数据分片</h2><p>Redis 集群没有使用一致性hash，而是引入了<strong>哈希槽（slots）</strong>的概念。</p><p>Redis 集群有<strong>16384</strong>个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽。集群的<br>每个节点负责一部分hash槽，比如当前集群有3个节点，那么：</p><ul><li>节点 A 包含 0 到 5500号哈希槽。</li><li>节点 B 包含5501 到 11000 号哈希槽。</li><li>节点 C 包含11001 到 16384号哈希槽。</li></ul><p>这种结构很容易添加或者删除节点。比如想新添加个节点D，只需要从节点 A、B、C中得部分槽并分配到D上即可。 如果想移除节点A，需要将A中的槽移到B和C节点上，然后将没有任何槽的A节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。</p><h2 id="11-3-主从复制模型"><a href="#11-3-主从复制模型" class="headerlink" title="11.3 主从复制模型"></a>11.3 主从复制模型</h2><h2 id="11-4-一致性保证"><a href="#11-4-一致性保证" class="headerlink" title="11.4 一致性保证"></a>11.4 一致性保证</h2><h2 id="11-5-集群搭建"><a href="#11-5-集群搭建" class="headerlink" title="11.5 集群搭建"></a>11.5 集群搭建</h2><h2 id="11-6-故障转移"><a href="#11-6-故障转移" class="headerlink" title="11.6 故障转移"></a>11.6 故障转移</h2><h1 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h1><h2 id="12-1-缓存穿透"><a href="#12-1-缓存穿透" class="headerlink" title="12.1 缓存穿透"></a>12.1 缓存穿透</h2><h3 id="12-1-1-描述"><a href="#12-1-1-描述" class="headerlink" title="12.1.1 描述"></a>12.1.1 描述</h3><p>用户想要查询某个数据，在 Redis 中查询不到，即没有缓存命中，这时就会直接访问数据库进行查询。当请求量超出数据库最大承载量时，就会导致数据库崩溃。这种情况一般发生在非正常URL 访问，目的不是为了获取数据，而是进行恶意攻击。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231655855.png" alt="image-20220723165525777"></p><h3 id="12-1-2-现象"><a href="#12-1-2-现象" class="headerlink" title="12.1.2 现象"></a>12.1.2 现象</h3><p>1、应用服务器压力变大<br>2、Redis缓存命中率降低<br>3、一直查询数据库</p><h3 id="12-1-3-原因"><a href="#12-1-3-原因" class="headerlink" title="12.1.3 原因"></a>12.1.3 原因</h3><p>一个不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><h3 id="12-1-4-解决"><a href="#12-1-4-解决" class="headerlink" title="12.1.4 解决"></a>12.1.4 解决</h3><ol><li>对空值缓存：如果一个查询数据为空（不管数据是否存在），都对该空结果进行缓存，其过期时间会设置非常短。</li><li>设置可以访问名单：使用bitmaps类型定义一个可以访问名单，名单id作为bitmaps的偏移量，每次访问时与bitmaps中的id进行比较，如果访问id不在bitmaps中，则进行拦截，不允许访问。</li><li>采用布隆过滤器：布隆过滤器可以判断元素是否存在集合中，他的优点是空间效率和查询时间都比一般算法快，缺点是有一定的误识别率和删除困难。</li><li>进行实时监控：当发现 Redis 缓存命中率急速下降时，迅速排查访问对象和访问数据，将其设置为黑名单。</li></ol><h2 id="12-2-缓存击穿"><a href="#12-2-缓存击穿" class="headerlink" title="12.2 缓存击穿"></a>12.2 缓存击穿</h2><h3 id="12-2-1-描述"><a href="#12-2-1-描述" class="headerlink" title="12.2.1 描述"></a>12.2.1 描述</h3><p>key中对应数据存在，当key中对应的数据在缓存中过期，而此时又有大量请求访问该数据，由于缓存中过期了，请求会直接访问数据库并回设到缓存中，高并发访问数据库会导致数据库崩溃。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231655628.png" alt="image-20220723165557546"></p><h3 id="12-2-2-现象"><a href="#12-2-2-现象" class="headerlink" title="12.2.2 现象"></a>12.2.2 现象</h3><p>1、数据库访问压力瞬时增加</p><p>2、Redis中没有出现大量 Key 过期</p><p>3、Redis正常运行</p><p>4、数据库崩溃</p><h3 id="12-2-3-原因"><a href="#12-2-3-原因" class="headerlink" title="12.2.3 原因"></a>12.2.3 原因</h3><p>由于 Redis 中某个 Key 过期，而正好有大量访问使用这个 Key，此时缓存无法命中，因此就会直接访问数据层，导致数据库崩溃。</p><p>最常见的就是非常“热点”的数据访问。</p><h3 id="12-2-4-解决"><a href="#12-2-4-解决" class="headerlink" title="12.2.4 解决"></a>12.2.4 解决</h3><ol><li>预先设置热门数据：在redis高峰访问时期，提前设置热门数据到缓存中，或适当延长缓存中key过期时间。</li><li>实时调整：实时监控哪些数据热门，实时调整key过期时间。</li><li>对于热点key设置永不过期。</li></ol><h2 id="12-3-缓存雪崩"><a href="#12-3-缓存雪崩" class="headerlink" title="12.3 缓存雪崩"></a>12.3 缓存雪崩</h2><h3 id="12-3-1-描述"><a href="#12-3-1-描述" class="headerlink" title="12.3.1 描述"></a>12.3.1 描述</h3><p>key中对应数据存在，在某一时刻，缓存中大量key过期，而此时大量高并发请求访问，会直接访问后端数据库，导致数据库崩溃</p><blockquote><p>注意：缓存击穿是指一个key对应缓存数据过期，缓存雪崩是大部分key对应缓存数据过期。</p></blockquote><p>正常情况下：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231657299.png" alt="image-20220723165704236"></p><p>缓存失效瞬间：</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207231657829.png" alt="image-20220723165712772"></p><h3 id="12-3-2-现象"><a href="#12-3-2-现象" class="headerlink" title="12.3.2 现象"></a>12.3.2 现象</h3><p>1、数据库压力变大导致数据库和 Redis 服务崩溃</p><h3 id="12-3-3-原因"><a href="#12-3-3-原因" class="headerlink" title="12.3.3 原因"></a>12.3.3 原因</h3><p>在极短时间内，查询大量 key 的集中过期数据。</p><h3 id="12-3-4-解决"><a href="#12-3-4-解决" class="headerlink" title="12.3.4 解决"></a>12.3.4 解决</h3><ol><li>构建多级缓存机制：nginx缓存 + redis缓存 + 其他缓存。</li><li>设置过期标志更新缓存：记录缓存数据是否过期，如果过期会触发另外一个线程去在后台更新实时key的缓存。</li><li>将缓存可以时间分散：如在原有缓存时间基础上增加一个随机值，这个值可以在1-5分钟随机，这样过期时间重复率就会降低，防止大量key同时过期。</li><li>使用锁或队列机制：使用锁或队列保证不会有大量线程一次性对数据库进行读写，从而避免大量并发请求访问数据库，该方法不适用于高并发情况。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基本使用及配置Mysql、redis环境</title>
    <link href="/2022/07/20/2022-7-16-Docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/20/2022-7-16-Docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Dokcer命令"><a href="#Dokcer命令" class="headerlink" title="Dokcer命令"></a>Dokcer命令</h1><blockquote><p>本文环境:CentOS7</p></blockquote><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><h3 id="安装一些必要的系统工具"><a href="#安装一些必要的系统工具" class="headerlink" title="安装一些必要的系统工具"></a>安装一些必要的系统工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h3 id="添加软件源信息"><a href="#添加软件源信息" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># docker 官方源</span><br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><span class="hljs-comment"># 阿里云源</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="安装-Docker-ce"><a href="#安装-Docker-ce" class="headerlink" title="安装 Docker-ce"></a>安装 Docker-ce</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装前可以先更新 yum 缓存:</span><br>yum makecache fast<br><span class="hljs-comment"># 安装 Docker-ce (这个是新版本)</span><br>yum install docker-ce<br></code></pre></td></tr></table></figure><h3 id="安装特定版本-Docker"><a href="#安装特定版本-Docker" class="headerlink" title="安装特定版本 Docker"></a>安装特定版本 Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list docker-ce --showduplicates | <span class="hljs-built_in">sort</span> -r<br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.9-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.8-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.7-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.6-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.5-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.4-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.3-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># docker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable </span><br><span class="hljs-comment"># 选择版本安装</span><br>yum install docker-ce-&lt;VERSION STRING&gt;<br><br><span class="hljs-comment"># 选择安装 docker-ce-18.06.1.ce</span><br>yum install docker-ce-18.06.1.ce<br></code></pre></td></tr></table></figure><h3 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 Docker 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker -v<br>--------------------------------------<br>Docker version 20.10.17, build 100c701<br></code></pre></td></tr></table></figure><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><h2 id="查看可用-MySQL-版本"><a href="#查看可用-MySQL-版本" class="headerlink" title="查看可用 MySQL 版本"></a>查看可用 MySQL 版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search mysql<br></code></pre></td></tr></table></figure><h2 id="拉取官方版本镜像"><a href="#拉取官方版本镜像" class="headerlink" title="拉取官方版本镜像"></a>拉取官方版本镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取指定版本</span><br>ocker pull mysql:5.7.14<br><br><span class="hljs-comment"># 或者拉取最新版本</span><br>docker pull mysql:latest<br></code></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h2 id="准备运行-mysql-容器"><a href="#准备运行-mysql-容器" class="headerlink" title="准备运行 mysql 容器"></a>准备运行 mysql 容器</h2><h3 id="1-创建挂载文件夹"><a href="#1-创建挂载文件夹" class="headerlink" title="1.创建挂载文件夹"></a>1.创建挂载文件夹</h3><p>为了避免数据在移除容器的时候丢失，把 MySQL 容器里的目录挂载在服务器的目录上</p><p>如果不是 root 运行 docker 命令，要先创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /usr/local/mysql/data<br><span class="hljs-built_in">mkdir</span> -p /usr/local/mysql/mysql-files<br><span class="hljs-built_in">mkdir</span> -p /usr/local/mysql/conf<br><span class="hljs-built_in">mkdir</span> -p /usr/local/mysql/logs<br></code></pre></td></tr></table></figure><h3 id="2-编写-my-cnf-文件"><a href="#2-编写-my-cnf-文件" class="headerlink" title="2.编写 my.cnf 文件"></a>2.编写 my.cnf 文件</h3><p>在目录<code>/usr/local/docker/mysql/conf</code>里新建文件:<code>my.cnf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/mysql/conf/my.cnf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Apply this config only on the master.</span><br>[client]<br>port = 3306<br>default-character-set = utf8mb4<br><br>[mysql]<br>port = 3306<br>default-character-set = utf8mb4<br><br>[mysqld]<br><span class="hljs-comment"># bind-address = 0.0.0.0</span><br><span class="hljs-comment"># port = 3306</span><br>lower_case_table_names=1<br><br>max_connections=10000<br><br>character-set-server = utf8mb4<br>collation-server = utf8mb4_unicode_ci<br><br><span class="hljs-comment"># 设置时区和字符集</span><br><span class="hljs-comment"># default-time-zone=&#x27;+8:00&#x27;</span><br>character-set-client-handshake=FALSE<br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci&#x27;</span><br><br>gtid-mode=ON<br>enforce-gtid-consistency = ON<br></code></pre></td></tr></table></figure><h3 id="3-启动-MySQL-容器"><a href="#3-启动-MySQL-容器" class="headerlink" title="3.启动 MySQL 容器"></a>3.启动 MySQL 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  \<br>    --restart=always \<br>    --name mysql-test \<br>    -v /usr/local/mysql/conf:/etc/mysql \<br>    -v /usr/local/mysql/data:/var/lib/mysql \<br>    -v /usr/local/mysql/logs:/var/log \<br>    -v /usr/local/mysql/mysql-files:/var/lib/mysql-files \<br>    -p 3306:3306 \<br>    -e MYSQL_ROOT_PASSWORD=root \<br>    -d mysql:5.7.14<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">参数说明:<br>–restart=always <span class="hljs-comment"># 容器在docker启动的时候,mysql容器也会跟着启动</span><br><br>–name mysql-test <span class="hljs-comment"># 给容器取别名</span><br><br>-v /usr/local/mysql/data:/var/lib/mysql <span class="hljs-comment"># 挂载目录,就是把容器的目录挂载到外面</span><br><br>-p 3306:3306 <span class="hljs-comment"># 映射容器服务的 3306 端口到宿主机的 3306 端口,外部主机可以直接通过 宿主机ip: 3306 访问到 MySQL 的服务</span><br><br>-e MYSQL_ROOT_PASSWORD=root <span class="hljs-comment"># 设置 MySQL 服务 root 用户的密码</span><br><br>-d <span class="hljs-comment"># 后台运行  同时指定镜像的版本</span><br></code></pre></td></tr></table></figure><h2 id="查看-MySQL-容器"><a href="#查看-MySQL-容器" class="headerlink" title="查看 MySQL 容器"></a>查看 MySQL 容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps  <span class="hljs-comment"># 显示正在运行的容器</span><br>docker ps -a <span class="hljs-comment"># 显示所有容器包括未运行的</span><br></code></pre></td></tr></table></figure><h2 id="设置MySQL容器开机自启"><a href="#设置MySQL容器开机自启" class="headerlink" title="设置MySQL容器开机自启"></a>设置MySQL容器开机自启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update mysql-test --restart=always  <br><br>or<br><br>docker update --restart=always edd6c56c7291 <span class="hljs-comment"># (最后一项为MySQL容器的CONTAINER ID)</span><br></code></pre></td></tr></table></figure><p>设置 Docker 自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker<br><br>systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><h2 id="查看可用-Redis-版本"><a href="#查看可用-Redis-版本" class="headerlink" title="查看可用 Redis 版本"></a>查看可用 Redis 版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search redis<br></code></pre></td></tr></table></figure><h2 id="拉取官镜像"><a href="#拉取官镜像" class="headerlink" title="拉取官镜像"></a>拉取官镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br><br><span class="hljs-comment"># 可以指定版本号:不加版本号默认获取最新版本</span><br>docker pull redis:6.2.7<br></code></pre></td></tr></table></figure><h2 id="查看本地镜像-1"><a href="#查看本地镜像-1" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h2 id="准备-redis-的配置文件"><a href="#准备-redis-的配置文件" class="headerlink" title="准备 redis 的配置文件"></a>准备 redis 的配置文件</h2><p>redis中文官方网站:<a href="http://www.redis.cn/download.html">http://www.redis.cn/download.html</a></p><p>下载下来后解压，找到 <code>redis.conf</code> 文件</p><h2 id="配置-redis-conf-配置文件"><a href="#配置-redis-conf-配置文件" class="headerlink" title="配置 redis.conf 配置文件"></a>配置 redis.conf 配置文件</h2><p>只需要改下面这些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1 <span class="hljs-comment"># 注释掉这部分，使redis可以外部访问</span><br>protected-mode no   <span class="hljs-comment"># 修改保护模式为no</span><br>daemonize no<span class="hljs-comment"># 用守护线程的方式启动</span><br>requirepass <span class="hljs-comment"># 给redis设置密码，默认没有密码</span><br>appendonly <span class="hljs-built_in">yes</span><span class="hljs-comment"># redis持久化　　默认是no</span><br>tcp-keepalive 300 <span class="hljs-comment"># 防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300</span><br></code></pre></td></tr></table></figure><h2 id="创建本地存放redis的位置"><a href="#创建本地存放redis的位置" class="headerlink" title="创建本地存放redis的位置"></a>创建本地存放redis的位置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建目录</span><br><span class="hljs-built_in">mkdir</span> /usr/local/redis<br><span class="hljs-built_in">mkdir</span> /usr/local/redis/conf<br></code></pre></td></tr></table></figure><p>然后把前面修改的 redis.conf 配置文件拷贝到刚才创建好的 <code>/redis/conf</code> 文件夹下，可以使用 ftp 拷贝过去，或者直接复制内容，然后粘贴过去</p><h2 id="启动-Docker-容器"><a href="#启动-Docker-容器" class="headerlink" title="启动 Docker 容器"></a>启动 Docker 容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>-p 6379:6379 \<br>--name redis-test \<br>-v /usr/local/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-v /usr/local/redis/data:/data \<br>-d redis:6.2.7 redis-server /etc/redis/redis.conf \<br>--appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">参数解释:<br>-p 6379:6379: <span class="hljs-comment"># 把容器内的6379端口映射到宿主机6379端口</span><br>–name redis : <span class="hljs-comment"># 指定该容器名称，查看和进行操作都比较方便</span><br>-v /usr/local/redis/conf/redis.conf:/etc/redis/redis.conf: <span class="hljs-comment"># 把宿主机配置好的redis.conf放到容器内的这个位置中</span><br>-v /usr/local/redis/data:/data:  <span class="hljs-comment"># 把redis持久化的数据在宿主机内显示，做数据备份</span><br>redis-server /etc/redis/redis.conf:  <span class="hljs-comment"># 这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的配置启动</span><br>–appendonly <span class="hljs-built_in">yes</span>: <span class="hljs-comment"># redis启动后数据持久化</span><br></code></pre></td></tr></table></figure><h2 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h2 id="设置Redis容器自动启动"><a href="#设置Redis容器自动启动" class="headerlink" title="设置Redis容器自动启动"></a>设置Redis容器自动启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update redis --restart=always<br></code></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-test /bin/bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Mysql</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2022/07/16/2022-7-13-synchronized/"/>
    <url>/2022/07/16/2022-7-13-synchronized/</url>
    
    <content type="html"><![CDATA[<h1 id="Synchrozined"><a href="#Synchrozined" class="headerlink" title="Synchrozined"></a>Synchrozined</h1><h2 id="Java对象结构"><a href="#Java对象结构" class="headerlink" title="Java对象结构"></a>Java对象结构</h2><blockquote><p><strong>HotSpot虚拟机</strong></p></blockquote><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207140920390.png" alt="图 15-1 64位JVM对象结构描述"></p><p>在 HotSpot虚拟机汇总，对象在内存中的存储布局可以分为三部分：对象头、实例数据、填充数据</p><ul><li>mark-word：对象标记字段，占据四个字节，用于存储一些列的标识位，比如：哈希值、轻量级锁的标记位、偏向锁标记位、分代年龄</li><li>Klass Pointer：Class对象的类型指针，jdk1.8默认开启指针压缩后为4字节，关闭指针压缩后，长度为8字节。它指向的位置是对象对应的Class对象得到内存地址</li><li>对象实际数据：包括对象的所有成员变量，大小由各个成员变量决定，比如：byte占一字节，int占4字节</li><li>对齐：最后这段空间补全并非必须，仅仅为了起到占位符的作用。由于HotSpot虚拟机的内存管理系统要求对象起始地址必须是8字节的整数倍，所以对象头正好是8字节的倍数。因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全</li></ul><p>在 <code>mark-word</code> 锁类型标记中，无锁，偏向锁，轻量锁，重量锁，以及GC标记，5种类中没法用2比特标记（2比特最终有4种组合<code>00</code>、<code>01</code>、<code>10</code>、<code>11</code>），所以无锁、偏向锁，前又占了一位偏向锁标记</p><h2 id="Synchronizedr特性"><a href="#Synchronizedr特性" class="headerlink" title="Synchronizedr特性"></a>Synchronizedr特性</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; <span class="hljs-number">10000</span>; i1++) &#123;<br>                add();<br>            &#125;<br>        &#125;);<br>        thread.start();<br>    &#125;<br>    <span class="hljs-comment">// 等10个线程运行完毕</span><br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    System.out.println(counter);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (AtomicityTest.class) &#123;<br>        counter++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在有 synchronized 时，测试结果可以成功输出 10000</p><p>synchroized 可以保证同一时间只有一个线程能拿到锁，进入代码执行</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">Thread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!sign) &#123;<br>            i++;<br>            add(i);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">Thread02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignore) &#123;<br>        &#125;<br>        sign = <span class="hljs-literal">true</span>;<br>        logger.info(<span class="hljs-string">&quot;vt.sign = true  while (!sign)&quot;</span>)<br>    &#125;);<br>    Thread01.start();<br>    Thread02.start();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span>  <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面的代码也是可以在睡眠三秒后退出，这也就说了 synchronized 具有可见性</p><p><strong>Why</strong></p><ol><li>线程解锁前，必须把共享变量的最新值刷新到主内存中。</li><li>线程加锁前，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值。</li><li>volatile 的可见性都是通过内存屏障（Memnory Barrier）来实现的。</li><li>synchronized 靠操作系统内核互斥锁实现，相当于 JMM 中的 lock、unlock。退出代码块时刷新变量到主内存</li></ol><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p><code>as-if-serial</code>，保证不管编译器和处理器为了性能优化会如何进行指令重排序，都需要保证单线程下的运行结果的正确性。也就是常说的：<strong>如果在本线程内观察，所有的操作都是有序的；如果在一个线程观察另一个线程，所有的操作都是无序的。</strong></p><p>双重检验锁（Double-checked Locking）的案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-keyword">public</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>观察上面代码可以发现，在使用 synchronized 的情况下，我们还使用了 volatile 关键字</p><p>这是因为，synchronized 的有序性，不是 volatile 的<strong>防指令重排序</strong></p><p>那如果不加 volatile 关键字可能导致的结果，就是第一个线程在初始化初始化对象，设置 instance 指向内存地址时。第二个线程进入时，有指令重排。在判断 if (instance &#x3D;&#x3D; null) 时就会有出错的可能，因为这会可能 instance 可能还没有初始化成功</p><h3 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h3><p>synchronized 是可重入锁，也就是说，允许一个线程二次请求自己持有对象锁的临界资源，这种情况称为可重入锁🔒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentryTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ReentryTest</span> <span class="hljs-variable">reentry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentryTest</span>();<br>        reentry.doA();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类方法：ReentryTest.doA() ThreadId：&quot;</span> + Thread.currentThread().getId());<br>        doB();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.doA();<br>        System.out.println(<span class="hljs-string">&quot;子类方法：ReentryTest.doB() ThreadId：&quot;</span> + Thread.currentThread().getId());<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类方法：A.doA() ThreadId：&quot;</span> + Thread.currentThread().getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">子类方法：ReentryTest.doA() ThreadId：<span class="hljs-number">1</span><br>父类方法：A.doA() ThreadId：<span class="hljs-number">1</span><br>子类方法：ReentryTest.doB() ThreadId：<span class="hljs-number">1</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>这段单例代码是递归调用含有 synchronized 锁的方法，从运行正常的测试结果看，并没有发生死锁。所有可以证明 synchronized 是可重入锁。</p><p>synchronized 锁对象的时候有个计数器，他会记录下线程获取锁的次数，在执行完对应的代码块之后，计数器就会-1，直到计数器清零，就释放锁了。</p><p>之所以，是可以重入。是因为 synchronized 锁对象有个计数器，会随着线程获取锁后 +1 计数，当线程执行完毕后 -1，直到清零释放锁</p><h2 id="锁升级过程"><a href="#锁升级过程" class="headerlink" title="锁升级过程"></a>锁升级过程</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207140941334.png" alt="图 15-7 synchronized 锁升级过程"></p><p>synchronized 锁有四种交替升级的状态：无锁、偏向锁、轻量级锁和重量级，这几个状态随着竞争情况逐渐升级</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏斜锁会延缓 JIT 预热进程，所以很多性能测试中会显式地关闭偏斜锁，偏斜锁并不适合所有应用场景，撤销操作（revoke）是比较重的行为，只有当存在较多不会真正竞争的 synchronized 块儿时，才能体现出明显改善</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），JVM虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word</p><h3 id="自选锁"><a href="#自选锁" class="headerlink" title="自选锁"></a>自选锁</h3><p>自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。</p><p>自旋锁的默认大小是10次，可以调整：<code>-XX：PreBlockSpin</code></p><p>如果自旋n次失败了，就会升级为重量级的锁</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3>]]></content>
    
    
    <categories>
      
      <category>Java锁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>synchronized</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile关键字</title>
    <link href="/2022/07/13/2022-7-13-volatile/"/>
    <url>/2022/07/13/2022-7-13-volatile/</url>
    
    <content type="html"><![CDATA[<h1 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1><ul><li>保证可见性</li><li>防止指令重排</li><li>不保证原子性</li></ul><hr><ul><li>volatile 关键字会控制被修饰的变量在内存操作上主动把值刷新到主内存，JVM 会把该线程度对应的 CPU 内存设置过期，从主内存中读取最新值</li><li>volatile 如何防止指令重排也是内存屏障，volatile 的内存屏障是在镀锡操作的前后各添加一个 StroreStore 屏障，也就是四个位置，来保证排序时不能把内存屏障后面的指令重排序到内存屏障之前的位置</li><li>volatile 关键字并不能解决<code>原子性</code>，如果需要解决原子性问题，需要使用 synchronzied 或者 lock</li></ul><h1 id="可见性案例"><a href="#可见性案例" class="headerlink" title="可见性案例"></a>可见性案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">VT</span> <span class="hljs-variable">vt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VT</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">Thread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(vt);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">Thread02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignore) &#123;<br>                &#125;<br>                vt.sign = <span class="hljs-literal">true</span>;<br>                System.out.println(<span class="hljs-string">&quot;vt.sign = true 通知 while (!sign) 结束！&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        Thread01.start();<br>        Thread02.start();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VT</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!sign) &#123;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这段代码</strong>，是两个线程操作一个变量，程序想要的是当 sign 在线程 Thread01 被操作 vt.sign &#x3D; true 时，Thread02 输出 hello</p><p>但是实际上这段代码并不会输出 hello ，而是会一直处于死循环</p><h1 id="加上volatie关键字"><a href="#加上volatie关键字" class="headerlink" title="加上volatie关键字"></a>加上volatie关键字</h1><p>我们给 sign 关键字加上 volatie 关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VT</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!sign) &#123;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你坏&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加上之后 volatile 关键字是 Java 虚拟机提供的最轻量级的同步机制，他最为一个修饰符出现，用来修饰变量，但是整理不包括局部变量</p><p>在添加 volatile 关键字后，程序就符合与其的输出了 hello 。从我们对 volatile 的学习认知可以知道。volatile 关键字是 JVM 提供的最轻量级的同步机制，用来修饰变量，用来<strong>保证变量对所有线程的可见性</strong></p><p>正在修饰后可以让字段在线程见课件，那么这个属性被修改值后，可以及时的在另外的线程中做出相应的反应</p><h1 id="✨volatie怎么保证的可见性"><a href="#✨volatie怎么保证的可见性" class="headerlink" title="✨volatie怎么保证的可见性"></a>✨volatie怎么保证的可见性</h1><p>有 volatie 时的内存变化</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207131407413.png" alt="image-20220713140704279"></p><p>当我们把变量使用 volatile 修饰时，当线程01对变量进行操作时，会把变量变化的值强制刷新到主内存，当线程02获取值时，会把自己的内存里的 sign 值过期掉，之后从主内存中读取，所以添加关键字后程序如预期输出结果</p><h1 id="反编译解读可见性"><a href="#反编译解读可见性" class="headerlink" title="反编译解读可见性"></a>反编译解读可见性</h1><p>编译后的汇编指令中，有 volatile 关键字和没有 volatile 关键字，主要差别在于多了一个 lock addl $0x0,(%rsp)，也就是 lock 的前缀指令。<br>lock 指令相当于一个内存屏障，它保证如下三点：</p><ol><li>将本处理器的缓存写入内存。</li><li>重排序时不能把后面的指令重排序到内存屏障之前的位置。</li><li>如果是写入动作会导致其他处理器中对应的内存无效。</li></ol><p>那么，这里的 1、3 就是用来保证被修饰的变量，保证内存可见性。</p><p><strong>✨总结</strong></p><ul><li>volatile 关键字会控制被修饰的变量在内存操作上主动把值刷新到主内存，JVM 会把该线程度对应的 CPU 内存设置过期，从主内存中读取最新值</li><li>volatile 如何防止指令重排也是内存屏障，volatile 的内存屏障是在镀锡操作的前后各添加一个 StroreStore 屏障，也就是四个位置，来保证排序时不能把内存屏障后面的指令重排序到内存屏障之前的位置</li><li>volatile 关键字并不能解决<code>原子性</code>，如果需要解决原子性问题，需要使用 synchronzied 或者 lock</li></ul><h1 id="不加volatile也可见"><a href="#不加volatile也可见" class="headerlink" title="不加volatile也可见"></a>不加volatile也可见</h1><p>这个地方我们是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VT</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!sign) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你好&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你坏&quot;</span>);<br>    &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>修改后去掉了 <code>volatile</code> 关键字，并在while循环中添加一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>你好<br>你好<br>你好<br>vt.sign = <span class="hljs-literal">true</span> 通知 <span class="hljs-keyword">while</span> (!sign) 结束！<br>你坏<br><br>Process finished with exit code <span class="hljs-number">0</span>   <span class="hljs-number">55555</span><br></code></pre></td></tr></table></figure><p>这个时候输出又变得正常了，也就是线程可见了</p><p>因为 print 方法加了 synchronized 关键字（当然 println 也加了，换行操作也会持有锁）</p><p>而 synchronized 方法也是能保证了该同步块中的变量的可见性的，所以下次 sign从主存中读出 true 就跳出了 while </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String x)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        print(x);<br>        newLine();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>sychronized可以保证变量的可见性</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java锁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>volatile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TreadLoacl源码分析</title>
    <link href="/2022/07/10/2022-7-10-ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/10/2022-7-10-ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="TreadLoacl源码分析"><a href="#TreadLoacl源码分析" class="headerlink" title="TreadLoacl源码分析"></a>TreadLoacl源码分析</h1><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seckillSku</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> f.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 业务流程</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面这样写其实是不对的，因为<code>SimpleDateFormat</code>，并不是一个线程安全的类，也就会导致我们最后格式化出来的数据并不准确</p><h2 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h2><blockquote><p>这个没有了解过</p></blockquote><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br><br>    <span class="hljs-comment">// We don&#x27;t use a fast path as with get() because it is at</span><br>    <span class="hljs-comment">// least as common to use set() to create new entries as</span><br>    <span class="hljs-comment">// it is to replace existing ones, in which case, a fast</span><br>    <span class="hljs-comment">// path would fail more often than not.</span><br><br>    Entry[] tab = table; <span class="hljs-comment">// 数组存放数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>); <span class="hljs-comment">// Hash值计算下标</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>         <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从这部分源码中可以看到，<code>ThreadLocal </code>底层采用的是数组结构存储数据，同时还有哈希值计算下标，这说明它是一个散列表的数组结构</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207101818554.png" alt="image-20220710181846492"></p><ol><li>它是一个数组结构。</li><li>Entry，其实是一个弱引用实现，<code>static class Entryextends WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>。这说明只要没用强引用存在，发生 GC 时就会被垃圾回收。</li><li>数据元素采用哈希散列方式进行存储，不过这里的散列使用的是<strong>斐波那契（Fibonacci）散列法</strong></li><li>另外由于这里不同于 HashMap 的数据结构，发生哈希碰撞不会存成链表或红黑树，而是使用拉链法进行存储。也就是同一个下标位置发生冲突时，则+1 向后寻址，直到找到空位置或垃圾回收位置进行存储</li></ol><h1 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h1><p><code>ThreadLocal </code>是基于数组结构的拉链法存储的，那就一定会有哈希的计算。但我们翻阅源码后，发现这个哈希计算与 HashMap 中的散列求数组下标计算的哈希方式不一样</p><h2 id="神秘的数字0x61c88647"><a href="#神秘的数字0x61c88647" class="headerlink" title="神秘的数字0x61c88647"></a>神秘的数字0x61c88647</h2><blockquote><p>tip：斐波那契（Fibonacci）散列法是根据这个来完成的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HASH_INCREMENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x61c88647</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the next hash code.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextHashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数字 0x61c88647</strong>：这个其实是黄金分割点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 黄金分割点：(√5 - 1) / 2 = 0.6180339887 1.618:1 == 1:0.618</span><br>System.out.println(BigDecimal.valueOf(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>) * <span class="hljs-number">0.6180339887</span>).intValue());<br><span class="hljs-comment">//-1640531527</span><br></code></pre></td></tr></table></figure><ul><li>学过数学都应该知道，黄金分割点是，(√5 - 1) &#x2F; 2，取 10 位近似0.6180339887</li><li>之后用 2 ^ 32 * 0.6180339887，得到的结果是：-1640531527，也就是 16 进制的，0x61c88647。这个数呢也就是这么来的</li></ul><h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;()<br></code></pre></td></tr></table></figure><p>初始化的过程也很简单，可以按照自己需要的泛型进行设置。但在 ThreadLocal 的源码中有一点非常重要 ，就是获取 threadLocal 的哈希值的获取，<code>threadLocalHashCode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">threadLocalHashCode</span> <span class="hljs-operator">=</span> nextHashCode(); <span class="hljs-comment">// 获取hash值</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextHashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></td></tr></table></figure><p>如源码中，只要实例化一个 <code>ThreadLocal </code>，就会获取一个相应的哈希值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_threadLocalHashCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        ThreadLocal&lt;Object&gt; objectThreadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">threadLocalHashCode</span> <span class="hljs-operator">=</span> objectThreadLocal.getClass().getDeclaredField(<span class="hljs-string">&quot;threadLocalHashCode&quot;</span>);<br>        threadLocalHashCode.setAccessible(<span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-string">&quot;objectThreadLocal：&quot;</span> + threadLocalHashCode.get(objectThreadLocal));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">objectThreadLocal：1253254570<br>objectThreadLocal：-1401181199<br>objectThreadLocal：239350328<br>objectThreadLocal：1879881855<br>objectThreadLocal：-774553914<br></code></pre></td></tr></table></figure><p>这个值的获取，也就是计算 <code>ThreadLocalMap</code>，存储数据时，ThreadLocal 的数组下标。只要是这同一个对象，在 set、get 时，就可以设置和获取对应的值</p><h2 id="设置元素"><a href="#设置元素" class="headerlink" title="设置元素"></a>设置元素</h2><p>这个可以看图去理解</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207101825235.png" alt="image-20220710182524106"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br><br>    <span class="hljs-comment">// We don&#x27;t use a fast path as with get() because it is at</span><br>    <span class="hljs-comment">// least as common to use set() to create new entries as</span><br>    <span class="hljs-comment">// it is to replace existing ones, in which case, a fast</span><br>    <span class="hljs-comment">// path would fail more often than not.</span><br><br>    Entry[] tab = table; <span class="hljs-comment">// Entry 是一个弱引用对象的实现类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>); <span class="hljs-comment">// 计算下标</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>         e != <span class="hljs-literal">null</span>;<br>         e = tab[i = nextIndex(i, len)]) &#123; <span class="hljs-comment">// 循环判断元素是否存在</span><br>        ThreadLocal&lt;?&gt; k = e.get();<br><br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>            replaceStaleEntry(key, value, i); <span class="hljs-comment">//   </span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    tab[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value); <span class="hljs-comment">// 存在直接设置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> ++size;<br>    <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        rehash();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p><code>key.threadLocalHashCode &amp; (len-1);</code>，斐波那契散列，计算数组下标</p></li><li><p><code>Entry</code>，是一个弱引用对象的实现类，<code>static class Entry extendsWeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>，所以在没有外部强引用下，会发生<code>GC</code>，删除 <code>key</code></p></li><li><p>for 循环判断元素是否存在，当前下标不存在元素时，直接设置元素 <code>tab[i] =new Entry(key, value); </code></p></li><li><p>如果元素存在，则会判断是否 key 值相等 <code>if (k == key)</code>，相等则更新值</p></li><li><p>如果不相等，就到了我们的 <code>replaceStaleEntry</code>，也就是上面的探测式清理过期元素</p></li></ol><h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>    rehash();<br></code></pre></td></tr></table></figure><p><strong>上面的代码就是判断是否扩容</strong></p><ul><li>首先，进行启发式清理<strong>cleanSomeSlots</strong>，把过期元素清理掉，看空间是否够</li><li>之后，判断<code> sz &gt;= threshold</code>，其中 <code>threshold = len * 2 / 3</code>，也就是说数组中天填充的元素，大于 <code>len * 2 / 3</code>，就需要扩容了。</li><li>最后，就是我们要分析的重点，<code>rehash();</code>，扩容重新计算元素位置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rehash</span><span class="hljs-params">()</span> &#123;<br>    expungeStaleEntries();<br><br>    <span class="hljs-comment">// Use lower threshold for doubling to avoid hysteresis</span><br>    <span class="hljs-keyword">if</span> (size &gt;= threshold - threshold / <span class="hljs-number">4</span>)<br>        resize();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expungeStaleEntries</span><span class="hljs-params">()</span> &#123;<br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; len; j++) &#123;<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[j];<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == <span class="hljs-literal">null</span>)<br>            expungeStaleEntry(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这部分是主要是探测式清理过期元素，以及判断清理后是否满足扩容条件， <code>size &gt;= threshold * 3/4</code></li><li>满足后执行扩容操作，其实扩容完的核心操作就是重新计算哈希值，把元素填充到新的数组中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">()</span> &#123;<br>    Entry[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldLen</span> <span class="hljs-operator">=</span> oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newLen</span> <span class="hljs-operator">=</span> oldLen * <span class="hljs-number">2</span>;<br>    Entry[] newTab = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[newLen];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldLen; ++j) &#123;<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> oldTab[j];<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>                e.value = <span class="hljs-literal">null</span>; <span class="hljs-comment">// Help the GC</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> k.threadLocalHashCode &amp; (newLen - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">while</span> (newTab[h] != <span class="hljs-literal">null</span>)<br>                    h = nextIndex(h, newLen);<br>                newTab[h] = e;<br>                count++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    setThreshold(newLen);<br>    size = count;<br>    table = newTab;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>首先把数组长度扩容到原来的 2 倍，<code>oldLen * 2</code>，实例化新数组</p></li><li><p>遍历 for，所有的旧数组中的元素，重新放到新数组中</p></li><li><p>在放置数组的过程中，如果发生哈希碰撞，则链式法顺延</p></li><li><p>同时这还有检测 key 值的操作 <code>if (k == null)</code>，方便 GC</p></li></ol><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207101917480.png" alt="image-20220710191734400"></p><p>按照不同的数据元素存储情况，基本包括如下情况；</p><ol><li>直接定位到，没有哈希冲突，直接返回元素即可。</li><li>没有直接定位到了，key 不同，需要拉链式寻找。</li><li>没有直接定位到了，key 不同，拉链式寻找，遇到 GC 清理元素，需要探测式清理，再寻找元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Entry <span class="hljs-title function_">getEntryAfterMiss</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, <span class="hljs-type">int</span> i, Entry e)</span> &#123;<br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br><br>    <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-keyword">if</span> (k == key)<br>            <span class="hljs-keyword">return</span> e;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>)<br>            expungeStaleEntry(i);<br>        <span class="hljs-keyword">else</span><br>            i = nextIndex(i, len);<br>        e = tab[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="元素清理"><a href="#元素清理" class="headerlink" title="元素清理"></a>元素清理</h2><p><strong>探测式清理</strong></p><p>探测式清理，是以当前遇到的 GC 元素开始，向后不断的清理。直到遇到 null为止，才停止 rehash 计算 Rehash until we encounter null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">expungeStaleEntry</span><span class="hljs-params">(<span class="hljs-type">int</span> staleSlot)</span> &#123;<br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br><br>    <span class="hljs-comment">// expunge entry at staleSlot</span><br>    tab[staleSlot].value = <span class="hljs-literal">null</span>;<br>    tab[staleSlot] = <span class="hljs-literal">null</span>;<br>    size--;<br><br>    <span class="hljs-comment">// Rehash until we encounter null</span><br>    Entry e;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = nextIndex(staleSlot, len);<br>         (e = tab[i]) != <span class="hljs-literal">null</span>;<br>         i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>            e.value = <span class="hljs-literal">null</span>;<br>            tab[i] = <span class="hljs-literal">null</span>;<br>            size--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> k.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (h != i) &#123;<br>                tab[i] = <span class="hljs-literal">null</span>;<br><br>                <span class="hljs-comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span><br>                <span class="hljs-comment">// null because multiple entries could have been stale.</span><br>                <span class="hljs-keyword">while</span> (tab[h] != <span class="hljs-literal">null</span>)<br>                    h = nextIndex(h, len);<br>                tab[h] = e;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>探测式清理在获取元素中使用到； new ThreadLocal&lt;&gt;().get() -&gt;  map.getEntry(this) -&gt; getEntryAfterMiss(key, i, e) -&gt; expungeStaleEntry(i)</p><p><strong>启发式清理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Heuristically scan some cells looking for stale entries.</span><br><span class="hljs-comment"> * This is invoked when either a new element is added, or</span><br><span class="hljs-comment"> * another stale one has been expunged. It performs a</span><br><span class="hljs-comment"> * logarithmic number of scans, as a balance between no</span><br><span class="hljs-comment"> * scanning (fast but retains garbage) and a number of scans</span><br><span class="hljs-comment"> * proportional to number of elements, that would find all</span><br><span class="hljs-comment"> * garbage but would cause some insertions to take O(n) time.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i a position known NOT to hold a stale entry. The</span><br><span class="hljs-comment"> * scan starts at the element after i.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n scan control: &#123;<span class="hljs-doctag">@code</span> log2(n)&#125; cells are scanned,</span><br><span class="hljs-comment"> * unless a stale entry is found, in which case</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> log2(table.length)-1&#125; additional cells are scanned.</span><br><span class="hljs-comment"> * When called from insertions, this parameter is the number</span><br><span class="hljs-comment"> * of elements, but when from replaceStaleEntry, it is the</span><br><span class="hljs-comment"> * table length. (Note: all this could be changed to be either</span><br><span class="hljs-comment"> * more or less aggressive by weighting n instead of just</span><br><span class="hljs-comment"> * using straight log n. But this version is simple, fast, and</span><br><span class="hljs-comment"> * seems to work well.)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true if any stale entries have been removed.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cleanSomeSlots</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-keyword">do</span> &#123;<br>        i = nextIndex(i, len);<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == <span class="hljs-literal">null</span>) &#123; <br>            n = len;<br>            removed = <span class="hljs-literal">true</span>;<br>            i = expungeStaleEntry(i);<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> ( (n &gt;&gt;&gt;= <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> removed;<br>&#125;<br></code></pre></td></tr></table></figure><p>启发式清理，有这么一段注释，大概意思是；试探的扫描一些单元格，寻找过期元素，也就是被垃圾回收的元素。当添加新元素或删除另一个过时元素时，将调<br>用此函数。它执行对数扫描次数，作为不扫描（快速但保留垃圾）和与元素数量成比例的扫描次数之间的平衡，这将找到所有垃圾，但会导致一些插入花费 O（n）时间</p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>TreadLoacl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring复习笔记</title>
    <link href="/2022/07/10/2022-7-10-%20Spring%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/07/10/2022-7-10-%20Spring%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring复习笔记"><a href="#Spring复习笔记" class="headerlink" title="Spring复习笔记"></a>Spring复习笔记</h1><p>Spring 这个框架是用于整合其它框架所使用的。官网地址：<a href="https://spring.io/">https://spring.io/</a></p><p>Spring 框架的核心是 DI&#x2F;IoC，AOP，事务管理。</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111814592.png" alt="image-20220711181439482"></p><p>Spring中所有对象都是 Bean 对象。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1. 依赖注入"></a>1. 依赖注入</h2><p>依赖注入（Dependency Injection, DI），它在 Spring 中是通过工厂及配置文件来实现，目的是为了给对象的成员进行赋值。</p><p>在不使用依赖注入时是这样给成员对象赋值的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setId(<span class="hljs-number">1</span>);<br>user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br></code></pre></td></tr></table></figure><p>也就是说是先创建对象，然后调用对象成员的 set 方法来给成员对象赋值。</p><p>如果使用依赖注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xianoupeng.entity.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用依赖注入有什么好处？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 解耦，以前是我们手动new对象，这叫硬编码。使用了配置方式后，就不用我们硬编码了，创建对象的时机是交给Spring框架来完成。<br><span class="hljs-bullet">2.</span> 灵活<br></code></pre></td></tr></table></figure><h2 id="2-控制反转"><a href="#2-控制反转" class="headerlink" title="2. 控制反转"></a>2. 控制反转</h2><p>控制反转（Inversion of Control, IoC），它是核心，指的是对象成员变量的赋值的控制权由原来我们自己创建现在变为交给 Spring 来创建。</p><h2 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3. 常用注解"></a>3. 常用注解</h2><h3 id="3-1-Configuration"><a href="#3-1-Configuration" class="headerlink" title="3.1 @Configuration"></a>3.1 @Configuration</h3><p>它是标注在类上的，被它标注的类就是一个配置类，它的使用就相当于 applicationContext.xml 文件的作用。</p><h3 id="3-2-Component"><a href="#3-2-Component" class="headerlink" title="3.2 @Component"></a>3.2 @Component</h3><p>这个注解是让 Spring 容器在加载时自动会添加到容器里面的注解。它也是标注在类上的。它在 Spring 容器中就相当于一个 Bean 标签。</p><h3 id="3-3-Reponstory"><a href="#3-3-Reponstory" class="headerlink" title="3.3 @Reponstory"></a>3.3 @Reponstory</h3><p>这个注解的作用也 @Component 这个注解的作用和功能一样。但从语义层面来说，这个注解是用于数据访问层，而 @Component 常用于层次不态明确或没有层次的地方。</p><h3 id="3-4-Service"><a href="#3-4-Service" class="headerlink" title="3.4 @Service"></a>3.4 @Service</h3><p>这个注解的作用也 @Component 这个注解的作用和功能一样。但从语义层面来说，这个注解是用于业务逻辑层。</p><h3 id="3-5-Controller"><a href="#3-5-Controller" class="headerlink" title="3.5 @Controller"></a>3.5 @Controller</h3><p>这个注解的作用也 @Component 这个注解的作用和功能一样。但从语义层面来说，这个注解是用于访问控制层。</p><h3 id="3-6-Bean"><a href="#3-6-Bean" class="headerlink" title="3.6 @Bean"></a>3.6 @Bean</h3><p>它是标注在一个方法上的，这个注解可以给它一个 name 属性，用于给这个 Bean 对象取一个唯一的名称，便于调用。如果没有给定 name 属性，那么被这个注解所标注的方法所对应的名称就是方法名称。</p><h3 id="3-7-Autowired"><a href="#3-7-Autowired" class="headerlink" title="3.7 @Autowired"></a>3.7 @Autowired</h3><p>这个注解可以添加到成员属性、方法参数、构造方法上。它的作用是把被标注的对象进行自动注入（装配）。被它注解的对象默认是按照类型来自动装配。如果希望按照名称来进行自动装配，那么要接合 @Qualifier 注解一起使用。</p><h3 id="3-8-Qualifier"><a href="#3-8-Qualifier" class="headerlink" title="3.8 @Qualifier"></a>3.8 @Qualifier</h3><p>它的作用是配合 @Autowired 注解来按名称进行装配，它不能独立使用。如果希望能够独立使用，则只能放到参数列表中。</p><h3 id="3-9-Value"><a href="#3-9-Value" class="headerlink" title="3.9 @Value"></a>3.9 @Value</h3><p>这个注解的作用是对基本数据类型和字符串类型进行注入值。</p><h3 id="3-10-ComponentScan"><a href="#3-10-ComponentScan" class="headerlink" title="3.10 @ComponentScan"></a>3.10 @ComponentScan</h3><p>这个注解是用于类上的，它的作用是对指定名路径进行扫描。</p><h3 id="3-11-PropertySource"><a href="#3-11-PropertySource" class="headerlink" title="3.11 @PropertySource"></a>3.11 @PropertySource</h3><p>这个注解的作用加载 .properties 文件中的配置。</p><p>定义 jdbc.properties 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p>定义配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>这个注解是用于标注在类上的，作用是导入其它的配置类，它是可以一次导入多个配置类。</p><p>配置类 A：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigA</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>配置类 B：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigB</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>主配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;ConfigA.class, ConfigB.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Configure</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1. 创建工程"></a>1. 创建工程</h2><p> <img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111814386.png" alt="image-20220711181430312"></p><h2 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h2><p>在 pom.xml 文件中添加如下的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3. 编写配置文件"></a>3. 编写配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xianoupeng.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;刘备&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xianoupeng.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-编写实现类"><a href="#4-编写实现类" class="headerlink" title="4. 编写实现类"></a>4. 编写实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTest</span> &#123;<br>    <span class="hljs-comment">//@Autowired</span><br>    <span class="hljs-comment">//private ApplicationContext context;</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><br>        <span class="hljs-comment">//UserDao userDao = context.getBean(UserDao.class);</span><br>        userDao.save(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>().setId(<span class="hljs-number">100</span>).setName(<span class="hljs-string">&quot;张飞&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="核心容器类"><a href="#核心容器类" class="headerlink" title="核心容器类"></a>核心容器类</h1><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h2><p>Spring中Bean的创建是典型的工厂模式，一系列的 Bean 工厂，即 IoC容器，为开发者提供了管理对象之间的依赖关系。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111814409.png" alt="image-20220711181420309"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">FACTORY_BEAN_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&amp;&quot;</span>;<br><br>    Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>    &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String var1, Class&lt;T&gt; var2)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>    Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String var1, Object... var2)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>    &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; var1)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>    &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; var1, Object... var2)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>    &lt;T&gt; ObjectProvider&lt;T&gt; <span class="hljs-title function_">getBeanProvider</span><span class="hljs-params">(Class&lt;T&gt; var1)</span>;<br><br>    &lt;T&gt; ObjectProvider&lt;T&gt; <span class="hljs-title function_">getBeanProvider</span><span class="hljs-params">(ResolvableType var1)</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsBean</span><span class="hljs-params">(String var1)</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrototype</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTypeMatch</span><span class="hljs-params">(String var1, ResolvableType var2)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTypeMatch</span><span class="hljs-params">(String var1, Class&lt;?&gt; var2)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;<br><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getType(String var1) <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;<br><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getType(String var1, <span class="hljs-type">boolean</span> var2) <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;<br><br>    String[] getAliases(String var1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-BeanDefinition"><a href="#2-BeanDefinition" class="headerlink" title="2. BeanDefinition"></a>2. BeanDefinition</h2><p>它是 Spring IoC 容器管理我们定义的各种 Bean 对象及其相互之间的关系。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111814787.png" alt="image-20220711181408682"></p><h2 id="3-BeanDefinitionReader"><a href="#3-BeanDefinitionReader" class="headerlink" title="3. BeanDefinitionReader"></a>3. BeanDefinitionReader</h2><p>Bean 的解析过程非常复杂，功能被分解得很细，因为这里需要被扩展的地方很多，必须保证足够的灵活性，以应对可能发生的变化。</p><h1 id="IoC源码"><a href="#IoC源码" class="headerlink" title="IoC源码"></a>IoC源码</h1><p>ApplicatoinContext 允许下下文嵌套，通过保持父上下文就可以维持一个上下文关系。</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>通过 ClassPathXmlApplicationContext 请求配置文件的地方来进入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>先看这个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathXmlApplicationContext</span><span class="hljs-params">(String configLocation)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;configLocation&#125;, <span class="hljs-literal">true</span>, (ApplicationContext)<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其实调用的是本类中的另一个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathXmlApplicationContext</span><span class="hljs-params">(String[] configLocations, <span class="hljs-type">boolean</span> refresh, <span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.setConfigLocations(configLocations);<br>    <span class="hljs-keyword">if</span> (refresh) &#123;<br>        <span class="hljs-built_in">this</span>.refresh();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个构造器中，最关键的代码是 <code>this.refresh();</code></p><p>点击这个方法，会进入到 AbstractApplicaitonContext 类中的 refresh() 方法中。</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//....省略</span><br>    <br>    <span class="hljs-comment">// 加载资源并进行解析</span><br>    <span class="hljs-built_in">this</span>.resourcePatternResolver = <span class="hljs-built_in">this</span>.getResourcePatternResolver();<br>&#125;<br></code></pre></td></tr></table></figure><p>点击这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> ResourcePatternResolver <span class="hljs-title function_">getResourcePatternResolver</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>点击这个方法，进入 PathMatchingResourcePatternResolver 类中的有参构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">PathMatchingResourcePatternResolver</span><span class="hljs-params">(ResourceLoader resourceLoader)</span> &#123;<br>    Assert.notNull(resourceLoader, <span class="hljs-string">&quot;ResourceLoader must not be null&quot;</span>);<br>    <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个构造器中设置了 Spring 资源加载器。</p><p>设置了容器的资源加载器后，我们就要进入到 ClassPathXmlApplicationContext 类中的 setConfigLocations() 方法中，通过调用其父类 AbstractRefreshableConfigApplicationContext 的方法进行 Bean 配置信息的定位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConfigLocations</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String... locations)</span> &#123;<br>    <span class="hljs-keyword">if</span> (locations != <span class="hljs-literal">null</span>) &#123;<br>        Assert.noNullElements(locations, <span class="hljs-string">&quot;Config locations must not be null&quot;</span>);<br>        <span class="hljs-built_in">this</span>.configLocations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[locations.length];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; locations.length; ++i) &#123;<br>            <span class="hljs-built_in">this</span>.configLocations[i] = <span class="hljs-built_in">this</span>.resolvePath(locations[i]).trim();<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.configLocations = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>Spring 容器对 Bean 配置资源的载入是从 refresh() 方法开始的。它是一个模板方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br>        <span class="hljs-type">StartupStep</span> <span class="hljs-variable">contextRefresh</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br>        <span class="hljs-comment">// 1. 调用容器准备刷新的方法，获取容器的当前时间，同时给容器设置同步标识</span><br>        <span class="hljs-built_in">this</span>.prepareRefresh();<br>        <span class="hljs-comment">// 2. 告诉子类启动 refreshBeanFactory() 方法，Bean 定义资源文件的加载从它的子类的 refreshBeanFactory() 启动</span><br>        <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.obtainFreshBeanFactory();<br>        <span class="hljs-comment">// 3. 为 BeanFactory 配置容器特性，例如类加载器、事件处理器等</span><br>        <span class="hljs-built_in">this</span>.prepareBeanFactory(beanFactory);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 4. 为容器的某些子类指定特殊的 post 事件处理器</span><br>            <span class="hljs-built_in">this</span>.postProcessBeanFactory(beanFactory);<br>            <span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanPostProcess</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br>            <span class="hljs-comment">// 5. 调用所有注册的 BeanFactoryPostProcessor 的 Bean</span><br>            <span class="hljs-built_in">this</span>.invokeBeanFactoryPostProcessors(beanFactory);<br>            <span class="hljs-comment">// 6. 为 BeanPost 注册 Post 事件处理器</span><br>            <span class="hljs-built_in">this</span>.registerBeanPostProcessors(beanFactory);<br>            beanPostProcess.end();<br>            <span class="hljs-comment">// 7. 初始化信息源，如国际化相关</span><br>            <span class="hljs-built_in">this</span>.initMessageSource();<br>            <span class="hljs-comment">// 8. 初始化容器事件传播器</span><br>            <span class="hljs-built_in">this</span>.initApplicationEventMulticaster();<br>            <span class="hljs-comment">// 9. 调用子类的某些特殊 Bean 的初始化方法</span><br>            <span class="hljs-built_in">this</span>.onRefresh();<br>            <span class="hljs-comment">// 10. 为事件传播器注册事件监听器</span><br>            <span class="hljs-built_in">this</span>.registerListeners();<br>            <span class="hljs-comment">// 11. 初始化所有剩余的单例 Bean</span><br>            <span class="hljs-built_in">this</span>.finishBeanFactoryInitialization(beanFactory);<br>            <span class="hljs-comment">// 12. 初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span><br>            <span class="hljs-built_in">this</span>.finishRefresh();<br>        &#125; <span class="hljs-keyword">catch</span> (BeansException var10) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isWarnEnabled()) &#123;<br>                <span class="hljs-built_in">this</span>.logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var10);<br>            &#125;<br><span class="hljs-comment">// 13. 销毁已创建的 Bean</span><br>            <span class="hljs-built_in">this</span>.destroyBeans();<br>            <span class="hljs-comment">// 14. 取消刷新操作，重置容器的同步标识</span><br>            <span class="hljs-built_in">this</span>.cancelRefresh(var10);<br>            <span class="hljs-keyword">throw</span> var10;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 15. 重置公共缓存</span><br>            <span class="hljs-built_in">this</span>.resetCommonCaches();<br>            contextRefresh.end();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法，就完全包含了 Bean 的完整生命周期方法。</p><p>点击 <code>obtainFreshBeanFactory()</code> 这个方法，进入 AbstractApplicationContext 类中的 obtainFreshBeanFactory() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> ConfigurableListableBeanFactory <span class="hljs-title function_">obtainFreshBeanFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 使用了委派模式，父类定义了抽象的 refreshBeanFactory() 方法，具体的实现子类来完成。</span><br>    <span class="hljs-built_in">this</span>.refreshBeanFactory();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getBeanFactory();<br>&#125;<br></code></pre></td></tr></table></figure><p>进入 refreshBeanFactory() 方法，进入 AbstractRefreshableApplicationContext 类中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-comment">// 如果已经有容器，则销毁容器中的 Bean，然后关闭容器</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasBeanFactory()) &#123;<br>        <span class="hljs-built_in">this</span>.destroyBeans();<br>        <span class="hljs-built_in">this</span>.closeBeanFactory();<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建 IoC 容器</span><br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.createBeanFactory();<br>        beanFactory.setSerializationId(<span class="hljs-built_in">this</span>.getId());<br>        <span class="hljs-comment">// 对 IoC 容器进行定制化，如设置启动参数、开启注解的自动装配等。</span><br>        <span class="hljs-built_in">this</span>.customizeBeanFactory(beanFactory);<br>        <span class="hljs-comment">// 调用 Bean 定义的方法，也是使用委派模式，当类中定义了抽象的 loadBeanDefinitions() 方法时，调用子类容器实现</span><br>        <span class="hljs-built_in">this</span>.loadBeanDefinitions(beanFactory);<br>        <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException var2) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<span class="hljs-string">&quot;I/O error parsing bean definition source for &quot;</span> + <span class="hljs-built_in">this</span>.getDisplayName(), var2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="载入配置路径"><a href="#载入配置路径" class="headerlink" title="载入配置路径"></a>载入配置路径</h2><p>点击 <code>loadBeanDefinitions()</code> 这个方法并进入 AbstractXmlApplicationContext 类中的 loadBeanDefinitions() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException, IOException &#123;<br>    <span class="hljs-comment">// 创建 XmlBeanDefinitionReader 对象，用于读取 Bean 信息，并通过回调设置到容器中，容器使用该读取器读取 Bean 配置资源</span><br>    <span class="hljs-type">XmlBeanDefinitionReader</span> <span class="hljs-variable">beanDefinitionReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanDefinitionReader</span>(beanFactory);<br>    <span class="hljs-comment">// 为 Bean 对象设置资源加载器</span><br>    beanDefinitionReader.setEnvironment(<span class="hljs-built_in">this</span>.getEnvironment());<br>    beanDefinitionReader.setResourceLoader(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 为 Bean 读取器设置 SAX xml 解析器</span><br>    beanDefinitionReader.setEntityResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceEntityResolver</span>(<span class="hljs-built_in">this</span>));<br>    <span class="hljs-comment">// 为 Bean 读取器读取 Bean 定义的 xml 资源文件时启动 xml 校验机制</span><br>    <span class="hljs-built_in">this</span>.initBeanDefinitionReader(beanDefinitionReader);<br>    <span class="hljs-comment">// Bean 读取器真正实现加载的方法</span><br>    <span class="hljs-built_in">this</span>.loadBeanDefinitions(beanDefinitionReader);<br>&#125;<br></code></pre></td></tr></table></figure><p>再次点击 <code>loadBeanDefinitions()</code> 进入本类中的另一个方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(XmlBeanDefinitionReader reader)</span> <span class="hljs-keyword">throws</span> BeansException, IOException &#123;<br>    <span class="hljs-comment">// 读取 Bean 配置资源定位</span><br>    Resource[] configResources = <span class="hljs-built_in">this</span>.getConfigResources();<br>    <span class="hljs-keyword">if</span> (configResources != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// xml Bean 读取器调用父类 AbstractBeanDefinitionReader 中读取定位的 Bean 资源方法</span><br>        reader.loadBeanDefinitions(configResources);<br>    &#125;<br><span class="hljs-comment">// 如果子类中获取的 Bean 配置资源为空，则获取 AbstractRefreshableConfigApplicationContext 构造器方法中setConfigLocations() 方法配置的资源 </span><br>    String[] configLocations = <span class="hljs-built_in">this</span>.getConfigLocations();<br>    <span class="hljs-keyword">if</span> (configLocations != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// xml Bean 读取器调用其父类中的 AbstractBeanDefinitionReader 中读取定位的 Bean 资源方法</span><br>        reader.loadBeanDefinitions(configLocations);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过查看上面的源码可以发现，不管在 Bean 是否读取到 Bean 定位资源，最终都会执行父类 AbstractBeanDefinitionReader 中的 loadBeanDefinitions() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(String... locations)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br>    Assert.notNull(locations, <span class="hljs-string">&quot;Location array must not be null&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (String location : locations) &#123;<br>        count += loadBeanDefinitions(location);<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中统计资源的个数，同时也再次调用了 <code>loadBeanDefinitions()</code> 方法，点击后进入到本类中的同名方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(String location)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br>    <span class="hljs-keyword">return</span> loadBeanDefinitions(location, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再次进入 <code>loadBeanDefinitions()</code> 方法，进入本类中另一个同名的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(String location, <span class="hljs-meta">@Nullable</span> Set&lt;Resource&gt; actualResources)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br>    <span class="hljs-comment">// 获取在 IoC 容器初始化过程中设置的资源加载器</span><br>    <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> getResourceLoader();<br>    <span class="hljs-keyword">if</span> (resourceLoader == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(<br>            <span class="hljs-string">&quot;Cannot load bean definitions from location [&quot;</span> + location + <span class="hljs-string">&quot;]: no ResourceLoader available&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (resourceLoader <span class="hljs-keyword">instanceof</span> ResourcePatternResolver) &#123;<br>        <span class="hljs-comment">// 资源模式匹配</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将指定位置的 Bean 配置信息解析为 Spring IoC 容器封装的资源，加载多个指定的 Bean 配置信息</span><br>            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);<br>            <span class="hljs-comment">// 使用委派模式，调用其子类的 XmlBeanDefinitionReader 的方法，实现加载功能</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> loadBeanDefinitions(resources);<br>            <br>            <span class="hljs-comment">//......省略</span><br>            <br>            <span class="hljs-keyword">return</span> count;<br>        &#125;<br>        <span class="hljs-comment">//.....省略</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 将指定位置的 Bean 配置信息解析为 Spring IoC 容器封装的资源，加载单个指定位置的 Bean 配置信息</span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(location);<br>        <span class="hljs-comment">// 使用委派模式，调用其子类的 XmlBeanDefinitionReader 的方法，实现加载功能</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> loadBeanDefinitions(resource);<br>        <br>        <span class="hljs-comment">//......省略</span><br>        <br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次进入 <code>loadBeanDefinitions()</code>，进入 XmlBeanDefinitionReader 类中的 loadBeanDefinitions()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(Resource resource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br>    <span class="hljs-keyword">return</span> loadBeanDefinitions(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EncodedResource</span>(resource));<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中又调用了本类中的 <code>loadBeanDefinitions()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(EncodedResource encodedResource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br>    <span class="hljs-comment">//.....省略</span><br><br>    <span class="hljs-comment">// 获取 Resource 对象 转换为 XML 文件流对象</span><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> encodedResource.getResource().getInputStream()) &#123;<br>        <span class="hljs-comment">// 将流转换成 InputSource</span><br>        <span class="hljs-type">InputSource</span> <span class="hljs-variable">inputSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream);<br>        <span class="hljs-keyword">if</span> (encodedResource.getEncoding() != <span class="hljs-literal">null</span>) &#123;<br>            inputSource.setEncoding(encodedResource.getEncoding());<br>        &#125;<br>        <span class="hljs-comment">// 加载</span><br>        <span class="hljs-keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());<br>    &#125;<br>    <span class="hljs-comment">//.....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>点击 <code>doLoadBeanDefinitions()</code> 方法并进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doLoadBeanDefinitions</span><span class="hljs-params">(InputSource inputSource, Resource resource)</span><br>    <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 将 Resource 转成 Document 对象</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> doLoadDocument(inputSource, resource);<br>        <span class="hljs-comment">// 解析 Document 对象</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> registerBeanDefinitions(doc, resource);<br>        <br>        <span class="hljs-comment">//....省略</span><br>        <br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-comment">//......省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>registerBeanDefinitions()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(Document doc, Resource resource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br>    <span class="hljs-comment">// 创建 Document 解析器进行解析</span><br>    <span class="hljs-type">BeanDefinitionDocumentReader</span> <span class="hljs-variable">documentReader</span> <span class="hljs-operator">=</span> createBeanDefinitionDocumentReader();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">countBefore</span> <span class="hljs-operator">=</span> getRegistry().getBeanDefinitionCount();<br>    <span class="hljs-comment">// 用 Document解析器进行解析</span><br>    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));<br>    <span class="hljs-keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h2><p>进入 <code>registerBeanDefinitions()</code>这个方法会进入 BeanDefinitionDocumentReader 接口类中的 registerBeanDefinitions 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BeanDefinitionDocumentReader</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(Document doc, XmlReaderContext readerContext)</span><br><span class="hljs-keyword">throws</span> BeanDefinitionStoreException;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后找到这个接口的子类 BeanDefinitionDocumentReader 对应的方法并进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(Document doc, XmlReaderContext readerContext)</span> &#123;<br>    <span class="hljs-built_in">this</span>.readerContext = readerContext;<br>    <span class="hljs-comment">// 解析 XML 中配置的信息，并存入到 BeanDefinition对象中</span><br>    doRegisterBeanDefinitions(doc.getDocumentElement());<br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>doRegisterBeanDefinitions()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRegisterBeanDefinitions</span><span class="hljs-params">(Element root)</span> &#123;<br><span class="hljs-comment">// ....省略</span><br><br>    <span class="hljs-comment">// 处理（解析）XML配置文件之前的操作</span><br>preProcessXml(root);<br><span class="hljs-comment">// 解析</span><br>parseBeanDefinitions(root, <span class="hljs-built_in">this</span>.delegate);<br>postProcessXml(root);<br><br><span class="hljs-built_in">this</span>.delegate = parent;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中最核心的就是 <code>parseBeanDefinitions()</code> 方法，进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseBeanDefinitions</span><span class="hljs-params">(Element root, BeanDefinitionParserDelegate delegate)</span> &#123;<br>    <span class="hljs-keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;<br>        <span class="hljs-type">NodeList</span> <span class="hljs-variable">nl</span> <span class="hljs-operator">=</span> root.getChildNodes();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nl.item(i);<br>            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element) &#123;<br>                <span class="hljs-type">Element</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> (Element) node;<br>                <span class="hljs-keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;<br>                    <span class="hljs-comment">// 默认标签解析</span><br>                    parseDefaultElement(ele, delegate);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 自定义标签解析</span><br>                    delegate.parseCustomElement(ele);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        delegate.parseCustomElement(root);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>parseDefaultElement()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseDefaultElement</span><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;<br>    <span class="hljs-comment">// import 标签</span><br>    <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;<br>        importBeanDefinitionResource(ele);<br>    &#125;<br>    <span class="hljs-comment">// alias 标签</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;<br>        processAliasRegistration(ele);<br>    &#125;<br>    <span class="hljs-comment">// bean 标签</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;<br>        processBeanDefinition(ele, delegate);<br>    &#125;<br>    <span class="hljs-comment">// beans 标签</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;<br>        <span class="hljs-comment">// recurse</span><br>        doRegisterBeanDefinitions(ele);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们以解析 <code>&lt;bean&gt;</code> 标签为例，进入 <code>processBeanDefinition()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBeanDefinition</span><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;<br><span class="hljs-comment">// 将 Element 封装成 BeanDefinition</span><br><span class="hljs-type">BeanDefinitionHolder</span> <span class="hljs-variable">bdHolder</span> <span class="hljs-operator">=</span> delegate.parseBeanDefinitionElement(ele);<br><span class="hljs-keyword">if</span> (bdHolder != <span class="hljs-literal">null</span>) &#123;<br>bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 向Spring IoC 容器注册解析得到的 Bean 定义，这是 Bean 定义向 IoC 容器注册入口</span><br>BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());<br>&#125;<br><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;<br>getReaderContext().error(<span class="hljs-string">&quot;Failed to register bean definition with name &#x27;&quot;</span> +<br>bdHolder.getBeanName() + <span class="hljs-string">&quot;&#x27;&quot;</span>, ele, ex);<br>&#125;<br><span class="hljs-comment">// 在完成向 Spring IoC 容器注册解析得到的 Bean 定义之后，发送注册事件</span><br>getReaderContext().fireComponentRegistered(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComponentDefinition</span>(bdHolder));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击 <code>parseBeanDefinitionElement()</code> 方法并进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> BeanDefinitionHolder <span class="hljs-title function_">parseBeanDefinitionElement</span><span class="hljs-params">(Element ele)</span> &#123;<br>    <span class="hljs-keyword">return</span> parseBeanDefinitionElement(ele, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再点击进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> BeanDefinitionHolder <span class="hljs-title function_">parseBeanDefinitionElement</span><span class="hljs-params">(Element ele, <span class="hljs-meta">@Nullable</span> BeanDefinition containingBean)</span> &#123;<br>    <span class="hljs-comment">// 获取&lt;bean&gt;元素中的 id 属性</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> ele.getAttribute(ID_ATTRIBUTE);<br>    <span class="hljs-comment">// 获取&lt;bean&gt;元素中的 name 属性</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">nameAttr</span> <span class="hljs-operator">=</span> ele.getAttribute(NAME_ATTRIBUTE);<br><span class="hljs-comment">// 获取&lt;bean&gt;元素中的 alias 属性</span><br>    List&lt;String&gt; aliases = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 将 &lt;bean&gt; 元素中的所有 name 属性值存放到别名中</span><br>    <span class="hljs-keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;<br>        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);<br>        aliases.addAll(Arrays.asList(nameArr));<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> id;<br>    <span class="hljs-comment">// 如果 &lt;bean&gt; 元素中没有配置 id 属性，将别名中的第一个值赋给 beanName</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;<br>        beanName = aliases.remove(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No XML &#x27;id&#x27; specified - using &#x27;&quot;</span> + beanName +<br>                         <span class="hljs-string">&quot;&#x27; as bean name and &quot;</span> + aliases + <span class="hljs-string">&quot; as aliases&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 检查 &lt;bean&gt; 元素所配置的 id 或者 name 的唯一性</span><br>    <span class="hljs-comment">// containingBean 标识 &lt;bean&gt; 元素中是否包含子 &lt;bean&gt; 元素</span><br>    <span class="hljs-keyword">if</span> (containingBean == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 检查 &lt;bean&gt; 元素所配置的 id、name 或者别名是否重复</span><br>        checkNameUniqueness(beanName, aliases, ele);<br>    &#125;<br><br>    <span class="hljs-comment">// 详细对 &lt;bean&gt; 元素中配置的 Bean 定义进行解析</span><br>    <span class="hljs-type">AbstractBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> parseBeanDefinitionElement(ele, beanName, containingBean);<br><br>    <span class="hljs-keyword">if</span> (beanDefinition != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!StringUtils.hasText(beanName)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (containingBean != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果 &lt;bean&gt; 元素中没有配置 id、name 或者别名，且没有包含子元素&lt;bean&gt; 元素，</span><br>                    <span class="hljs-comment">// 则为解析的 Bean 生成一个唯一 beanName 并注册</span><br>                    beanName = BeanDefinitionReaderUtils.generateBeanName(<br>                        beanDefinition, <span class="hljs-built_in">this</span>.readerContext.getRegistry(), <span class="hljs-literal">true</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 如果 &lt;bean&gt; 元素中没有配置 id、name 或者别名，且包含子元素&lt;bean&gt; 元素，</span><br>                    <span class="hljs-comment">// 则将解析的 Bean 使用别名向 IoC 容器注册</span><br>                    beanName = <span class="hljs-built_in">this</span>.readerContext.generateBeanName(beanDefinition);<br>                    <span class="hljs-comment">// 为解析的 Bean 使用别名注册时，为了向后兼容 Spring 1.2/2.0，给别名添加类名后缀</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">beanClassName</span> <span class="hljs-operator">=</span> beanDefinition.getBeanClassName();<br>                    <span class="hljs-keyword">if</span> (beanClassName != <span class="hljs-literal">null</span> &amp;&amp;<br>                        beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;<br>                        !<span class="hljs-built_in">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;<br>                        aliases.add(beanClassName);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//....省略</span><br>            &#125;<br>            <span class="hljs-comment">//....省略</span><br>        &#125;<br>        String[] aliasesArray = StringUtils.toStringArray(aliases);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(beanDefinition, beanName, aliasesArray);<br>    &#125;<br><span class="hljs-comment">// 当解析出错时，返回 null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DI源码"><a href="#DI源码" class="headerlink" title="DI源码"></a>DI源码</h1><h2 id="依赖注入发生时间"><a href="#依赖注入发生时间" class="headerlink" title="依赖注入发生时间"></a>依赖注入发生时间</h2><p>当 Spring IoC 容器完成了 Bean 定义资源的定位、载入和解析注册后，IoC 容器就可以管理 Bean 定义的相关数据了。但是，此时 IoC 容器还没有对所管理的 Bean 进行依赖注入，依赖注入是在以下两种情况下产生的：</p><p>1）当用户第一次调用 getBean() 方法时，IoC 容器触发依赖注入。</p><p>2）当用户在配置文件中将 <code>&lt;bean&gt;</code>元素配置了 <code>lazy-init=false</code> 属性时，IoC 容器才会进行预实例化，触发依赖注入。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111813030.png" alt="image-20220711181326945"></p><h2 id="入口-1"><a href="#入口-1" class="headerlink" title="入口"></a>入口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br><br><span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="执行-Bean-实例化"><a href="#执行-Bean-实例化" class="headerlink" title="执行 Bean 实例化"></a>执行 Bean 实例化</h2><p>点击上面中的 getBean() 方法，进入 AbstractBeanFactory 类中的 getBean()  方法中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-comment">// 真正向 IoC 容器获取被管理的 Bean</span><br>    <span class="hljs-keyword">return</span> doGetBean(name, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="准备依赖注入"><a href="#准备依赖注入" class="headerlink" title="准备依赖注入"></a>准备依赖注入</h2><p>进入这个方法，它是获取 IoC 容器中指定名称和参数的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; T <span class="hljs-title function_">doGetBean</span><span class="hljs-params">(</span><br><span class="hljs-params">    String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> typeCheckOnly)</span><br>    <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>    <span class="hljs-comment">// 根据指定名称获取被管理的 Bean 名称，剥离指定名称中对容器的相关依赖，如果指定的是别名，将别名转换为规范的 Bean 名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> transformedBeanName(name);<br>    Object beanInstance;<br><br>    <span class="hljs-comment">// 先从缓存中读取是否已经有被创建过单例模式的 Bean,对于整个 IoC 容器单例 Bean 只会创建一次</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">sharedInstance</span> <span class="hljs-operator">=</span> getSingleton(beanName);<br>    <span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-literal">null</span> &amp;&amp; args == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            <span class="hljs-comment">// 如果在容器中已有指定名称的单例模式的 Bean被创建，直接返回已经创建的Bean对象</span><br>            <span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;<br>                <span class="hljs-comment">///</span><br>            &#125;<br>            <span class="hljs-comment">//</span><br>        &#125;<br>        <span class="hljs-comment">// 获取给定的 Bean 的实例对象，主要完成 FactoryBean 的相关处理</span><br>        <span class="hljs-comment">// 注意：BeanFactory是管理 Bean 的工厂，而 FactoryBean 是创建对象的工厂 Bean，两者是有区别的。</span><br>        beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 缓存中没有真正在创建的单例模式的 Bean，而是存在原型模型的 Bean，但是由于有循环引用导致实例化对象创建失败</span><br>        <span class="hljs-keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCurrentlyInCreationException</span>(beanName);<br>        &#125;<br><br>        <span class="hljs-comment">// 对 IoC 容器中是否存在指定名称的 BeanDefinition 进行检查，首先检查是否能在当前的 BeanFactory 中获取所需要的</span><br>        <span class="hljs-comment">// Bean,如果不能则委托当前容器的父容器去查找，如果还是找不到则沿着容器的继承关系向父容器查找。</span><br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">parentBeanFactory</span> <span class="hljs-operator">=</span> getParentBeanFactory();<br>        <span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;<br>            <span class="hljs-comment">// 解析指定 Bean 名称的原始名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">nameToLookup</span> <span class="hljs-operator">=</span> originalBeanName(name);<br>            <span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> AbstractBeanFactory) &#123;<br>                <span class="hljs-keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(<br>                    nameToLookup, requiredType, args, typeCheckOnly);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 委托父容器根据指定名称和显示的参数查找</span><br>                <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 委托父容器根据指定名称和类型查找</span><br>                <span class="hljs-keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 创建的 Bean 是否需要进行类型验证，一般不需要</span><br>        <span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;<br>            <span class="hljs-comment">// 向容器标记指定的 Bean 已经被创建</span><br>            markBeanAsCreated(beanName);<br>        &#125;<br><br>        <span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanCreation</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.beans.instantiate&quot;</span>)<br>            .tag(<span class="hljs-string">&quot;beanName&quot;</span>, name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br>                beanCreation.tag(<span class="hljs-string">&quot;beanType&quot;</span>, requiredType::toString);<br>            &#125;<br>            <span class="hljs-comment">// 根据指定 Bean 名称获得其父级 Bean 定义，主要解决 Bean 继承时子类和父类公共属性问题</span><br>            <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br>            checkMergedBeanDefinition(mbd, beanName, args);<br><br>            <span class="hljs-comment">// 获取当前 Bean 所依赖的 Bean 名称</span><br>            String[] dependsOn = mbd.getDependsOn();<br>            <span class="hljs-comment">// 如果当前 Bean 有依赖</span><br>            <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;<br>                    <span class="hljs-keyword">if</span> (isDependent(beanName, dep)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br>                                                        <span class="hljs-string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-comment">// 把被依赖的 Bean 注册给当前依赖的 Bean</span><br>                    registerDependentBean(dep, beanName);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 递归调用 getBean() 方法，获取当前 Bean 的所有依赖</span><br>                        getBean(dep);<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br>                                                        <span class="hljs-string">&quot;&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 创建单例模式的 Bean 实例对象</span><br>            <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>                sharedInstance = getSingleton(beanName, () -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>                        <span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span><br>                        <span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span><br>                        <span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span><br>                        destroySingleton(beanName);<br>                        <span class="hljs-keyword">throw</span> ex;<br>                    &#125;<br>                &#125;);<br>                beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>            &#125;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;<br>                <span class="hljs-comment">// It&#x27;s a prototype -&gt; create a new instance.</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">prototypeInstance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    beforePrototypeCreation(beanName);<br>                    prototypeInstance = createBean(beanName, mbd, args);<br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                    afterPrototypeCreation(beanName);<br>                &#125;<br>                beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);<br>            &#125;<br><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">scopeName</span> <span class="hljs-operator">=</span> mbd.getScope();<br>                <span class="hljs-keyword">if</span> (!StringUtils.hasLength(scopeName)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No scope name defined for bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                <span class="hljs-type">Scope</span> <span class="hljs-variable">scope</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.scopes.get(scopeName);<br>                <span class="hljs-keyword">if</span> (scope == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">scopedInstance</span> <span class="hljs-operator">=</span> scope.get(beanName, () -&gt; &#123;<br>                        beforePrototypeCreation(beanName);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>                        &#125;<br>                        <span class="hljs-keyword">finally</span> &#123;<br>                            afterPrototypeCreation(beanName);<br>                        &#125;<br>                    &#125;);<br>                    beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScopeNotActiveException</span>(beanName, scopeName, ex);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>            beanCreation.tag(<span class="hljs-string">&quot;exception&quot;</span>, ex.getClass().toString());<br>            beanCreation.tag(<span class="hljs-string">&quot;message&quot;</span>, String.valueOf(ex.getMessage()));<br>            cleanupAfterBeanCreationFailure(beanName);<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            beanCreation.end();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过向 IoC 容器获取 Bean 的方法的分析，我们可以看到，在 Spring 中如果 Bean 定义为单例模式，则容器在创建之前先从缓存中查找，以确保整个容器中只存在一个实例对象。如果 Bean 定义为原型模式，则容器每次都会创建一个新的实例对象。</p><h2 id="开始实例化"><a href="#开始实例化" class="headerlink" title="开始实例化"></a>开始实例化</h2><p>点击上面代码中的 <code>return createBean(beanName, mbd, args);</code> 方法，进入AbstractAutowireCapableBeanFactory 类中的 createBean() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br>    <span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br>    <span class="hljs-comment">//....省略</span><br>    <br>    <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbdToUse</span> <span class="hljs-operator">=</span> mbd;<br><br>    <span class="hljs-comment">// 判断所需要创建的 Bean是否可以实例化，即是否要通过当前的类加载器加载</span><br>    Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);<br>    <span class="hljs-keyword">if</span> (resolvedClass != <span class="hljs-literal">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="hljs-literal">null</span>) &#123;<br>        mbdToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(mbd);<br>        mbdToUse.setBeanClass(resolvedClass);<br>    &#125;<br><br>    <span class="hljs-comment">// 校验和准备 Bean 中的方法覆盖</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        mbdToUse.prepareMethodOverrides();<br>    &#125;<br>    <span class="hljs-comment">//...省略</span><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 如果 Bean 配置了初始化前和初始化后的处理器，则试图返回一个需要创建的 Bean 代理对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> resolveBeforeInstantiation(beanName, mbdToUse);<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//.....省略</span><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建 Bean 入口</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">beanInstance</span> <span class="hljs-operator">=</span> doCreateBean(beanName, mbdToUse, args);<br>        <span class="hljs-comment">//.....省略</span><br>        <span class="hljs-keyword">return</span> beanInstance;<br>    &#125;<br>    <span class="hljs-comment">//.....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>doCreateBean()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br><span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br><span class="hljs-comment">// 封装被创建的 Bean 对象</span><br><span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">instanceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>instanceWrapper = <span class="hljs-built_in">this</span>.factoryBeanInstanceCache.remove(beanName);<br>&#125;<br><span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-literal">null</span>) &#123;<br>instanceWrapper = createBeanInstance(beanName, mbd, args);<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> instanceWrapper.getWrappedInstance();<br>    <span class="hljs-comment">// 获取实例化对象的类型</span><br>Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();<br><span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;<br>mbd.resolvedTargetType = beanType;<br>&#125;<br><br><span class="hljs-comment">// 调用 PostProcess 后置处理器</span><br><span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;<br><span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>&#125;<br><span class="hljs-comment">//......省略</span><br>mbd.postProcessed = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 向容器中缓存单例模式的 Bean 对象，以防止循环引用</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">earlySingletonExposure</span> <span class="hljs-operator">=</span> (mbd.isSingleton() &amp;&amp; <span class="hljs-built_in">this</span>.allowCircularReferences &amp;&amp;<br>isSingletonCurrentlyInCreation(beanName));<br><span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br><span class="hljs-comment">//</span><br>&#125;<br>            <span class="hljs-comment">// 使用一个匿名内部类，为了防止循环引用，尽早持有对象的引用</span><br>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));<br>&#125;<br><br><span class="hljs-comment">// Bean 对象的初始化，依赖注入在此处触发，这个 exposedObject 对象在初始化完成后返回依赖注入完成的 Bean</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">exposedObject</span> <span class="hljs-operator">=</span> bean;<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将 Bean 实例对象封装，并且将 Bean 定义中配置的属性赋给实例对象</span><br>populateBean(beanName, mbd, instanceWrapper);<br>            <span class="hljs-comment">// 初始化 Bean 对象</span><br>exposedObject = initializeBean(beanName, exposedObject, mbd);<br>&#125;<br><span class="hljs-comment">//.........</span><br><br><span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br>            <span class="hljs-comment">// 获取指定名称的已注册的单例模式的 Bean 对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">earlySingletonReference</span> <span class="hljs-operator">=</span> getSingleton(beanName, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exposedObject == bean) &#123;<br>                    <span class="hljs-comment">// 完成初始化</span><br>exposedObject = earlySingletonReference;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;<br>String[] dependentBeans = getDependentBeans(beanName);<br>Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);<br><span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;<br><span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;<br>actualDependentBeans.add(dependentBean);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;<br><span class="hljs-comment">//......</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 注册完成依赖注入的 Bean</span><br><span class="hljs-keyword">try</span> &#123;<br>registerDisposableBeanIfNecessary(beanName, bean, mbd);<br>&#125;<br><span class="hljs-comment">//.....</span><br><br><span class="hljs-keyword">return</span> exposedObject;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码注释可以看到，具体的依赖注入实现其实就在以下两个方法中：</p><p>1）createBeanInstance() 方法，生成 Bean 所包含的 Java 对象实例。</p><p>2）populateBean() 方法，对 Bean 属性的依赖注入进行处理。</p><p>进入 createBeanInstance() 方法，然后点击 instantiate() 方法，进入 SimpleInstantiationStrategy 类中的 instantiate() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">instantiate</span><span class="hljs-params">(RootBeanDefinition bd, <span class="hljs-meta">@Nullable</span> String beanName, BeanFactory owner)</span> &#123;<br>    <span class="hljs-comment">// 如果 Bean 定义中没有方法覆盖，就不需要 CGLib 父类的方法</span><br>    <span class="hljs-keyword">if</span> (!bd.hasMethodOverrides()) &#123;<br>        Constructor&lt;?&gt; constructorToUse;<br>        <span class="hljs-keyword">synchronized</span> (bd.constructorArgumentLock) &#123;<br>            <span class="hljs-comment">// 获取对象的构造方法或工厂方法</span><br>            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;<br>            <span class="hljs-comment">// 如果没有构造器方法或工厂方法</span><br>            <span class="hljs-keyword">if</span> (constructorToUse == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 使用 JDK 的反射机制，判断要实例化的 Bean 是否是接口</span><br>                <span class="hljs-keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();<br>                <span class="hljs-keyword">if</span> (clazz.isInterface()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanInstantiationException</span>(clazz, <span class="hljs-string">&quot;Specified class is an interface&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span>) &#123;<br>                        constructorToUse = AccessController.doPrivileged(<br>                            (PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;) clazz::getDeclaredConstructor);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        constructorToUse = clazz.getDeclaredConstructor();<br>                    &#125;<br>                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanInstantiationException</span>(clazz, <span class="hljs-string">&quot;No default constructor found&quot;</span>, ex);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 使用 BeanUtils 进行实例化，通过反射机制调用 构造器方法.newInstance(arg) 进行实例化</span><br>        <span class="hljs-keyword">return</span> BeanUtils.instantiateClass(constructorToUse);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 使用 CGLib 来实例化对象</span><br>        <span class="hljs-keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>在 Spring 中Bean的生命周期可以分为 4 类：</p><ul><li>Bean 自身方法</li><li>Bean 生命周期接口方法</li><li>容器级生命周期接口方法</li><li>工厂后处理器接口方法</li></ul><table><thead><tr><th>Spring Bean 生命周期</th><th>相关接口及方法</th></tr></thead><tbody><tr><td>Bean 自身方法</td><td>Bean 本身业务的方法：<br>配置文件中 init-method 和 destroy-method 指定的方法</td></tr><tr><td>Bean 生命周期接口方法</td><td>InitializingBean 接口<br>DisposableBean 接口<br>BeanNameAware 接口<br>ApplicationContextAware 接口<br>BeanFactoryAware 接口<br>其它</td></tr><tr><td>容器级生命周期接口方法<br>一般称为后处理器</td><td>InstantiationAwareBeanPostProcessor 接口实现<br>BeanPostProcessor 接口实现</td></tr><tr><td>工厂级生命周期接口方法<br>也可以归为容器级</td><td>AspectJWeavingEnabler<br>ConfigurationClassPostProcessor<br>CustomAutowireConfigurer 等</td></tr></tbody></table><p>一个 Bean 的生命周期需要经历以下时序：</p><ul><li>init-method：指定某个方法在 Bean 实例化完成，依赖关系设置结束后执行</li><li>detroy-method：指定某个方法在 Bean 销毁之前被执行</li><li>InitializingBean 接口：在 Bean 实例化完成，依赖关系设置结束后执行，在 init-method 之前执行</li><li>DisposableBean 接口：在指定 Bean Bean 销毁之前被执行，它是在 detroy-method 之前执行</li><li>ApplicationContextAware 接口：在实例化 Bean 时，为 Bean 注入 ApplicationContext</li></ul><h1 id="面试题：为什么要使用三级缓存来解决循环依赖"><a href="#面试题：为什么要使用三级缓存来解决循环依赖" class="headerlink" title="面试题：为什么要使用三级缓存来解决循环依赖"></a>面试题：为什么要使用三级缓存来解决循环依赖</h1><h2 id="什么是循环依赖？"><a href="#什么是循环依赖？" class="headerlink" title="什么是循环依赖？"></a>什么是循环依赖？</h2><p>所谓循环依赖，就是 A 的创建依赖于 B 的创建，B 的创建又依赖于 C 的创建，而 C 的创建又依赖于 A 的创建。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111809026.png" alt="image-20220711180949895"></p><p>这就形成了循环依赖</p><h2 id="在Spring中使用循环依赖"><a href="#在Spring中使用循环依赖" class="headerlink" title="在Spring中使用循环依赖"></a>在Spring中使用循环依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BService bService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(bService);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AService aService;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.xianoupeng&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CycleDITest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);<br>        <span class="hljs-type">AService</span> <span class="hljs-variable">aService</span> <span class="hljs-operator">=</span> (AService) context.getBean(<span class="hljs-string">&quot;AService&quot;</span>);<br>        aService.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过测试发现，在 Spring 中已经帮我们解决一些循环依赖的问题。</p><h2 id="分析解决循环依赖的解决"><a href="#分析解决循环依赖的解决" class="headerlink" title="分析解决循环依赖的解决"></a>分析解决循环依赖的解决</h2><p>在 Spring 中，创建一个对象需要经过以下步骤：</p><p>1）利用构造器创建一个普通对象（也叫原始对象）</p><p>2）给对象的属性赋值，也就填充对象的属性值</p><p>3）填充其他属性</p><p>4）初始化前、初始化完成，以及其它操作</p><p>5）初始化后</p><p>6）把创建并初始化的对象放到单例池中（singletoObjects）里面。</p><p>在 Spring 中，通过以下三个 Map 对象来解决循环依赖问题：</p><p>1、一级缓存：singletonObjects，在这级缓存中已经经历完整的生命周期的 Bean 对象</p><p>2、二级缓存：earlySingletonObjects，比一级缓存多了一个 early，表示缓存的是早期的 Bean 对象，也就是 Bean 的生命周期还没有走完就把这个 Bean 放到了二级缓存中。</p><p>3、三级缓存：singletonFactories，缓存的是 ObjectFactory ，表示对象工厂，用来创建某个对象。</p><p>实际上，大多数据开发部下使用一级缓存就可以解决循环依赖问题，如果在循环依赖中存在一些循环的属性需要注入，比如 AOP 相关的数据需要注入，这时就需要使用 三级缓存来解决循环依赖问题。</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111810393.png" alt="image-20220711181002276"></p><p>从上图中可以发生，Spring 在处理循环依赖问题时，使用二级缓存就已经解决，但它不能解决复杂的循环依赖问题。要想解决复杂的循环依赖问题，就需要用到三级缓存。</p><p>处理循环依赖问题的源码：</p><p>AbstractAutowireCapableBeanFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br><span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br><span class="hljs-comment">// Instantiate the bean.</span><br><span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">instanceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>instanceWrapper = <span class="hljs-built_in">this</span>.factoryBeanInstanceCache.remove(beanName);<br>&#125;<br><span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-literal">null</span>) &#123;<br>instanceWrapper = createBeanInstance(beanName, mbd, args);<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> instanceWrapper.getWrappedInstance();<br>Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();<br><span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;<br>mbd.resolvedTargetType = beanType;<br>&#125;<br><br><span class="hljs-comment">// Allow post-processors to modify the merged bean definition.</span><br><span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;<br><span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br><span class="hljs-string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);<br>&#125;<br>mbd.postProcessed = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 关键代码</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">earlySingletonExposure</span> <span class="hljs-operator">=</span> (mbd.isSingleton() &amp;&amp; <span class="hljs-built_in">this</span>.allowCircularReferences &amp;&amp;<br>isSingletonCurrentlyInCreation(beanName));<br><span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +<br><span class="hljs-string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);<br>&#125;<br>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));<br>&#125;<br><br><span class="hljs-comment">// Initialize the bean instance.</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">exposedObject</span> <span class="hljs-operator">=</span> bean;<br><span class="hljs-keyword">try</span> &#123;<br>populateBean(beanName, mbd, instanceWrapper);<br>exposedObject = initializeBean(beanName, exposedObject, mbd);<br>&#125;<br><span class="hljs-comment">//.....</span><br><br><span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br>            <span class="hljs-comment">// 核心</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">earlySingletonReference</span> <span class="hljs-operator">=</span> getSingleton(beanName, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exposedObject == bean) &#123;<br>exposedObject = earlySingletonReference;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;<br>String[] dependentBeans = getDependentBeans(beanName);<br>Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);<br><span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;<br><span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;<br>actualDependentBeans.add(dependentBean);<br>&#125;<br>&#125;<br><span class="hljs-comment">///......</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进入 getSingleton() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName, <span class="hljs-type">boolean</span> allowEarlyReference)</span> &#123;<br><span class="hljs-comment">// 从一级缓存中获取</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>    <span class="hljs-comment">// 判断是否正在创建中</span><br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;<br>            <span class="hljs-comment">// 从二缓存中获取</span><br>singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br>            <span class="hljs-comment">// 如果没有找到并且允许循环引用</span><br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; allowEarlyReference) &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br><span class="hljs-comment">// 双重加锁</span><br>singletonObject = <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-comment">// 从三级缓存中获取</span><br>ObjectFactory&lt;?&gt; singletonFactory = <span class="hljs-built_in">this</span>.singletonFactories.get(beanName);<br><span class="hljs-keyword">if</span> (singletonFactory != <span class="hljs-literal">null</span>) &#123;<br>                                <span class="hljs-comment">// 执行 lambda 表达式</span><br>singletonObject = singletonFactory.getObject();<br><span class="hljs-built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br><span class="hljs-built_in">this</span>.singletonFactories.remove(beanName);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> singletonObject;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP（Aspect Oriented Programming）面向切面编程，它是面向对象编程的一种补充。</p><p>在 Spring 中，AOP 的实现有两种方式：</p><ul><li>使用 JDK 动态代理，要求被增强（代理）对象必须实现接口</li><li>使用 CGLib 动态代理</li></ul><p>在 Spring 中两种方式都有，如果被代理对象实现了接口就使用 JDK 动态代理，否则就使用 CGLib 动态代理。默认使用的是 JDK 动态代理。我们可以设置使用何种代理方式。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="1-横切关注点"><a href="#1-横切关注点" class="headerlink" title="1. 横切关注点"></a>1. 横切关注点</h3><p>简单的说，横切关注点就是可以对某些方法进行拦截，拦截后对原方法进行增强的处理。</p><h3 id="2-切面"><a href="#2-切面" class="headerlink" title="2. 切面"></a>2. 切面</h3><p>切面就是对横切关注点的抽象，这个关注点可能会横切多个对象。简单的说就是用于增强的类。</p><h3 id="3-连接点"><a href="#3-连接点" class="headerlink" title="3. 连接点"></a>3. 连接点</h3><p>连接点是在程序执行过程中某个特定的点，如某个方法调用时或者处理异常的时。</p><h3 id="4-切入点"><a href="#4-切入点" class="headerlink" title="4. 切入点"></a>4. 切入点</h3><p>在切面上拦截到某个特定的连接点之后执行的动作。</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>在 pom.xml 文件中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编写接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写两个实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service.impl;<br><span class="hljs-keyword">import</span> org.example.service.Fruit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 模拟吃水果的过程</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;吃苹果&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Banana</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 模拟吃香蕉的过程</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;吃香蕉&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitHandler</span> &#123;<br>    <span class="hljs-comment">// 打印开始吃水果时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startEatFruitDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">startDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;开始吃水果的时间是：&quot;</span> + startDate);<br>    &#125;<br>    <span class="hljs-comment">// 打印结束吃水果时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endEatFruitDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">endDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;结束吃水果的时间是：&quot;</span> + endDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.Apple&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruit1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.Banana&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置切面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruitHandler&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.aop.FruitHandler&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编写写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.aop.test;<br><br><span class="hljs-keyword">import</span> org.example.service.Fruit;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;<br><br><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Fruit fruit;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Fruit fruit1;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        fruit.eat();<br><br>        System.out.println(<span class="hljs-string">&quot;-----------休息一会--------------&quot;</span>);<br><br>        fruit1.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后输出结果为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">吃苹果<br>-------------------休息一会------------------<br>吃香蕉<br></code></pre></td></tr></table></figure><p>现在我们希望在输出吃苹果时把花费的时间也输出，则需要添加如下配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置AOP --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fruitHandler&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.example.service..*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;startEatFruitDate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;endEatFruitDate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果希望使用 AOP 的注解方式，则需要做以下调整：</p><p>1）在切面上添加 @Aspect 注解，然后在通过&#x2F;增强 方法上添加相应的增强的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.AfterReturning;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 表示这是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitHandler</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* org.example.service..*.*(..))&quot;)</span><br>    <span class="hljs-comment">// 打印开始吃水果时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startEatFruitDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">startDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;开始吃水果的时间是：&quot;</span> + startDate);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* org.example.service..*.*(..))&quot;)</span><br>    <span class="hljs-comment">// 打印结束吃水果时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endEatFruitDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">endDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;结束吃水果的时间是：&quot;</span> + endDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）在Spring的配置文件中开启AOP注解支持，同时之前取消 AOP 的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.Apple&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruit1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.Banana&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置切面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruitHandler&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.aop.FruitHandler&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启 AOP 注解的支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3）再次运行测试程序就可以进行测试了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">开始吃水果的时间是：2022-07-11 10:54:17<br>吃苹果<br>结束吃水果的时间是：2022-07-11 10:54:18<br>-----------休息一会--------------<br>开始吃水果的时间是：2022-07-11 10:54:18<br>吃香蕉<br>结束吃水果的时间是：2022-07-11 10:54:19<br></code></pre></td></tr></table></figure><p>其实还可以优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.AfterReturning;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 表示这是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitHandler</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* org.example.service..*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//@Before(&quot;execution(* org.example.service..*.*(..))&quot;)</span><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-comment">// 打印开始吃水果时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startEatFruitDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">startDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;开始吃水果的时间是：&quot;</span> + startDate);<br>    &#125;<br><br>    <span class="hljs-comment">//@AfterReturning(&quot;execution(* org.example.service..*.*(..))&quot;)</span><br>    <span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br>    <span class="hljs-comment">// 打印结束吃水果时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endEatFruitDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">endDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(<span class="hljs-string">&quot;结束吃水果的时间是：&quot;</span> + endDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><p>数据库的事务是指将一系列的数据库操作当作一个逻辑单元，这个单元中的数据操作要么完全成功，要么完全失败。</p><h2 id="1-事务的特点"><a href="#1-事务的特点" class="headerlink" title="1. 事务的特点"></a>1. 事务的特点</h2><p>一个事务处理逻辑单元要成为事务，必须满足ACID属性：</p><ul><li>原子性（Atomicity）：一个事务内的操作不可再分，要么全部成功，要么全部失败。</li><li>一致性（Conisitency）：事务执行后，数据库的状态与其他业务逻辑保持一致。</li><li>隔离性（Isolation）：每个事务运行都是相互独立的，互不干绕。</li><li>持久性（Druability）：事务一旦提交，就会永久保存下来。</li></ul><h2 id="2-事务隔离级别"><a href="#2-事务隔离级别" class="headerlink" title="2. 事务隔离级别"></a>2. 事务隔离级别</h2><p>事务隔离级别有 4 个：</p><ul><li>READ_UNCOMMITED：读取未提交，会产生“脏读”数据，必须要避免的。</li><li>READ_COMMITED：读已提交事务，会产生“幻读”数据。</li><li>REPEATABLE_READ：可重复读，会产生“幻读”数据。</li><li>SERIALIZABLE：它是一个串行读。</li></ul><p>事务隔离级别是从上往下的安全性增加，但是性能降低。</p><h2 id="3-事务传播行为"><a href="#3-事务传播行为" class="headerlink" title="3. 事务传播行为"></a>3. 事务传播行为</h2><p>事务传播行为有 7 个：</p><table><thead><tr><th>事务传播行为类型</th><th>说        明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务。<br>如果已经存在一个事务中，加入到这就个事务中</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务。如果当前没有事务，就以非事务方式执行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务。如果当前没有事务，就抛出异常</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务。如果当前存在事务，把当前事务挂起</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作。如果当前存在事务，就把当前事务挂起</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行。如果当前存在事务，则抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。<br>如果当前没有事务，则执行与 PROPAGATION_REQUIRED 类似的操作。<br>与 PROPAGATION_REQUIRES_NEW 的差别是 PROPAGATION_REQUIRES_NEW 另起一个事务，将会与其父事务相互独立。<br>PROPAGATION_NESTED 事务和其父事务是相依的，其要等父事务一起提交。</td></tr></tbody></table><h2 id="4-事务配置"><a href="#4-事务配置" class="headerlink" title="4. 事务配置"></a>4. 事务配置</h2><p>1）XML 配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!-- 配置事务通知 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>           <span class="hljs-comment">&lt;!-- 配置哪些方法需要有事务 --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transfer&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;DEFAULT&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;del*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>           <span class="hljs-comment">&lt;!-- 哪些方法不需要有事务 --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 配置 AOP --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.jock.tx.service..*.*(..))&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）注解方式</p><p>A、在需要添加事务的类或方法上使用 @Transactional(propagation &#x3D; Propagation.SUPPORTS, readOnly &#x3D; true)</p><p>B、在配置文件添加注解的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.jock.tx&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 添加事务注解支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Spring-MVC-复习"><a href="#Spring-MVC-复习" class="headerlink" title="Spring MVC 复习"></a>Spring MVC 复习</h1><p>Spring MVC 框架中封装的就是 Servlet。</p><h2 id="有-web-xml-的方式"><a href="#有-web-xml-的方式" class="headerlink" title="有 web.xml 的方式"></a>有 web.xml 的方式</h2><h3 id="1）创建一个工程"><a href="#1）创建一个工程" class="headerlink" title="1）创建一个工程"></a>1）创建一个工程</h3><p> <img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111810726.png" alt="image-20220711181032626"></p><h3 id="2）添加依赖"><a href="#2）添加依赖" class="headerlink" title="2）添加依赖"></a>2）添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jock<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>framework-spring-mvc-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3）创建-web-xml-文件"><a href="#3）创建-web-xml-文件" class="headerlink" title="3）创建 web.xml 文件"></a>3）创建 web.xml 文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4）创建Spring配置文件"><a href="#4）创建Spring配置文件" class="headerlink" title="4）创建Spring配置文件"></a>4）创建Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.jock&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在Spring中排除扫描 @Controller 注解 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5）编写SpringMVC配置文件"><a href="#5）编写SpringMVC配置文件" class="headerlink" title="5）编写SpringMVC配置文件"></a>5）编写SpringMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 关闭默认的扫描规则，按我们自己指定的规则来扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.jock&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6）编写实现类"><a href="#6）编写实现类" class="headerlink" title="6）编写实现类"></a>6）编写实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jock.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.experimental.Accessors;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7）编写数据访问层"><a href="#7）编写数据访问层" class="headerlink" title="7）编写数据访问层"></a>7）编写数据访问层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jock.dao;<br><br><span class="hljs-keyword">import</span> org.jock.entity.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jock.dao.impl;<br><br><span class="hljs-keyword">import</span> org.jock.dao.UserDao;<br><span class="hljs-keyword">import</span> org.jock.entity.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Integer, User&gt; data;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, User&gt; entry : data.entrySet()) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> entry.getValue();<br>            users.add(user);<br>        &#125;<br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        data.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>().setId(<span class="hljs-number">1</span>).setName(<span class="hljs-string">&quot;刘备&quot;</span>));<br>        data.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>().setId(<span class="hljs-number">2</span>).setName(<span class="hljs-string">&quot;关羽&quot;</span>));<br>        data.put(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>().setId(<span class="hljs-number">3</span>).setName(<span class="hljs-string">&quot;张飞&quot;</span>));<br>        data.put(<span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>().setId(<span class="hljs-number">4</span>).setName(<span class="hljs-string">&quot;赵云&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8）编写业务层"><a href="#8）编写业务层" class="headerlink" title="8）编写业务层"></a>8）编写业务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jock.service;<br><br><span class="hljs-keyword">import</span> org.jock.entity.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jock.service.impl;<br><br><span class="hljs-keyword">import</span> org.jock.dao.UserDao;<br><span class="hljs-keyword">import</span> org.jock.entity.User;<br><span class="hljs-keyword">import</span> org.jock.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.list();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9）编写控制器"><a href="#9）编写控制器" class="headerlink" title="9）编写控制器"></a>9）编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jock.controller;<br><br><span class="hljs-keyword">import</span> org.jock.entity.User;<br><span class="hljs-keyword">import</span> org.jock.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span><span class="hljs-params">(Model model)</span> &#123;<br>        List&lt;User&gt; users = userService.getAll();<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, users.get(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10）加载Spring容器"><a href="#10）加载Spring容器" class="headerlink" title="10）加载Spring容器"></a>10）加载Spring容器</h3><p>在 web.xml 文件中加载 Spring 配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>spring<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath*:spring*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>spring<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11）启动服务测试"><a href="#11）启动服务测试" class="headerlink" title="11）启动服务测试"></a>11）启动服务测试</h3><p>在地址栏中输入：<a href="http://localhost:8080/framework-spring-mvc-xml/list">http://localhost:8080/framework-spring-mvc-xml/list</a></p><p>得到结果为：1 - 刘备</p><h2 id="纯注解方式"><a href="#纯注解方式" class="headerlink" title="纯注解方式"></a>纯注解方式</h2><h3 id="1）创建工程"><a href="#1）创建工程" class="headerlink" title="1）创建工程"></a>1）创建工程</h3><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111812495.png" alt="image-20220711181241389"></p><h3 id="2）添加依赖-1"><a href="#2）添加依赖-1" class="headerlink" title="2）添加依赖"></a>2）添加依赖</h3><p>在 pom.xml 文件中添加与上面的依赖相同。</p><h3 id="3）配置容器"><a href="#3）配置容器" class="headerlink" title="3）配置容器"></a>3）配置容器</h3><p>我们在项目中创建一个 config 包，在这个包下创建一个 ApplicationConifg.java 类，它的作用就对应 web.xml 中的 ContextLoaderListener 的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jock.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.FilterType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置类，它的作用与 spring.xml 相同</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">        value = &quot;com.jock&quot;,</span><br><span class="hljs-meta">        excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, value = Controller.class)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4）环境配置"><a href="#4）环境配置" class="headerlink" title="4）环境配置"></a>4）环境配置</h3><p>由于从 Servlet 3.x 开始，Web 项目就开始支持无 web.xml 文件的方式。虽然文件可以没有，但它的功能需要转换为配置文件。所以我们在 config 包下再创建一个 WebConfig.java 文件，它对应 DispatcherServlet 配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jock.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.FilterType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 它相当于 springmvc.xml 文件</span><br><span class="hljs-comment"> * 这个配置类需要实现 WebMvcConfigurer 类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@EnableWebMvc</span> 注解的作用是开启web功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.jock&quot;, includeFilters = &#123;</span><br><span class="hljs-meta">        @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">// 添加视图解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> InternalResourceViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InternalResourceViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalResourceViewResolver</span>();<br>        viewResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>);<br>        viewResolver.setSuffix(<span class="hljs-string">&quot;.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5）加载容器"><a href="#5）加载容器" class="headerlink" title="5）加载容器"></a>5）加载容器</h3><p>在项目中创建 init 包，并在这个包下创建 SpringApplicationInitializer，此类实现了 WebApplicationInitializer 接口，在 Spring 容器启动时会自动加载这个接口的所有实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jock.init;<br><br><span class="hljs-keyword">import</span> com.jock.config.ApplicationConfig;<br><span class="hljs-keyword">import</span> com.jock.config.WebConfig;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加载容器类，这个类要继承 AbstractAnnotationConfigDispatcherServletInitializer 类，它是 WebApplicationInitializer 接口的子类</span><br><span class="hljs-comment"> * 然后重写以下几个方法：</span><br><span class="hljs-comment"> * 1. getRootConfigClasses()：用于加载 Spring 的配置类,ApplicationConfig.class</span><br><span class="hljs-comment"> * 2. getServletConfigClasses()：用于加载 SpringMVC 的配置类，WebConfig.class</span><br><span class="hljs-comment"> * 3. getServletMappings()：用于指定请求的映射</span><br><span class="hljs-comment"> * 其实这个类的作用就类似于 web.xml 文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplicationInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ApplicationConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// url-mapping</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6）编写其它程序"><a href="#6）编写其它程序" class="headerlink" title="6）编写其它程序"></a>6）编写其它程序</h3><p>接下来编写实体类、访问层、业务层、控制层和 index.jsp 页面。内容参考 xml 项目。</p><h3 id="7）启动测试"><a href="#7）启动测试" class="headerlink" title="7）启动测试"></a>7）启动测试</h3><p>启动项目，输入访问地址：<a href="http://localhost:8080/framework-spring-mvc-annotation/list">http://localhost:8080/framework-spring-mvc-annotation/list</a> 就可以正常的访问。</p><p>我们还可以 WebConfig.java 配置类中，添加默认的请求资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置默认访问路径</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>    registry<br>            .addViewController(<span class="hljs-string">&quot;/&quot;</span>) <span class="hljs-comment">// 添加请求的访问路径</span><br>            .setViewName(<span class="hljs-string">&quot;login&quot;</span>); <span class="hljs-comment">// 设置访问路径对应的视图</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringMVC-执行流程"><a href="#SpringMVC-执行流程" class="headerlink" title="SpringMVC 执行流程"></a>SpringMVC 执行流程</h2><h3 id="1-请求流程"><a href="#1-请求流程" class="headerlink" title="1. 请求流程"></a>1. 请求流程</h3><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111808370.png" alt="image-20220711145727052"></p><h3 id="2-初始化过程"><a href="#2-初始化过程" class="headerlink" title="2. 初始化过程"></a>2. 初始化过程</h3><p>由于 DispatchServlet 是整个 SpringMVC 的核心，所以我们进入这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到父类 HttpServletBean 中的 init() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    <span class="hljs-comment">// Set bean properties from init parameters.</span><br>    <span class="hljs-type">PropertyValues</span> <span class="hljs-variable">pvs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletConfigPropertyValues</span>(getServletConfig(), <span class="hljs-built_in">this</span>.requiredProperties);<br>    <span class="hljs-keyword">if</span> (!pvs.isEmpty()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 定位资源</span><br>            <span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> PropertyAccessorFactory.forBeanPropertyAccess(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-comment">// 加载配置信息</span><br>            <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResourceLoader</span>(getServletContext());<br>            bw.registerCustomEditor(Resource.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceEditor</span>(resourceLoader, getEnvironment()));<br>            initBeanWrapper(bw);<br>            bw.setPropertyValues(pvs, <span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-comment">//.....省略</span><br>    &#125;<br><br>    <span class="hljs-comment">// Let subclasses do whatever initialization they like.</span><br>    initServletBean();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法是获取 web.xml 中配置的属性参数，并将这些属性设置到 DispatcherServlet 中，init() 方法中还包含一个模板方法 <code>initServletBean();</code>，该方法需要其子类来实现。</p><p>HttpServletBean 类的子类为 FrameworkServlet 类，因此我们查看这个类中的 initServletBean()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initServletBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    getServletContext().log(<span class="hljs-string">&quot;Initializing Spring &quot;</span> + getClass().getSimpleName() + <span class="hljs-string">&quot; &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    <span class="hljs-comment">//....省略</span><br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.webApplicationContext = initWebApplicationContext();<br>        initFrameworkServlet();<br>    &#125;<br>    <span class="hljs-comment">//....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中，最核心的就是 <code>initWebApplicationContext()</code> 方法，进入这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>        WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.webApplicationContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span><br>        wac = <span class="hljs-built_in">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>                <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>                <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span><br>                    <span class="hljs-comment">// the root application context (if any; may be null) as the parent</span><br>                    cwac.setParent(rootContext);<br>                &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span><br>        <span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span><br>        <span class="hljs-comment">// that the parent context (if any) has already been set and that the</span><br>        <span class="hljs-comment">// user has performed any initialization such as setting the context id</span><br>        wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span><br>        <span class="hljs-comment">// support or the context injected at construction time had already been</span><br>        <span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// Publish the context as a servlet context attribute.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的方法中可以发现，都时在创建 WebApplicationContext 对象，其中有一个方法叫 <code>createWebApplicationContext(rootContext);</code> 进入这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> WebApplicationContext parent)</span> &#123;<br>    <span class="hljs-keyword">return</span> createWebApplicationContext((ApplicationContext) parent);<br>&#125;<br><br><br><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-comment">//....省略</span><br>    <br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br><br>    wac.setEnvironment(getEnvironment());<br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><p>在该方法中使用 BeanUtils 工具类的 instantiateClass() 方法来通过反射的机制创建 Web 上下文对象，即 ConfigurableWebApplicationContext 对象。并且将 web.xml 中的配置的 contextConfigLocation 变量设置到该对象中。最刷新容器。</p><p>点击 <code>configureAndRefreshWebApplicationContext(wac)</code> 方法并进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureAndRefreshWebApplicationContext</span><span class="hljs-params">(ConfigurableWebApplicationContext wac)</span> &#123;<br>    <span class="hljs-keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;<br>        <span class="hljs-comment">// The application context id is still set to its original default value</span><br>        <span class="hljs-comment">// -&gt; assign a more useful id based on available information</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.contextId != <span class="hljs-literal">null</span>) &#123;<br>            wac.setId(<span class="hljs-built_in">this</span>.contextId);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Generate default id...</span><br>            wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +<br>                      ObjectUtils.getDisplayString(getServletContext().getContextPath()) + <span class="hljs-string">&#x27;/&#x27;</span> + getServletName());<br>        &#125;<br>    &#125;<br><br>    wac.setServletContext(getServletContext());<br>    wac.setServletConfig(getServletConfig());<br>    wac.setNamespace(getNamespace());<br>    wac.addApplicationListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceFilteringListener</span>(wac, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextRefreshListener</span>()));<br><br>    <span class="hljs-comment">// The wac environment&#x27;s #initPropertySources will be called in any case when the context</span><br>    <span class="hljs-comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span><br>    <span class="hljs-comment">// use in any post-processing or initialization that occurs below prior to #refresh</span><br>    <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> wac.getEnvironment();<br>    <span class="hljs-keyword">if</span> (env <span class="hljs-keyword">instanceof</span> ConfigurableWebEnvironment) &#123;<br>        ((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());<br>    &#125;<br><br>    postProcessWebApplicationContext(wac);<br>    applyInitializers(wac);<br>    wac.refresh();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中最后一行是 <code>wac.refresh();</code> ，作用是进行容器的刷新操作，点击这个方法进入就可以进入 IoC 容器了。后面的代码就不再分析，昨天已经分析过了。</p><p>回到 FrameworkServlet 类中的 initWebApplicationContext() 方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>        WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//....省略</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>onRefresh(wac);</code> 方法中，会进入  DispatchServlet 类中 onRefresh() 方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRefresh</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>    initStrategies(context);<br>&#125;<br></code></pre></td></tr></table></figure><p>它会调用本类中 initStrategies() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>    <span class="hljs-comment">// 初始化用户处理文件上传</span><br>    initMultipartResolver(context);<br>    <span class="hljs-comment">// 初始化处理国际化</span><br>    initLocaleResolver(context);<br>    <span class="hljs-comment">// 初始化处理主题</span><br>    initThemeResolver(context);<br>    <span class="hljs-comment">// 初始化处理请求映射，其实就是调用 Controller中的方法</span><br>    initHandlerMappings(context);<br>    <span class="hljs-comment">// 初始化参数适配器</span><br>    initHandlerAdapters(context);<br>    <span class="hljs-comment">// 初始化异常处理解析器</span><br>    initHandlerExceptionResolvers(context);<br>    <span class="hljs-comment">// 初始化视图预处理器</span><br>    initRequestToViewNameTranslator(context);<br>    <span class="hljs-comment">// 初始化视图解析器</span><br>    initViewResolvers(context);<br>    <span class="hljs-comment">// 初始化 FlashMap 映射管理器</span><br>    initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个模板策略方法。对于初始化策略方法 initStrategies() ，在不指定个性化配置文件的情况下，会使用默认的配置进行初始化，默认配置位于 DispatcherServlet.properties 配置文件。这个配置文件在 spring-webmvc.jar 文件中。</p><p> <img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207111808611.png" alt="image-20220711180810533"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.web.servlet.LocaleResolver</span>=<span class="hljs-string">org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</span><br><br><span class="hljs-attr">org.springframework.web.servlet.ThemeResolver</span>=<span class="hljs-string">org.springframework.web.servlet.theme.FixedThemeResolver</span><br><br><span class="hljs-attr">org.springframework.web.servlet.HandlerMapping</span>=<span class="hljs-string">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span><br><span class="hljs-string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\</span><br><span class="hljs-string">org.springframework.web.servlet.function.support.RouterFunctionMapping</span><br><br><span class="hljs-attr">org.springframework.web.servlet.HandlerAdapter</span>=<span class="hljs-string">org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span><br><span class="hljs-string">org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span><br><span class="hljs-string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter,\</span><br><span class="hljs-string">org.springframework.web.servlet.function.support.HandlerFunctionAdapter</span><br><br><br><span class="hljs-attr">org.springframework.web.servlet.HandlerExceptionResolver</span>=<span class="hljs-string">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\</span><br><span class="hljs-string">org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</span><br><span class="hljs-string">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br><br><span class="hljs-attr">org.springframework.web.servlet.RequestToViewNameTranslator</span>=<span class="hljs-string">org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</span><br><br><span class="hljs-attr">org.springframework.web.servlet.ViewResolver</span>=<span class="hljs-string">org.springframework.web.servlet.view.InternalResourceViewResolver</span><br><br><span class="hljs-attr">org.springframework.web.servlet.FlashMapManager</span>=<span class="hljs-string">org.springframework.web.servlet.support.SessionFlashMapManager</span><br></code></pre></td></tr></table></figure><p>我们查看用于处理请求映射的 <code>initHandlerMappings(context);</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerMappings</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">this</span>.handlerMappings = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.detectAllHandlerMappings) &#123;<br>        <span class="hljs-comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span><br>        Map&lt;String, HandlerMapping&gt; matchingBeans =<br>            BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br>            <span class="hljs-built_in">this</span>.handlerMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(matchingBeans.values());<br>            <span class="hljs-comment">// We keep HandlerMappings in sorted order.</span><br>            AnnotationAwareOrderComparator.sort(<span class="hljs-built_in">this</span>.handlerMappings);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">HandlerMapping</span> <span class="hljs-variable">hm</span> <span class="hljs-operator">=</span> context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);<br>            <span class="hljs-built_in">this</span>.handlerMappings = Collections.singletonList(hm);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;<br>            <span class="hljs-comment">// Ignore, we&#x27;ll add a default HandlerMapping later.</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Ensure we have at least one HandlerMapping, by registering</span><br>    <span class="hljs-comment">// a default HandlerMapping if no other mappings are found.</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No HandlerMappings declared for servlet &#x27;&quot;</span> + getServletName() +<br>                         <span class="hljs-string">&quot;&#x27;: using default strategies from DispatcherServlet.properties&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br>        <span class="hljs-keyword">if</span> (mapping.usesPathPatterns()) &#123;<br>            <span class="hljs-built_in">this</span>.parseRequestPath = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上部分就是初始化的过程。</p><h3 id="3-执行过程"><a href="#3-执行过程" class="headerlink" title="3. 执行过程"></a>3. 执行过程</h3><p>我在学习 JavaWeb 时，知道 Servlet 的规范，它最顶层的接口是 Servlet，里面含有 service() 方法，这个方法就是用于处理请求的方法。</p><p>在 Spring MVC 中的 FrameworkServlet 类继承了 HttpServlet，并重写了 service() 方法。因此我们查看这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">HttpMethod</span> <span class="hljs-variable">httpMethod</span> <span class="hljs-operator">=</span> HttpMethod.resolve(request.getMethod());<br>    <span class="hljs-keyword">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class="hljs-literal">null</span>) &#123;<br>        processRequest(request, response);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">super</span>.service(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 FrameworkServlet  是 Spring 中的类，它扩展了 HttpServlet的功能，新增了 <code>processRequest(request, response)</code> 方法。我们回到 HttServlet类中，除了 service() 方法外，还有 doGet()、doPost()、doDelete() 等方法。在 FrameworkServlet  中已经把这些方法进行重写，比如 doGet()就去，在 HttpServlet 中定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> req.getProtocol();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_get_not_supported&quot;</span>);<br>    <span class="hljs-keyword">if</span> (protocol.endsWith(<span class="hljs-string">&quot;1.1&quot;</span>)) &#123;<br>        resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而在 FrameworkServlet 类中重写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    processRequest(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们就进入 <code>processRequest()</code> 方法来进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">failureCause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">previousLocaleContext</span> <span class="hljs-operator">=</span> LocaleContextHolder.getLocaleContext();<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">localeContext</span> <span class="hljs-operator">=</span> buildLocaleContext(request);<br><br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">previousAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> buildRequestAttributes(request, response, previousAttributes);<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBindingInterceptor</span>());<br><br>    initContextHolders(request, localeContext, requestAttributes);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        doService(request, response);<br>    &#125;<br>    <span class="hljs-comment">//....省略</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中做了很多的事情，比较复杂，其中我们先最需要关注的是处理请求的 <code>doService()</code> 方法。点击这个方法后可以发现它是 FrameworkServlet 中的一个抽象的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br><span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><p>所以其实是 DistatcherServlet 这个子类来具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logRequest(request);<br><br>    <span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br>    <span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>    Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>        attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br>        <span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>                attributesSnapshot.put(attrName, request.getAttribute(attrName));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br>    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);<br>        <span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br>        &#125;<br>        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>    &#125;<br><br>    <span class="hljs-type">RequestPath</span> <span class="hljs-variable">previousRequestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath) &#123;<br>        previousRequestPath = (RequestPath) request.getAttribute(ServletRequestPathUtils.PATH_ATTRIBUTE);<br>        ServletRequestPathUtils.parseAndCache(request);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        doDispatch(request, response);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br>            <span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>                restoreAttributesAfterInclude(request, attributesSnapshot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath) &#123;<br>            ServletRequestPathUtils.setParsedRequestPath(previousRequestPath, request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 FrameworkServlet 类中的 doService() 方法其实调用了 DispatcherSeverlet 类中的 doDispatch() 方法。这个方法将寻找合适的处理方式来执行请求。进入 doDipatch() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 视图对象</span><br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 检查是否为文件上传的请求</span><br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// 2. 获取当前请求的 Controller（也就是 Handler），即处理器</span><br>            mappedHandler = getHandler(processedRequest);<br>            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 如处理器没有找到则抛出 404 错误</span><br>                noHandlerFound(processedRequest, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 3. 获取处理请求的处理器适配器 HandleAdapter</span><br>            <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>            <span class="hljs-comment">// 处理 last-moddified 请求头</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> HttpMethod.GET.matches(method);<br>            <span class="hljs-keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4. 实现处理请求的处理器，执行后会返回视图对象</span><br>            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 结果视图对象的处理</span><br>            applyDefaultViewName(processedRequest, mv);<br>            mappedHandler.applyPostHandle(processedRequest, response, mv);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            dispatchException = ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>            <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>            dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>        &#125;<br>        <span class="hljs-comment">// 处理结果</span><br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler,<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 请求成功响应之后的方法。</span><br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来分析 getHandler() 方法，看它是如何来找到请求对应的处理程序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br>            <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br>            <span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> handler;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法中是把默认加载（DipathcerServlet.properties）或者我们自定义的拦截器（处理器），然后进行逐个遍历，如果某个处理器能够正确执行请求，则结束遍历并返回。</p>]]></content>
    
    
    <categories>
      
      <category>复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinkedList、ArrayList插入分析</title>
    <link href="/2022/07/08/2022-7-8-LinkedList%E3%80%81ArrayList%E6%8F%92%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/08/2022-7-8-LinkedList%E3%80%81ArrayList%E6%8F%92%E5%85%A5%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h1><p><code>ArrayList</code>基于数组进行实现，<code>LinkedList</code>基于链表进行实现，所以基于数据结构的不同，遍历和查找多的情况下用 <code>ArrayList</code>、插入和删除频繁的情况下用 <code>LinkedList</code>，但是，这并不意味这<code>LinkedList</code>的插入效率一定比<code>ArrayList</code>好，当我们只需要在结尾插数据时，<code>ArryList</code>的效率是高于<code>LinkedList</code>的</p><p>所以还需要具体情况具体分析</p><h1 id="LinkedList数据结构"><a href="#LinkedList数据结构" class="headerlink" title="LinkedList数据结构"></a>LinkedList数据结构</h1><p><code>LinkedList</code>，是基于链表实现，由双向链条<code>next</code>、<code>prev</code>，把数据节点穿插起来。所以，在插入数据时，是不需要像我们上一章介绍的<code>ArrayList</code>那样，扩容数组</p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081133374.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>与<code>ArrayList</code>不同，<code>LinkedList</code>的初始化不需要创建数组，因为它是一个链表结构，而且也没有传给构造函数初始化多少个空间的入参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-built_in">this</span>();<br>    addAll(c);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化方式；普通方式</span><br>LinkedList&lt;String&gt; list01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;();<br>list01.add(<span class="hljs-string">&quot;1&quot;</span>);<br><br><span class="hljs-comment">// 初始化方式；Arrays.asList</span><br>LinkedList&lt;String&gt; list02 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;(Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>));<br><br><span class="hljs-comment">// 初始化方式；Collections.nCopies</span><br>LinkedList&lt;Integer&gt; list04 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;(Collections.nCopies(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 10个0</span><br></code></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p><code>LinkedList</code>插入方法比较多，<code>List</code>中接口默认提供的是<code>add</code>，也可以指定位置插入，但是在<code>LinkedList</code>中还提供了头插<code>addFirst</code>和尾插<code>addLast</code></p><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081143472.png" alt="image-20220708114308409"></p><ol><li><code>ArrayList</code>头插时，需要把元素通过<code>Arrays.copyOf</code>的方式把数组元素移位，如果容量不足还需要扩容</li><li><code>LinkedList</code>头插时，则不需要考虑扩容以及移位问题，直接把元素定位首位，插入即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">linkFirst</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, e, f); <span class="hljs-comment">// 新的节点元素</span><br>    first = newNode;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">null</span>)<br>        last = newNode;<br>    <span class="hljs-keyword">else</span><br>        f.prev = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><p>在插入的时候只需要去创建新的节点元素，<code>new Node&lt;&gt;(null,e,f)</code>，接着把新的头元素赋值给<code>first</code>，后面判读f节点存在否，不存在就把头插节点作为最后一个节点，存在则用<code>f.prev</code>链接当前节点</p><p><strong>对比</strong>：<code>LinkedList </code>更优</p><p>在只进行头插的视乎，<code>ArrayList </code>需要做大量的位移和复制操作，而<code>LinkedList </code>的优势就体现出来了，耗时只是实例化一个对象</p><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081148335.png" alt="image-20220708114844272"></p><ol><li><code>ArrayList </code>尾插时，是不需要数据位移的，比较耗时的是数据的扩容时，需要拷贝迁移</li><li><code>LinkedList</code> 尾插时，与头插相比耗时点会在对象的实例化上</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>与头插代码相比几乎没有什么区别，只是<code>first</code>换成<code>last</code></li><li>耗时只是在创建节点上，<code>Node&lt;E&gt;</code></li></ul><p><strong>对比</strong>：<code>ArrayList </code>更优</p><h2 id="中间插"><a href="#中间插" class="headerlink" title="中间插"></a>中间插</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081346021.png" alt="image-20220708134635927"></p><ol><li><code>ArrayList</code>中间插入，首先我们知道他的定位时间复杂度是O(1)，比较耗时的点在于数据迁移和容量不足时候的扩容</li><li><code>LinkedList</code>中间插入，链表的数据实际插入时候并不会怎么耗时，但是他定位的元素的时间复杂度是O(n)，所以这部分以及元素的实例化比较耗时</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 插入元素</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>&#125;<br><br><span class="hljs-comment">// 定位元素</span><br>Node&lt;E&gt; <span class="hljs-title function_">node</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 正式插入</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkBefore</span><span class="hljs-params">(E e, Node&lt;E&gt; succ)</span> &#123;<br>    <span class="hljs-comment">// assert succ != null;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; pred = succ.prev;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(pred, e, succ);<br>    succ.prev = newNode;<br>    <span class="hljs-keyword">if</span> (pred == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        pred.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>找到指定位置插入的过程就比较简单了，与头插、尾插，相差不大</li><li>整个过程可以看到，插入中比较耗时的点会在遍历寻找插入位置上</li></ul><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081352539.png" alt="image-20220708135241491"></p><p>通过测试可以看到 <code>Linkedlist </code>在中间插入时，遍历寻找位置还是非常耗时了。所以不同的情况下，需要选择不同的 <code>List </code>集合做业务</p><p><strong>对比</strong>：<code>ArrayList </code>更优</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081355824.png" alt="image-20220708135526764"></p><p><strong>以<code>remove()</code>为例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-literal">null</span>) &#123;<br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item)) &#123;<br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// unlink(x)解链</span><br>E <span class="hljs-title function_">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> &#123;<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>        first = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        prev.next = next;<br>        x.prev = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>) &#123;<br>        last = prev;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        next.prev = prev;<br>        x.next = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    x.item = <span class="hljs-literal">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">xx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>    list.add(i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="普通for循环"><a href="#普通for循环" class="headerlink" title="普通for循环"></a>普通for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_LinkedList_for0</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>        xx += list.get(i);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_LinkedList_for1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (Integer itr : list) &#123;<br>        xx += itr;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Iterator循环"><a href="#Iterator循环" class="headerlink" title="Iterator循环"></a>Iterator循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_LinkedList_Iterator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    Iterator&lt;Integer&gt; iterator = list.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>        xx += next;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_LinkedList_forEach</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    list.forEach(integer -&gt; &#123;<br>        xx += integer;<br>    &#125;);<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_LinkedList_stream</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    list.stream().forEach(integer -&gt; &#123;<br>        xx += integer;<br>    &#125;);<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>LinkedList</tag>
      
      <tag>ArrayList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双端队列、延迟队列、阻塞队列</title>
    <link href="/2022/07/08/2022-7-8-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E3%80%81%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E3%80%81%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    <url>/2022/07/08/2022-7-8-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E3%80%81%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E3%80%81%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h1><p>程序开发中数据结构可以分为这八类：<strong>数组、链表、栈、队列、散列表、树、堆、图</strong></p><table><thead><tr><th>类型</th><th>实现</th></tr></thead><tbody><tr><td>数组</td><td>ArrayList</td></tr><tr><td>链表</td><td>LinkedList</td></tr><tr><td>树</td><td>2-3树、红黑树</td></tr><tr><td>散列表</td><td>HashMap</td></tr><tr><td>栈</td><td>Stack</td></tr><tr><td>队列</td><td>Queue、Deque</td></tr></tbody></table><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081634845.png" alt="image-20220708163427762"></p><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><blockquote><p>这是一个已经被抛弃的实现类，注意是实现类，并不是抛弃了这种数据结构</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out</span><br><span class="hljs-comment"> * (LIFO) stack of objects. It extends class &lt;tt&gt;Vector&lt;/tt&gt; with five</span><br><span class="hljs-comment"> * operations that allow a vector to be treated as a stack. The usual</span><br><span class="hljs-comment"> * &lt;tt&gt;push&lt;/tt&gt; and &lt;tt&gt;pop&lt;/tt&gt; operations are provided, as well as a</span><br><span class="hljs-comment"> * method to &lt;tt&gt;peek&lt;/tt&gt; at the top item on the stack, a method to test</span><br><span class="hljs-comment"> * for whether the stack is &lt;tt&gt;empty&lt;/tt&gt;, and a method to &lt;tt&gt;search&lt;/tt&gt;</span><br><span class="hljs-comment"> * the stack for an item and discover how far it is from the top.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * When a stack is first created, it contains no items.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;A more complete and consistent set of LIFO stack operations is</span><br><span class="hljs-comment"> * provided by the &#123;<span class="hljs-doctag">@link</span> Deque&#125; interface and its implementations, which</span><br><span class="hljs-comment"> * should be used in preference to this class.  For example:</span><br><span class="hljs-comment"> * &lt;pre&gt;   &#123;<span class="hljs-doctag">@code</span></span><br><span class="hljs-comment"> * ✨ Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</span><br><span class="hljs-comment"> * &#125;&lt;/pre&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>  Jonathan Payne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span>   JDK1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vector</span>&lt;E&gt; &#123; ... &#125;<br></code></pre></td></tr></table></figure><ul><li>从上面源码的注释可以获取到，<code>Stack</code>栈是在<code>JDK1.0</code>的时代，基于继承<code>Vector</code>实现的本身<code>Vector</code>就是一个不被推荐使用的类，主要在于它的一些操作方法锁(<code>synchronized</code>)的力度太粗，都是放到方法上</li><li><code>Stack</code>栈底层是使用<code>Vector</code>数组实现，在学习<code>ArrayList</code>时候我们知道，数组结构在元素添加和删除需要通过<code>System.arraycopy</code>，进行扩容操作。而本身栈的特点就是首尾元素的操作，也不需要遍历，使用数组结构其实并不太理想</li><li>同是这个方法的注释也明确标出来，推荐使用<code>Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</code>，虽然这也是数组结构，但是他没有粗粒度的锁，同时可以申请指定空间并且在扩容时也要优于<code>Stack</code>。并且这个还是一个双端队列，使用起来更加灵活</li></ul><h1 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h1><p><code>ArrayDeque </code>是基于数组实现的可动态扩容的双端队列，也就是说你可以在队列的头和尾同时插入和弹出元素。当元素数量超过数组初始化长度时，则需要扩容和迁移数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基于数组</span><br><span class="hljs-keyword">transient</span> Object[] elements; <span class="hljs-comment">// non-private to simplify nested class access</span><br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 带容量的初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDeque</span><span class="hljs-params">(<span class="hljs-type">int</span> numElements)</span> &#123;<br>    allocateElements(numElements);<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateSize</span><span class="hljs-params">(<span class="hljs-type">int</span> numElements)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">initialCapacity</span> <span class="hljs-operator">=</span> MIN_INITIAL_CAPACITY;<br>    <span class="hljs-comment">// Find the best power of two to hold elements.</span><br>    <span class="hljs-comment">// Tests &quot;&lt;=&quot; because arrays aren&#x27;t kept full.</span><br>    <span class="hljs-keyword">if</span> (numElements &gt;= initialCapacity) &#123;<br>        initialCapacity = numElements;<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">1</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">2</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">4</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">8</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>        initialCapacity++;<br><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)   <span class="hljs-comment">// Too many elements, must back off</span><br>            initialCapacity &gt;&gt;&gt;= <span class="hljs-number">1</span>;<span class="hljs-comment">// Good luck allocating 2 ^ 30 elements</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> initialCapacity;<br>&#125;<br></code></pre></td></tr></table></figure><p>在初始化的过程中，它需要找到你当前传输值最小的 2 的倍数的一个容量。这与 HashMap 的初始化过程相似</p><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    elements[head = (head - <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)] = e;<br>    <span class="hljs-keyword">if</span> (head == tail)<br>        doubleCapacity();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    elements[tail] = e;<br>    <span class="hljs-keyword">if</span> ( (tail = (tail + <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)) == head)<br>        doubleCapacity();<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分入栈元素，其实就是给数组赋值</p><ol><li><p>在 addFirst()中，定位下标，head &#x3D; (head - 1) &amp; (elements.length - 1)，因为我们的数组长度是 2^n 的倍数，所以 2^n - 1 就是一个全是 1 的二进制数，可以用于与运算得出数组下标。</p></li><li><p>同样 addLast()中，也使用了相同的方式定位下标，只不过它是从 0 开始，往上增加</p></li><li><p>最后，当头(head)与尾(tile)相等时，数组则需要两倍扩容 <code>doubleCapacity</code></p></li><li><p><code>head = 0;tail = n;</code>，head和tail在初始化时被赋的值，其实是占用了额外的一个格子去放头结点</p></li></ol><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doubleCapacity</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">assert</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span>= tail;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> elements.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> n - p; <span class="hljs-comment">// number of elements to the right of p</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> n &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Sorry, deque too big&quot;</span>);<br>    Object[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[newCapacity];<br>    System.arraycopy(elements, p, a, <span class="hljs-number">0</span>, r);<br>    System.arraycopy(elements, <span class="hljs-number">0</span>, a, r, p);<br>    elements = a;<br>    head = <span class="hljs-number">0</span>;<br>    tail = n;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实以上这部分源码，就是进行两倍<code>n &lt;&lt; 1</code>扩容，同时把两端数据迁移进新的数组</p><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p><code>Linkedlist</code>天生就可以支持双端队列，而且从头尾取数据也是它时间复杂度 O(1)的。同时数据的插入和删除也不需要像数组队列那样拷贝数据，虽然 <code>Linkedlist</code>有这些优点，但不能说 <code>ArrayDeque </code>因为有数组复制性能比它低</p><p><code>LinkedList</code>在功能体现上和<code>ArrayDeque</code>是差不多的</p><h2 id="入栈、出栈源码"><a href="#入栈、出栈源码" class="headerlink" title="入栈、出栈源码"></a>入栈、出栈源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">linkFirst</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, e, f);<br>    first = newNode;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">null</span>)<br>        last = newNode;<br>    <span class="hljs-keyword">else</span><br>        f.prev = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个方法分别是给链表的首尾节点插入元素，因为这是链表结构，所以也不存在扩容，只需要把双向链路链接上即可</p><h1 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h1><p>在 <code>Java </code>的队列数据结构中，还有一种队列是延时队列，可以通过设定存放时间，依次轮训获取</p><p>DelayQueue 是一个 BlockingQueue （无界阻塞）队列，它本质就是封装了一个 PriorityQueue （优先级队列），并加上了延时功能。可以这么说，DelayQueue 就是一个使用优先队列（PriorityQueue）实现的 BlockingQueue，优先队列的比较基准值是时间</p><p>即：<strong>DelayQueue &#x3D; BlockingQueue + PriorityQueue + Delayed</strong></p><p>要实现 DelayQueue 延时队列，队中元素要 implements Delayed 接口，这个接口里只有一个 getDelay 方法，用于设置延期时间。Delayed 由实现了 Comparable 接口， compareTo 方法负责对队列中的元素进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelayed</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Delayed</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String str;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> time;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestDelayed</span><span class="hljs-params">(String str, <span class="hljs-type">long</span> time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>        <span class="hljs-built_in">this</span>.time = System.currentTimeMillis() + (time &gt; <span class="hljs-number">0</span> ? unit.toMillis(time) : <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>        <span class="hljs-keyword">return</span> time - System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed o)</span> &#123;<br>        <span class="hljs-type">TestDelayed</span> <span class="hljs-variable">work</span> <span class="hljs-operator">=</span> (TestDelayed) o;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.time - work.time;<br>        <span class="hljs-keyword">if</span> (diff &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_DelayQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    DelayQueue&lt;TestDelayed&gt; delayQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayQueue</span>&lt;TestDelayed&gt;();<br>    delayQueue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestDelayed</span>(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">5</span>, TimeUnit.SECONDS));<br>    delayQueue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestDelayed</span>(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS));<br>    delayQueue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestDelayed</span>(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS));<br><br>    logger.info(((TestDelayed) delayQueue.take()).getStr());<br>    logger.info(((TestDelayed) delayQueue.take()).getStr());<br>    logger.info(((TestDelayed) delayQueue.take()).getStr());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="入栈-1"><a href="#入栈-1" class="headerlink" title="入栈"></a>入栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-comment">// ReentrantLock 可重入锁</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        q.offer(e);<br>        <span class="hljs-keyword">if</span> (q.peek() == e) &#123;<br>            leader = <span class="hljs-literal">null</span>;<br>            available.signal();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br>------PriorityQueue.java-----------<br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUpUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (k - <span class="hljs-number">1</span>) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> queue[parent];<br>        <span class="hljs-keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        queue[k] = e;<br>        k = parent;<br>    &#125;<br>    queue[k] = x;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>DelayQueue </code>是基于数组实现的，所以可以动态扩容，另外它插入元素的顺序并不影响最终的输出顺序。</li><li>而元素的排序依赖于 <code>compareTo </code>方法进行排序，也就是休眠的时间长短决定的。</li><li>同时只有实现了 <code>Delayed </code>接口，才能存放元素。</li></ul><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> q.peek();<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>                available.await();<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> first.getDelay(NANOSECONDS);<br>                <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> q.poll();<br>                first = <span class="hljs-literal">null</span>; <span class="hljs-comment">// don&#x27;t retain ref while waiting</span><br>                <span class="hljs-keyword">if</span> (leader != <span class="hljs-literal">null</span>)<br>                    available.await();<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">Thread</span> <span class="hljs-variable">thisThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                    leader = thisThread;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        available.awaitNanos(delay);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-keyword">if</span> (leader == thisThread)<br>                            leader = <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (leader == <span class="hljs-literal">null</span> &amp;&amp; q.peek() != <span class="hljs-literal">null</span>)<br>            available.signal();<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其它队列"><a href="#其它队列" class="headerlink" title="其它队列"></a>其它队列</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081954303.png" alt="image-20220708195416153"></p><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207081954758.png" alt="image-20220708195432687"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataQueueStack</span> &#123;<br>    <span class="hljs-keyword">private</span> BlockingQueue&lt;DataBean&gt; dataQueue = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DataQueueStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//实例化队列</span><br>        dataQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;DataBean&gt;(<span class="hljs-number">100</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加数据到队列</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataBean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doOfferData</span><span class="hljs-params">(DataBean dataBean)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dataQueue.offer(dataBean, <span class="hljs-number">2</span>, TimeUnit.SECONDS);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 弹出队列数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> DataBean <span class="hljs-title function_">doPollData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dataQueue.poll(<span class="hljs-number">2</span>, TimeUnit.SECONDS);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得队列数据个数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doGetQueueCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dataQueue.size();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这是一个 <code>LinkedBlockingQueue </code>队列使用案例，一方面存储数据，一方面从队列中获取进行消费。</li><li>因为这是一个阻塞队列，所以在获取元素的时候，如果队列为空，会进行阻塞。</li><li><code>LinkedBlockingQueue </code>是一个阻塞队列，内部由两个 <code>ReentrantLock </code>来实现出入队列的线程安全，由各自的 <code>Condition </code>对象的 <code>await </code>和 <code>signal </code>来实现等待和唤醒功能</li></ul>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList源码分析</title>
    <link href="/2022/07/07/2022-7-7-ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/07/2022-7-7-ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class="hljs-comment">// DEFAULTCAPACITY_EMPTY_ELEMENTDATA 已经被提前定义好了</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;; <br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>通常情况空构造函数初始化ArrayList更常用，这种方式数组的长度会在以一次插入数据时候进行设置</li><li>第二种情况，当我们已近知道要填入多少个元素到ArrayList中了，那么这个时候哈就可以直接初始化一个预先设定好的长度，以达到提供性能，减少ArrayList中的拷贝操作，当然这种情况下数组的长度依旧会在以一次插入数据时候进行设置</li></ul><h2 id="普通方式"><a href="#普通方式" class="headerlink" title="普通方式"></a>普通方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList"></a>Arrays.asList</h2><p>通过 <code>Arrays.asList</code> 传递给 <code>ArrayList </code>构造函数的方式进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    elementData = c.toArray();<br>    <span class="hljs-keyword">if</span> ((size = elementData.length) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br>        <span class="hljs-keyword">if</span> (elementData.getClass() != Object[].class)<br>            elementData = Arrays.copyOf(elementData, size, Object[].class);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// replace with empty array.</span><br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过构造函数可以看到，只要实现 Collection 类的都可以作为入参</li><li>在通过转为数组以及拷贝 Arrays.copyOf 到 Object[]集合中在赋值给属性elementData</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">t</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Integer&gt; list1 = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    System.out.println(<span class="hljs-string">&quot;通过数组转换：&quot;</span> + (list1.toArray().getClass() == Object[].class));<br>    <br>    ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    System.out.println(<span class="hljs-string">&quot;通过集合转换：&quot;</span> + (list2.toArray().getClass() == Object[].class));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">通过数组转换：false</span><br><span class="hljs-comment">通过集合转换：true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><code>public Object[] toArray()</code> 返回的类型不一定就是 <code>Object[]</code>，其类型取决于其返回的实际类型，毕竟 <code>Object </code>是父类，它可以是其他任意类型</p><p>子类实现和父类同名的方法，仅仅返回值不一致时，默认调用的是子类的实现方法</p><p>造成这个结果的原因，如下；</p><ol><li><code>Arrays.asList</code> 使用的是：<code>Arrays.copyOf(this.a, size,(Class&lt;? extends T[]&gt;) a.getClass());</code></li><li><code>ArrayList</code> 构造函数使用的是：<code>Arrays.copyOf(elementData, size, Object[].class);</code></li></ol><hr><ul><li>Arrays.asList 构建的集合，不能赋值给 ArrayList</li><li>Arrays.asList 构建的集合，不能再添加元素</li><li>Arrays.asList 构建的集合，不能再删除元素</li></ul><blockquote><p>在官方文档就已经说明返回的是一个固定大小的集合</p></blockquote><p>其实造成上面结果的原因是这两个<code>List</code>不是同一个东西，而且<code>Arrays</code>下的<code>ArrayList</code>是一个私有类，只能通过asList使用，不能单独创建</p><p>这个ArrayList不能添加和删除，主要是因为它的实现方式，内部是一个数组</p><blockquote><p><code>Arrays </code>是一个工具包，里面还有一些非常好用的方法，例如；二分查找<code>Arrays.binarySearch</code>、排序 <code>Arrays.sort</code> 等</p></blockquote><h2 id="Collections-ncopies"><a href="#Collections-ncopies" class="headerlink" title="Collections.ncopies"></a>Collections.ncopies</h2><p><code>Collections.nCopies</code> 是集合方法中用于生成多少份某个指定元素的方法，接下来就用它来初始化 ArrayList，如下；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(Collections.nCopies(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><blockquote><p>这会初始化一个由 10 个 0 组成的集合</p></blockquote><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><h2 id="普通插入"><a href="#普通插入" class="headerlink" title="普通插入"></a>普通插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Appends the specified element to the end of this list.</span><br><span class="hljs-comment">   将指定元素附加到此列表的末尾</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> e element to be appended to this list</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    modCount++;<br>    add(e, elementData, size);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入时扩容"><a href="#插入时扩容" class="headerlink" title="插入时扩容"></a>插入时扩容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    rangeCheckForAdd(index);<br>    modCount++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> s;<br>    Object[] elementData;<br>    <span class="hljs-keyword">if</span> ((s = size) == (elementData = <span class="hljs-built_in">this</span>.elementData).length)<br>        elementData = grow();<br>    System.arraycopy(elementData, index,<br>                     elementData, index + <span class="hljs-number">1</span>,<br>                     s - index);<br>    elementData[index] = element;<br>    size = s + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rangeCheckForAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt; size || index &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    Objects.checkIndex(index, size);<br>    <span class="hljs-keyword">final</span> Object[] es = elementData;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> (E) es[index];<br>    fastRemove(es, index);<br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br><br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fastRemove</span><span class="hljs-params">(Object[] es, <span class="hljs-type">int</span> i)</span> &#123;<br>    modCount++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> newSize;<br>    <span class="hljs-keyword">if</span> ((newSize = size - <span class="hljs-number">1</span>) &gt; i)<br>        System.arraycopy(es, i + <span class="hljs-number">1</span>, es, i, newSize - i);<br>    es[size = newSize] = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>ArrayList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="/2022/07/06/2022-7-6-HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/06/2022-7-6-HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h1><ul><li><p>HashMap最早出现在JDK1.2中,底层基于散列算法实现</p></li><li><p>HashMap允许nul键和null值</p></li><li><p>HashMap并不保证键值对的顺序</p></li><li><p>HashMap是非线程安全的</p></li><li><p>等等…</p></li></ul><blockquote><p>在JDK1.7时,HashMap采用的是数组+链表,但是在JDK1.8的时候,HashMap采用的是数组加{链表或红黑树}</p></blockquote><h1 id="初步了解HashMap"><a href="#初步了解HashMap" class="headerlink" title="初步了解HashMap"></a>初步了解HashMap</h1><blockquote><p>从根源去看,如果说我们现在有一堆字符串,我想要将他存在一个数组中,并要求获取每个元素的时间复杂度是O(1),这个时候就可以使用HashMap</p></blockquote><p>我们只需要通过某种方式去计算单个字符的索引下标即可,就像下面这样</p><p>其中<code>key.hashCode() &amp; (tab.length - 1)</code>其实就是<code>key.hashCode()</code>对8进行取余</p><blockquote><p>记x为2的幂次方</p><p>这个&amp;运算取余的操作只适用于对x这样的进行操作,就是&amp;一个2的幂次方 - 1,就等同于对x进行取余</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义要存放的数组</span><br>String[] tab = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">8</span>];<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-comment">// 计算索引位置</span><br><span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> key.hashCode() &amp; (tab.length - <span class="hljs-number">1</span>);  <br>tab[idx] = key;<br></code></pre></td></tr></table></figure><h1 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h1><blockquote><p>顾名思义,该函数是为了增加随机性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>从上面可以看出<code>hashCode</code>的返回值是<code>int</code>类型,也就是二进制是32位,那么此时<code>hashCode</code>的取值范围是[-2147483648, 2147483647],长度很大,在初始化数组时候不会去将数组初始化这么大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The default initial capacity - MUST be a power of two.</span><br><span class="hljs-comment"> ===容量必须是2的幂,[2,4,8,16,32...]===</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br></code></pre></td></tr></table></figure><p>可以看到,初始化的时候,会将这个数组长度初始化为16,但是我们获得的<code>hashcode</code>是32位,不能直接使用,所以需要对数组的长度进行取模得到下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>hashMap</code>源码这里不只是直接获取哈希值,还进行了一次扰动计算,<code>(h =key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>.把哈希值右移 16 位,也就正好是自己长度的一半,之后与原哈希值做异或运算,这样就混合了原哈希值中的高位和低位,增大了随机性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">00000000001011</span> <span class="hljs-number">1011001101000110</span>  <span class="hljs-comment">//  初始  &quot;小赵&quot;.hashCode()</span><br><span class="hljs-number">00000000000000</span> <span class="hljs-number">0000000000001011</span>  <span class="hljs-comment">//  &gt;&gt;&gt; 16</span><br><span class="hljs-number">00000000001011</span> <span class="hljs-number">1011001101001101</span>  <span class="hljs-comment">//  ^</span><br></code></pre></td></tr></table></figure><p>观察仔细的话,还可以发现<code>(key == null) ? 0  : (h </code>,说明<code>HashMap</code>可以<code>key</code>为<code>null</code>,且此时的<code>hash</code>值为0</p><ul><li>使用扰动函数就是为了增加随机性,让数据元素更加均衡的散列,减少碰撞</li></ul><h1 id="初始化容量和负载因子"><a href="#初始化容量和负载因子" class="headerlink" title="初始化容量和负载因子"></a>初始化容量和负载因子</h1><h2 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h2><p>可以先看下面这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span>  initialCapacity 初始化容量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span>  loadFactor      负载因子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>    ...<br>    <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>    <span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity); <span class="hljs-comment">// 阈值</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>阀值 <code>threshold</code>,通过方法 <code>tableSizeFor </code>进行计算,是根据初始化来计算的</li><li>这个方法也就是要寻找比初始值大的,最小的那个2<code>进制</code>数值.比如传了<code>17</code>,我应该找到的是<code>32</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 计算阈值大小的方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 最大容量</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>; <br></code></pre></td></tr></table></figure><p>这个地方计算阈值是先要将<code>cap-1</code>,再将他最高位往下全部变成<code>1</code>(<code>1111111</code>),最后再<code>cap+1</code>,会变成<code>1000000</code>这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始值我们用 17   -&gt;    17 - 1  =  16</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-comment">// n |= n &gt;&gt;&gt; 1;</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-comment">// n |= n &gt;&gt;&gt; 2;</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-comment">// n |= n &gt;&gt;&gt; 4;</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><span class="hljs-comment">// n |= n &gt;&gt;&gt; 8;</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>   <span class="hljs-comment">// n |= n &gt;&gt;&gt; 16;</span><br><span class="hljs-comment">// 最后+1</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-comment">// 32    </span><br></code></pre></td></tr></table></figure><h2 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br></code></pre></td></tr></table></figure><p>所以,要选择一个合理的大小下进行扩容,默认值 0.75 就是说当阀值容量占了3&#x2F;4 时赶紧扩容,减少 Hash 碰撞</p><p>同时 0.75 是一个默认构造值,在创建 HashMap 也可以调整,比如你希望用更多的空间换取时间,可以把负载因子调的更小一些,减少碰撞</p><h1 id="扩容元素拆分"><a href="#扩容元素拆分" class="headerlink" title="扩容元素拆分"></a>扩容元素拆分</h1><p>这个地方可以举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_hashMap</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;jlkk&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;lopi&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;jmdw&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;e4we&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;io98&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;nmhg&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;vfg6&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;gfrt&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;alpo&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;vfbh&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;bnhj&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;zuio&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;iu8e&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;yhjk&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;plop&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;dd0p&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (String key : list) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode() ^ (key.hashCode() &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>        System.out.println(<span class="hljs-string">&quot;字符串:&quot;</span> + key + <span class="hljs-string">&quot; \tIdx(16):&quot;</span> + ((<span class="hljs-number">16</span> - <span class="hljs-number">1</span>) &amp; hash) + <span class="hljs-string">&quot; \tBit值:&quot;</span> + Integer.toBinaryString(hash) + <span class="hljs-string">&quot; - &quot;</span> + Integer.toBinaryString(hash &amp; <span class="hljs-number">16</span>) + <span class="hljs-string">&quot; \t\tIdx(32):&quot;</span> + ((<span class="hljs-number">32</span> - <span class="hljs-number">1</span>) &amp; hash));<br>        System.out.println(Integer.toBinaryString(key.hashCode()) +<span class="hljs-string">&quot; &quot;</span>+ Integer.toBinaryString(hash) + <span class="hljs-string">&quot; &quot;</span> + Integer.toBinaryString((<span class="hljs-number">32</span> - <span class="hljs-number">1</span>) &amp; hash));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽取两条内容出来</span><br>字符串:jlkk <span class="hljs-title function_">Idx</span><span class="hljs-params">(<span class="hljs-number">16</span>)</span>:<span class="hljs-number">3</span> Bit 值:<span class="hljs-number">1100011101001000010011</span> - <span class="hljs-number">10000</span> Idx(<span class="hljs-number">32</span>):<span class="hljs-number">19</span><br>hashcoded1100011101001000100010 <span class="hljs-number">1100011101001000010011</span> <span class="hljs-number">10011</span><br>    <br>字符串:lopi <span class="hljs-title function_">Idx</span><span class="hljs-params">(<span class="hljs-number">16</span>)</span>:<span class="hljs-number">14</span> Bit 值:<span class="hljs-number">1100101100011010001110</span> - <span class="hljs-number">0</span> Idx(<span class="hljs-number">32</span>):<span class="hljs-number">14</span><br><span class="hljs-number">1100101100011010111100</span> <span class="hljs-number">1100101100011010001110</span> <span class="hljs-number">1110</span><br></code></pre></td></tr></table></figure><p>可以先找规律的去看</p><p>当容量为16时,对应的坐标是3和14,<code>(16 - 1) &amp; hash</code></p><p>可以注意到<code>hash &amp; 16</code>分别是<code>10000</code>和<code>0</code>,16对应的二进制是<code>10000</code>,所以一个数和他相与,得出来的要么是<code>10000</code>,要么是<code>0</code></p><p><strong>如果是<code>0</code></strong>,是不是就代表着<code>hash</code>这一位上是<code>0</code>,可以推出<code>(32 - 1) &amp; hash </code> &#x3D;&#x3D; <code>(16 - 1) &amp; hash</code> ,也就是位置并没有发生改变</p><p><strong>同理可以推出不是<code>0</code>的话</strong>,我们可以让一开始求得的下标加上<code>16</code>,就得到新的扩容后的坐标了</p><blockquote><p>这个地方设计的非常巧妙</p></blockquote><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><h2 id="插入源码"><a href="#插入源码" class="headerlink" title="插入源码"></a>插入源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-comment">// hash(key) 进行了hash扰动</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>); <br>&#125;<br><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">// 初始化桶数组 table,table 被延迟到插入新数据时再进行初始化</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">// 如果桶中不包含键值对节点引用,则将新键值对节点的引用存入桶中即可</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时,则将 e 指向该键值对</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">// 如果桶中的引用类型为 TreeNode,则调用红黑树的插入方法</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 对链表进行遍历,并统计链表长度</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-comment">// 链表中不包含要插入的键值对节点时,则将该节点接在链表的最后</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">// 如果链表长度大于或等于树化阈值,则进行树化操作</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 条件为 true,表示当前链表包含要插入的键值对,终止遍历</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断要插入的键值对是否存在 HashMap 中</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-comment">// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue; <span class="hljs-comment">// 因为是替换value,所以不需要去判断容量,直接返回结果</span><br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-comment">// 键值对数量超过阈值时,则进行扩容</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="扩容源码"><a href="#扩容源码" class="headerlink" title="扩容源码"></a>扩容源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Cap 是 capacity 的缩写,容量.如果容量不为空,则说明已经初始化</span><br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 如果容量达到最大 1 &lt;&lt; 30 则不再扩容</span><br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-comment">// 按旧容量和阀值的 2 倍计算新容量和阀值</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <br>    <span class="hljs-comment">// initial capacity was placed in threshold 翻译过来的意思,如下;</span><br>    <span class="hljs-comment">// 初始化时,将 threshold 的值赋值给 newCap,</span><br>    <span class="hljs-comment">// HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span><br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        <span class="hljs-comment">// 这一部分也是,源代码中也有相应的英文注释</span><br>        <span class="hljs-comment">// 调用无参构造方法时,数组桶数组容量为默认容量 1 &lt;&lt; 4; aka 16</span><br>        <span class="hljs-comment">// 阀值;是默认容量与负载因子的乘积,0.75</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <br>    <span class="hljs-comment">// newThr 为 0,则使用阀值公式计算容量</span><br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    <br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    <span class="hljs-comment">// 初始化数组桶,用于存放 key</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>    table = newTab;<br>    <span class="hljs-comment">// 如果旧数组桶,oldCap 有值,则遍历将键值映射到新数组桶中</span><br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br>                oldTab[j] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    <span class="hljs-comment">// 这里 split,是红黑树拆分操作.在重新映射时操作的.</span><br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-comment">// 这里是链表,如果当前是按照链表存放的,则将链表节点按原顺序进行分组</span><br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">// 将分组后的链表映射到桶中</span><br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                        loTail.next = <span class="hljs-literal">null</span>;<br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-literal">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表树化"><a href="#链表树化" class="headerlink" title="链表树化"></a>链表树化</h2><blockquote><p>在jdk1.8之前,采用的都是链表方式存放数据,但是这样从链表中取数据的时间复杂度就是O(n),链表越长性能越差,因此在jdk1.8中把过长的链表,也就是8个,优化成自平衡的红黑树结构,以此让定位元素的时间复杂度优化近似O(logn)</p><p>但也并不是完全抛弃了链表,因为在元素相对不多的情况下,链表的插入速度更快,所以总会考虑设定阈值为8才进行红黑树转换操作</p></blockquote><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207071029357.png" alt="image-20220707102944268"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> &#123;<br>    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">// 不一定树化还可能只是扩容.主要桶数组容量是否小于64 MIN_TREEIFY_CAPACITY</span><br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        TreeNode&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// 将普通节点转换为树节点,但此时还不是红黑树,也就是说还不一定平衡</span><br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (tl == <span class="hljs-literal">null</span>)<br>                hd = p;<br>            <span class="hljs-keyword">else</span> &#123;<br>                p.prev = tl;<br>                tl.next = p;<br>            &#125;<br>            tl = p;<br>        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">// 转红黑树操作</span><br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>链表树化的条件:1.链表长度大于等于8,桶容量大于64,否则只是扩容,不会树化</li><li>链表树化的过程中是吸纳由链表转换为树节点,此时的树并不是一颗平衡树,同时在此过程中会<strong>记录链表的顺序</strong>,这主要方便后序转链表和拆分更加方便</li></ul><h2 id="红黑树转链表"><a href="#红黑树转链表" class="headerlink" title="红黑树转链表"></a>红黑树转链表</h2><p>链表转红黑树的过程中,记录了原有链表的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">untreeify</span><span class="hljs-params">(HashMap&lt;K,V&gt; map)</span> &#123;<br>    Node&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 遍历 TreeNode</span><br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; q = <span class="hljs-built_in">this</span>; q != <span class="hljs-literal">null</span>; q = q.next) &#123;<br>        <span class="hljs-comment">// TreeNode 替换 Node</span><br>        Node&lt;K,V&gt; p = map.replacementNode(q, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (tl == <span class="hljs-literal">null</span>)<br>            hd = p;<br>        <span class="hljs-keyword">else</span><br>            tl.next = p;<br>        tl = p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> hd;<br>&#125;<br><br><span class="hljs-comment">// 替换方法</span><br>Node&lt;K,V&gt; <span class="hljs-title function_">replacementNode</span><span class="hljs-params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(p.hash, p.key, p.value, next);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为记录了链表关系,所以替换过程很容易.所以好的数据结构可以让操作变得更加容易</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">// 同样需要经过扰动函数计算哈希值</span><br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : e.value;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-type">int</span> n; K k;<br>    <span class="hljs-comment">// 判断桶数组的是否为空和长度值</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        <span class="hljs-comment">// 计算下标,哈希值与数组长度-1</span><br>        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        <br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>            ((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// TreeNode 节点直接调用红黑树的查找方法,时间复杂度 O(logn)</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br>            <span class="hljs-comment">// 如果是链表就依次遍历查找</span><br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = removeNode(hash(key), key, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) == <span class="hljs-literal">null</span> ?<br>        <span class="hljs-literal">null</span> : e.value;<br>&#125;<br><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">removeNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key, Object value,</span><br><span class="hljs-params">                           <span class="hljs-type">boolean</span> matchValue, <span class="hljs-type">boolean</span> movable)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, index;<br>    <span class="hljs-comment">// 定位桶数组中的下标位置,index = (n - 1) &amp; hash</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (p = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        Node&lt;K,V&gt; node = <span class="hljs-literal">null</span>, e; K k; V v;<br>        <span class="hljs-comment">// 如果键的值与链表第一个节点相等,则将 node 指向该节点</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            node = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = p.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 树节点,调用红黑树的查找方法,定位节点</span><br>            <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 遍历链表,找到待删除节点</span><br>                <span class="hljs-keyword">do</span> &#123;<br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key ||<br>                         (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k)))) &#123;<br>                        node = e;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    p = e;<br>                &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 删除节点,以及红黑树需要修复,因为删除后会破坏平衡性.链表的删除更加简单</span><br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||<br>                             (value != <span class="hljs-literal">null</span> &amp;&amp; value.equals(v)))) &#123;<br>            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TreeNode)<br>                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="hljs-built_in">this</span>, tab, movable);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == p)<br>                tab[index] = node.next;<br>            <span class="hljs-keyword">else</span><br>                p.next = node.next;<br>            ++modCount;<br>            --size;<br>            afterNodeRemoval(node);<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><h2 id="添加元素-在-HashMap-还是只链表结构时"><a href="#添加元素-在-HashMap-还是只链表结构时" class="headerlink" title="添加元素,在 HashMap 还是只链表结构时"></a>添加元素,在 HashMap 还是只链表结构时</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207072008336.png" alt="image-20220707200846170"></p><h2 id="添加元素-在-HashMap-转换为红黑树时候"><a href="#添加元素-在-HashMap-转换为红黑树时候" class="headerlink" title="添加元素,在 HashMap 转换为红黑树时候"></a>添加元素,在 HashMap 转换为红黑树时候</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207072008827.png" alt="image-20220707200829678"></p><h2 id="删除元素-在-HashMap-转换为链表结构时"><a href="#删除元素-在-HashMap-转换为链表结构时" class="headerlink" title="删除元素,在 HashMap 转换为链表结构时"></a>删除元素,在 HashMap 转换为链表结构时</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207072008360.png" alt="image-20220707200837192"></p>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>瑞吉外卖的技术总结</title>
    <link href="/2022/07/05/2022-7-5-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/"/>
    <url>/2022/07/05/2022-7-5-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/</url>
    
    <content type="html"><![CDATA[<h1 id="WebMVC"><a href="#WebMVC" class="headerlink" title="WebMVC"></a>WebMVC</h1><h2 id="消息转化器"><a href="#消息转化器" class="headerlink" title="消息转化器"></a>消息转化器</h2><blockquote><p>将后端返回给前端的对象转换为json,对long数据转换,日期等</p></blockquote><p>使用Mapper文件夹替代Dao</p><p>同时使用<code>@Mapper</code>注解而不是<code>@Repository</code>注解</p><blockquote><p>两者区别:</p><p>@Repository是spring的注解,标记为一个bean,配合mybatis时需要配置@MapperScan</p><p>@Mapper是Mybatis的注解,不需要额外的@MapperScan扫描</p></blockquote><h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><h2 id="LambdaQueryWrapper"><a href="#LambdaQueryWrapper" class="headerlink" title="LambdaQueryWrapper"></a>LambdaQueryWrapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>queryWrapper.eq(Employee::getName,employee.getUsername());<br><span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> employeeService.getOne(queryWrapper);<br></code></pre></td></tr></table></figure><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置MP的分页插件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mybatisPlusInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        mybatisPlusInterceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>());<br>        <span class="hljs-keyword">return</span> mybatisPlusInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工信息分页查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Page&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> pageSize, String name)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span>,page,pageSize,name);<br><br>    <span class="hljs-comment">// 构造分页构造器</span><br>    <span class="hljs-type">Page</span> <span class="hljs-variable">pageInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(page,pageSize);<br><br>    <span class="hljs-comment">// 构造条件构造器</span><br>    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>();<br>    <span class="hljs-comment">// 添加过滤条件</span><br>    queryWrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);<br>    <span class="hljs-comment">// 添加排序条件</span><br>    queryWrapper.orderByDesc(Employee::getUpdateTime);<br><br>    <span class="hljs-comment">// 执行查询</span><br>    employeeService.page(pageInfo,queryWrapper); <span class="hljs-comment">// 不需要返回,传进去就构造好了</span><br>    <span class="hljs-keyword">return</span> R.success(pageInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>前端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMemberList</span> (params) &#123;<br>  <span class="hljs-keyword">return</span> $axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/employee/page&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    params<br>  &#125;)<br>&#125;<br><br>不过在前端有个拦截器<br>会将传过去的路劲改变<br></code></pre></td></tr></table></figure><h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><p>在实体类属性上加注解<code>@TableField</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span> <span class="hljs-comment">// 插入时填充字段</span><br><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span> <span class="hljs-comment">// 插入和更新时填充字段</span><br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Long createUser;<br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Long updateUser;<br></code></pre></td></tr></table></figure><p>创建<strong>MyMetaObjectHandler</strong>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;公共字段自动填充[insert]...&quot;</span>);<br>        log.info(metaObject.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;公共字段自动填充[update]...&quot;</span>);<br>        log.info(metaObject.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用ThreadLocal进行完善</p><hr><h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">employee.setPassword(DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;123456&quot;</span>.getBytes()));<br></code></pre></td></tr></table></figure><h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h1><p>commons-fileupload</p><p>commons-io</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件上传和下载</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/common&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String basePath;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123; <span class="hljs-comment">// 参数名字和前端的名字一致</span><br>        log.info(file.toString());<br><br>        <span class="hljs-comment">// 原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">// 使用UUID重新生成文件名,防止文件名重复造成文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + suffix;<br><br>        <span class="hljs-comment">// 创建一个目录对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath);<br>        <span class="hljs-comment">// 判断当前目录是否存在</span><br>        <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>            <span class="hljs-comment">// 目录不存在,需要创建</span><br>            dir.mkdirs();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + fileName));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> R.success(fileName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件下载</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String name, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 输入流,通过出入刘读取文件内容</span><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + name));<br><br>            <span class="hljs-comment">// 输出流,通过输出流将文件写回浏览器,在浏览器展示图片了</span><br>            <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>            response.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(bytes,<span class="hljs-number">0</span>,len);<br>                outputStream.flush();<br>            &#125;<br><br>            <span class="hljs-comment">// 关闭资源</span><br>            outputStream.close();<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="关闭8080端口"><a href="#关闭8080端口" class="headerlink" title="关闭8080端口"></a>关闭8080端口</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202206271443914.png" alt="image-20220627144344849"></p><h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><blockquote><p>基于注解的缓存功能</p></blockquote><table><thead><tr><th>@EnableCaching</th><th>开启缓存注解</th></tr></thead><tbody><tr><td>@cacheable</td><td>查询缓存,将方法缓存值放入缓存池中</td></tr><tr><td>@Cacheput</td><td>插入缓存</td></tr><tr><td>@CacheEvict</td><td>删除缓存</td></tr></tbody></table><p><strong>导坐标</strong></p><p>只是使用基础功能(基于Mysql),不需要导包,已经存在于<code>spring-context</code>中了</p><p><strong>扩展坐标</strong></p><p><code>Spring-cache</code>坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>redis</code>坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置redis<code>application.yml</code></strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">time-to-live:</span> <span class="hljs-number">180000</span> <span class="hljs-comment">#设置缓存有效期</span><br></code></pre></td></tr></table></figure><p><strong>开启缓存注解功能</strong></p><p>在启动类上加<code>@EnableCaching</code>开启</p><h1 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207031527152.png" alt="image-20220703152704036"></p><p><strong>主库Master</strong></p><p>第一步修改Msyql配置文件 <code>/etc/my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[mysqld]<br>server_id=100 ## 设置server_id,同一局域网中需要唯一ID<br>log-bin=mysql-bin ## 开启二进制日志功能,以备Slave作为其它数据库实例的Master时使用<br></code></pre></td></tr></table></figure><p>开启远程权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">replication</span> slave <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;xiaoming&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root@123456&#x27;</span>;<br><br># 更改密码策略<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">show <span class="hljs-keyword">master</span> <span class="hljs-title">status</span>;<br></code></pre></td></tr></table></figure><p><strong>从库Slave</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">server_id</span>=<span class="hljs-number">101</span> <span class="hljs-comment">## 设置server_id,同一局域网中需要唯一ID</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">change master <span class="hljs-keyword">to</span><br>    <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;192.168.33.131&#x27;</span>,<br>    <span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<br>    <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;root@123456&#x27;</span>,<br>    <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;mysql-bin.000001&#x27;</span>,<br>    <span class="hljs-attribute">MASTER_LOG_POS</span>=1833;<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 启动从库同步开关</span><br><span class="hljs-literal">start</span> <span class="hljs-literal">slave</span>;<br><span class="hljs-literal">stop</span> <span class="hljs-literal">slave</span> <span class="hljs-comment"># 停止</span><br>    <br><span class="hljs-comment"># 检查状态</span><br>show <span class="hljs-literal">slave</span> status\G<br>    <br> <br><span class="hljs-comment"># 需要下面全部变成yes</span><br>Slave_IO_Running: YES <span class="hljs-comment"># 没变是因为UUID</span><br>Slave_SQL_Running: YES<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_46049759/article/details/116779743">参考个人博客</a></p><h1 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h1><p><strong>导包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-RC1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在配置文件中配置读写分离规则</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">reggie_take_out</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">names:</span><br>        <span class="hljs-string">master,slave</span><br>      <span class="hljs-comment"># 主数据源</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.33.131:3306/reggie?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment"># 从数据源</span><br>      <span class="hljs-attr">slave:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.3.132:3306/reggie?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">masterslave:</span><br>      <span class="hljs-comment"># 读写分离配置</span><br>      <span class="hljs-attr">load-balance-algorithm-type:</span> <span class="hljs-string">round_robin</span> <span class="hljs-comment">#轮询</span><br>      <span class="hljs-comment"># 最终的数据源名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">dataSource</span><br>      <span class="hljs-comment"># 主库数据源名称</span><br>      <span class="hljs-attr">master-data-source-name:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 从库数据源名称列表,多个逗号分隔</span><br>      <span class="hljs-attr">slave-data-source-names:</span> <span class="hljs-string">slave</span><br>    <span class="hljs-attr">props:</span><br>      <span class="hljs-attr">sql:</span><br>        <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启SQL显示,默认false</span><br></code></pre></td></tr></table></figure><p><strong>在配置文件汇总配置被允许bean定义覆盖配置项</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">main:</span><br>        <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>轻量web服务器,反向代理服务器,邮件代理服务器,占有内存小,并发能力强<br><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><p>本文基于<code>Centos7</code>去安装</p></blockquote><p><strong>安装依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装gcc 如果没有yum源,可以参考下面博客链接去配置</span><br>apt-get install yum<br><br>yum install --nogpgcheck  gcc pcre-devel zlib-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><p><strong>下载Nginx安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装wget</span><br>apt-get install wget<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载nginx</span><br>wget http://nginx.org/download/nginx-1.16.1.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压文件</span><br>tar -zxvf nginx-1.16.1.tar.gz -C /soft<br></code></pre></td></tr></table></figure><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入解压目录/soft  创建安装文件夹nginx  然后在安装</span><br>./configure --prefix=/usr/local/nginx<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">=====出现下面信息代表初步安装检查完成=====<br>checking for PCRE JIT support ... found<br>checking for zlib library ... found<br>creating objs/Makefile<br><br>Configuration summary<br>  + using system PCRE library<br>  + OpenSSL library is not used<br>  + using system zlib library<br><br>  nginx path prefix: &quot;/usr/local/nginx&quot;<br>  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;<br>  nginx modules path: &quot;/usr/local/nginx/modules&quot;<br>  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;<br>  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;<br>  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;<br>  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;<br>  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;<br>  nginx http client request body temporary files: &quot;client_body_temp&quot;<br>  nginx http proxy temporary files: &quot;proxy_temp&quot;<br>  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;<br>  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;<br>  nginx http scgi temporary files: &quot;scgi_temp&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br>------真正安装完成<br>|| mkdir -p &#x27;/usr/local/nginx/logs&#x27;<br>make[1]: Leaving directory `/root/nginx-1.16.1&#x27;<br></code></pre></td></tr></table></figure><p>报错1:<a href="https://www.cnblogs.com/zhoading/p/9938762.html">https://www.cnblogs.com/zhoading/p/9938762.html</a></p><p><strong>查看版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost sbin]# ./nginx -v<br>nginx version: nginx/1.16.1<br></code></pre></td></tr></table></figure><p><strong>开始前测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost sbin]# ./nginx -t<br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful<br></code></pre></td></tr></table></figure><p><strong>启动和停止</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>./nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>./nginx -s stop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看进程</span><br>ps -ef | grep nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重写加载配置文件</span><br>./nginx -s reload<br>------------------------------------------------------------------------<br>root       8460      1  0 12:03 ?        00:00:00 nginx: master process ./nginx<br>nobody     8461   8460  0 12:03 ?        00:00:00 nginx: worker process<br>root       8616   8008  0 12:04 pts/0    00:00:00 grep --color=auto nginx<br>------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开/关防火墙</span><br>service firewalld restart 重启<br>service firewalld start 开启<br>service firewalld stop 关闭<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207041419539.png" alt="image-20220704141950432"></p><h2 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h2><blockquote><p>更为高效</p></blockquote><p><code>nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>      listen       80;# 监听端口<br>      server_name  localhost;# 服务名称<br>      <br>      location / &#123;# 匹配客户端请求url<br>          root   html;# 指定静态资源根目录<br>          index  index.html;# 指定默认首页<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><code>nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>      listen       82;# 监听端口<br>      server_name  localhost;# 服务名称<br>      <br>      location / &#123;# 匹配客户端请求url<br>      proxy_passhttp://192.168.138.101:8080; # 反向代理配置,将请求转发到指定服务<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207041542371.png" alt="image-20220704154233304"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>基于反向代理实现</p><p>轮询算法</p></blockquote><p><strong>配置负载均衡</strong></p><p><code>nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream  targetserver &#123;# upstream指令可以定义一组服务器<br>server 192.168.138.101:8080;<br>server 192.168.138.101:8081;<br>&#125;<br>server &#123;<br>       listen       80;  # 监听端口<br>       server_name  localhost;   # 服务名称<br>       location / &#123;  # 匹配客户端请求url<br>       proxy_passhttp://targetserver;<br>       &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>权重的配置方式</strong></p><p><code>nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream  targetserver &#123;# upstream指令可以定义一组服务器<br>server 192.168.138.101:8080 weight=10;<br>server 192.168.138.101:8081 weight=5;<br>&#125;<br>server &#123;<br>       listen       80;  # 监听端口<br>       server_name  localhost;   # 服务名称<br>       location / &#123;  # 匹配客户端请求url<br>       proxy_passhttp://targetserver;<br>       &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p><strong>导入knife4j的坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>导入配置</strong></p><p><code>WebMvcConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">// Swagger</span><br><span class="hljs-meta">@EnableKnife4j</span> <span class="hljs-comment">// Knife4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <br>    ......<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 文档类型</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.itheima.reggie.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;瑞吉外卖&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .description(<span class="hljs-string">&quot;瑞吉外卖接口文档&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>设置静态资源映射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.addResourceHandler(<span class="hljs-string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>设置<code>LoginCheckFilter</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义不需要处理的请求路径</span><br>String[] urls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>        <br>    ......<br>            <br>        <span class="hljs-string">&quot;/doc.html&quot;</span>,<br>        <span class="hljs-string">&quot;/webjars/**&quot;</span>,<br>        <span class="hljs-string">&quot;/swagger-resources&quot;</span>,<br>        <span class="hljs-string">&quot;/v2/api-docs&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="减商品"><a href="#减商品" class="headerlink" title="减商品"></a>减商品</h1>]]></content>
    
    
    <categories>
      
      <category>瑞吉外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
      <tag>ssm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标题</title>
    <link href="/2022/07/02/2022-1-1-%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/07/02/2022-1-1-%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>content</p>]]></content>
    
    
    <categories>
      
      <category>分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/2022/07/01/2022-7-1-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/07/01/2022-7-1-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="✨数据结构与算法"><a href="#✨数据结构与算法" class="headerlink" title="✨数据结构与算法"></a>✨数据结构与算法</h1><blockquote><p>Github：<a href="https://github.com/sanshisi/DS">https://github.com/sanshisi/DS</a></p></blockquote><h1 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h1><h2 id="1-数据结构概述"><a href="#1-数据结构概述" class="headerlink" title="1.数据结构概述"></a>1.数据结构概述</h2><blockquote><p>数据之间的关系</p></blockquote><h3 id="1-1逻辑结构"><a href="#1-1逻辑结构" class="headerlink" title="1.1逻辑结构"></a>1.1逻辑结构</h3><ul><li>线性结构：线性结构中的数据元素之间是一对一的关系</li><li>树形结构：树形结构中的数据元素之间存在一种一对一的层次关系</li><li>图形结构：图形结构的数据元素是多对多的关系</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7b4d3b5e726183a2e1c11dced9feb2cf.png" alt="image-20220110113715973"></p><h3 id="1-2物理结构"><a href="#1-2物理结构" class="headerlink" title="1.2物理结构"></a>1.2物理结构</h3><ul><li>顺序存储结构：开辟一组连续的空间存储数据</li><li>链式存储结构：开辟一组随机的空间存储数据</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/a4c78d53ade676b53333213d5392c564.png" alt="image-20220110123504095"></p><h2 id="2-算法概述"><a href="#2-算法概述" class="headerlink" title="2.算法概述"></a>2.算法概述</h2><h3 id="2-1什么是算法"><a href="#2-1什么是算法" class="headerlink" title="2.1什么是算法"></a>2.1什么是算法</h3><p>是解决特定问题求解步骤的描述,分析问题，一步一步求解，并得到结果,这一系列的步骤就称之为<strong>算法</strong></p><p><strong>例如：</strong>1~100求和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">=====方法一<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)&#123;<br>sum+=i;<br>&#125;<br>=====方法二<br><span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> sum=(N+<span class="hljs-number">1</span>)*N/<span class="hljs-number">2</span>;    <br></code></pre></td></tr></table></figure><blockquote><p>方案1随着N的增大，循环的次数也会增大，也就意味着执行的次数和运行的时间也会增大</p><p>方案2随着N的增大，其执行次数只有一次，不会随着N的增大而增大</p></blockquote><p><strong>同一个问题，可以有多种不同的解决方案，也就是说可以用不同的算法去解决同一个问题</strong></p><h3 id="2-2评价算法的好坏"><a href="#2-2评价算法的好坏" class="headerlink" title="2.2评价算法的好坏"></a>2.2评价算法的好坏</h3><ul><li>事后统计法</li><li>事前分析法</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/77651191d4cdcb0010c81fda4cfef3e0.png" alt="image-20220110124119211"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b3f968e102d91409a497a1aa6147d274.png" alt="image-20220110124130526"></p><h3 id="2-3时间复杂度"><a href="#2-3时间复杂度" class="headerlink" title="2.3时间复杂度"></a>2.3时间复杂度</h3><blockquote><p><strong>算法时间复杂度主要探究的是问题输入规模N的数量级</strong></p><p><strong>不是算法的具体执行次数</strong></p></blockquote><hr><p><strong>常数阶O(1)</strong></p><blockquote><p>就是那些无循环、无递归、与问题输入规模N无关的、逐行执行的代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br></code></pre></td></tr></table></figure><hr><p><strong>线性阶O(n)</strong></p><blockquote><p>与问题输入规模有关的，主要是一层循环的代码，多个一层循环可以并列但不能包含</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    System.out.println(i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>线性阶O(n+m)</strong></p><blockquote><p>和线性阶O(n)一样，只不过我们有两种数据的输入规模</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= N; j++) &#123;<br>        System.out.println(i + j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>平方阶O(n^2)</strong></p><blockquote><p>与问题输入规模有关的，主要是二层嵌套循环的代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= N; j++) &#123;<br>        System.out.println(i + j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>平方阶O(nm)</strong></p><blockquote><p>和平方阶O(n^2)一样，只不过我们有两种数据输入规模</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">M</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= M; j++) &#123;<br>        System.out.println(i + j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>对数阶O(logn)</strong></p><blockquote><p>与问题输入规模有关的，主要是一层循环迭代或递归的代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">while</span> (count &lt; N) <br>    count = count * <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><hr><p>✨<strong>时间复杂度简单计算</strong>：忽略常数、只保留幂高项、且忽略幂高项的系数。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/68210c985d2989d56ec47ec5b1ee2a9b.png" alt="image-20220110125423456"></p><p><strong>✨常见阶的比较：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a1d13f4ffa647044118ef3cd88810c9b.png" alt="image-20220110125557002"></p><h1 id="二、动态数组"><a href="#二、动态数组" class="headerlink" title="二、动态数组"></a>二、动态数组</h1><blockquote><p>动态数组就是顺序存储结构具体实现的核心思想</p></blockquote><h2 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h2><p>首先我们看一下Java内置数组</p><p><strong>特点：</strong></p><ul><li>数组的长度一旦确定则不可更改</li><li>数组只能存储同一类型的数据</li><li>数组每个存储空间地址是连续且相等的</li><li>数组提供角标的方式访问元素</li></ul><p><strong>缺点：</strong></p><ul><li>长度不可变</li><li>地址连续且提供角标访问很快</li><li>数组只有length这个属性</li></ul><p>因此我们想实现更多的功能通过动态数组</p><p>例如：</p><ul><li>在任意位置添加删除元素</li><li>获取任意位置元素</li><li>更改某一位置元素数据</li><li>清空数组</li><li>……</li></ul><h2 id="2-线性表的实现"><a href="#2-线性表的实现" class="headerlink" title="2.线性表的实现"></a>2.线性表的实现</h2><h3 id="2-1List接口的定义"><a href="#2-1List接口的定义" class="headerlink" title="2.1List接口的定义"></a>2.1List接口的定义</h3><p>定义一系列例如添加、删除、大小、查找元素第一次出现的位置、元素是否在数组、数组是否为空、分割数组、数组排序、迭代……</p><p><img src="https://img-blog.csdnimg.cn/img_convert/19e2a3195f5f3e4a44c71e36036a2649.png" alt="image-20220110131628955"></p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p1/%E6%8E%A5%E5%8F%A3/List.java">List.java</a></p><h3 id="2-2实现ArrayList"><a href="#2-2实现ArrayList" class="headerlink" title="2.2实现ArrayList"></a>2.2实现ArrayList</h3><p>✨<strong>具体实现</strong></p><p><strong>添加或删除会遇到的情况</strong></p><blockquote><p>扩容或缩容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">...add() <br>    <span class="hljs-comment">// 当容量满了，扩两倍</span><br>    <span class="hljs-comment">// 判读线性表是否满状态</span><br>    <span class="hljs-keyword">if</span> (size == data.length) &#123;<br>        resize(<span class="hljs-number">2</span> * data.length);<br>    &#125;<br>...<br>    <br>...remove()<br>    <span class="hljs-comment">// 什么时候缩容</span><br>    <span class="hljs-comment">// 1.有效元素是容量的1/4</span><br>    <span class="hljs-comment">// 2.当前容量不得小于的等于默认容量</span><br>    <span class="hljs-keyword">if</span> (size == data.length / <span class="hljs-number">4</span> &amp;&amp; data.length &gt; DEFAULT_CAPACITY) &#123;<br>        resize(data.length / <span class="hljs-number">2</span>);<br>    &#125;<br>...<br><br><br><span class="hljs-comment">// 扩容/缩容 操作 不向外界开放提供  是私有private</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(<span class="hljs-type">int</span> newLen)</span> &#123;<br>    E[] newData = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[newLen];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        newData[i] = data[i];<br>    &#125;<br>    data = newData;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparator&lt;E&gt; c)</span> &#123;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;comparator can not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> data[i];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (j = i; j &gt; <span class="hljs-number">0</span> &amp;&amp; c.compare(data[j - <span class="hljs-number">1</span>], e) &gt; <span class="hljs-number">0</span>; j--) &#123; <span class="hljs-comment">// compare &gt; 0 代表第一个值比第二个值大</span><br>            data[j] = data[j - <span class="hljs-number">1</span>];<br>        &#125;<br>        data[j] = e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>重写equals</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123; <span class="hljs-comment">// 比较的是两个 ArrayList 是否相等</span><br>    <span class="hljs-comment">// 1.判空</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2.判自己</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3.判类型</span><br>    <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> ArrayList) &#123;<br>        <span class="hljs-comment">// 4.按照自己的逻辑比较</span><br>        ArrayList&lt;E&gt; other = (ArrayList&lt;E&gt;) o;<br>        <span class="hljs-comment">// 5.先比较元素的个数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.size != other.size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 6.有效元素个数相等的情况下 逐个比较元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!data[i].equals(other.data[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>重写迭代器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前这个数据结构/容器 的 迭代器</span><br><span class="hljs-comment">//通过迭代器对象 更方便挨个取出每一个元素</span><br><span class="hljs-comment">//同时 实现了Iterable 可以让当前的数据结构/容器 被foreach循环遍历</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayListIterator</span>();<br>&#125;<br><br><span class="hljs-comment">//创建一个属于ArrayList的迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//判断是否有下一个元素</span><br>        <span class="hljs-keyword">return</span> cur &lt; size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//如果有下一个元素 则把当前元素返回 并移至到下一个元素</span><br>        <span class="hljs-keyword">return</span> data[cur++]; <span class="hljs-comment">// 先用后加</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>……</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6a315164b5d26e72b7ddf760c20c55a5.png" alt="image-20220110131732408"></p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/ArrayList.java">ArrayList.java</a></p><h2 id="3-栈的实现"><a href="#3-栈的实现" class="headerlink" title="3.栈的实现"></a>3.栈的实现</h2><blockquote><p>先进后出</p></blockquote><h3 id="3-1Stack接口的定义"><a href="#3-1Stack接口的定义" class="headerlink" title="3.1Stack接口的定义"></a>3.1Stack接口的定义</h3><p><strong>📃栈的方法</strong></p><ul><li>出栈</li><li>入栈</li><li>查看栈顶数据</li><li>……</li></ul><p>因为是动态数组实现栈，所以我们实现出入栈都是对数组进行操作</p><p>入栈本质上就是在动态数组尾部添加一个数据</p><p>出栈本质上就是动态数组尾部删除一个数据</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ea8f76b7e689708c603712369cd69e72.png" alt="image-20220110132149124"></p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p1/%E6%8E%A5%E5%8F%A3/Stack.java">Stack.java</a></p><h3 id="3-2实现ArrayStack"><a href="#3-2实现ArrayStack" class="headerlink" title="3.2实现ArrayStack"></a>3.2实现ArrayStack</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c612eaf062aa06767ae199e0991be22f.png" alt="image-20220110132205228"></p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/ArrayStack.java">ArrayStack.java</a></p><h3 id="3-3中缀表达式"><a href="#3-3中缀表达式" class="headerlink" title="3.3中缀表达式"></a>3.3中缀表达式</h3><blockquote><p>传入一个表达式   (10+20&#x2F;2*3)&#x2F;2+8   对其进行计算</p></blockquote><p>给定表达式：<code>(10+20/2*3)/2+8</code></p><p>首先我们需要将表达式中的字符和数字分离，用到自定义方法<code>insertBlanks()</code>和字符串的<code>split()</code>,之后这些存入数组<code>tokens</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">=====insertBlanks()=====<br><span class="hljs-comment">//对原表达式进行格式化处理 给所有的非数字字符两边添加空格</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">insertBlanks</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; expression.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> expression.charAt(i);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span> || c == <span class="hljs-string">&#x27;)&#x27;</span> || c == <span class="hljs-string">&#x27;+&#x27;</span> || c == <span class="hljs-string">&#x27;-&#x27;</span> || c == <span class="hljs-string">&#x27;*&#x27;</span> || c == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            sb.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>            sb.append(c);<br>            sb.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sb.append(c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来思路就很简单了，依次遍历数组<code>tokens</code>，取出元素放入<code>numberStack</code>、<code>operatorStack</code>两个栈中，然后在根据符号进行弹栈操</p><p>举个例子：</p><p>1*2+3</p><blockquote><p>需要遍历5次</p></blockquote><p><strong>第1次遍历：</strong></p><p><code>1</code>直接放入数字栈</p><p><code>numberStack : [1]</code></p><p><code>operatorStack : []</code></p><p><strong>第2次遍历：</strong></p><p><code>+</code>，符号栈为空，直接放入符号栈</p><p><code>numberStack : [1]</code></p><p><code>operatorStack : [*]</code></p><p><strong>第3次遍历：</strong></p><p><code>2</code>直接放入数字栈</p><p><code>numberStack : [1,2]</code></p><p><code>operatorStack : [*]</code></p><p><strong>第4次遍历：</strong></p><p><code>+</code>,此时符号栈已经有乘号了，并且乘号优先级比加号高，所以应当进行弹栈计算，将得到的结果放入数字栈</p><p><code>numberStack : [2]</code></p><p><code>operatorStack : [+]</code></p><p><strong>第5次遍历：</strong></p><p><code>3</code>直接放入数字栈</p><p><code>numberStack : [2,3]</code></p><p><code>operatorStack : [+]</code></p><p><strong>最后</strong></p><p>将数字栈和符号栈中的元素依次弹出计算</p><p>代码位置：<a href="InfixCalculator.java">InfixCalculator.java</a></p><h3 id="3-4中缀转后缀-gt-后缀表达式-做计算器-逆波兰表达式"><a href="#3-4中缀转后缀-gt-后缀表达式-做计算器-逆波兰表达式" class="headerlink" title="3.4中缀转后缀   -&gt;  后缀表达式 做计算器(逆波兰表达式)"></a>3.4中缀转后缀   -&gt;  后缀表达式 做计算器(逆波兰表达式)</h3><p><strong>中缀转后缀</strong></p><p>将中缀表达式转换为后缀表达式，更为容易计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">中缀形式：(<span class="hljs-number">10</span>+<span class="hljs-number">20</span>/<span class="hljs-number">2</span>*<span class="hljs-number">3</span>)/<span class="hljs-number">2</span>+<span class="hljs-number">8</span><br>后缀形式：<span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">2</span> / <span class="hljs-number">3</span> * + <span class="hljs-number">2</span> / <span class="hljs-number">8</span> + <br></code></pre></td></tr></table></figure><p>需要使用一个符号栈和一个数组进行存储数据</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7321011854597a554c01e03d9a4b48bc.gif" alt="中缀转后缀"></p><p>大概原理：遍历中缀表达式，如果是数字，直接存入数组中，遇到符号，首先判断优先级，如果栈顶优先级更高或相等，则将栈顶符号放入数组中，如果是左括号，则将左括号入符号栈，如果是右括号，则将符号栈中左括号上的符号依次弹出放入数组中（注：括号不需要放入数组），遍历到最后，如果符号栈不为空，依次将符号栈中元素弹出放入数组中就好了</p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/InfixToSuffix.java">InfixToSuffix.java</a></p><p><strong>逆波兰表达式</strong>：使用后缀表达式做计算器</p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/SuffixCalculator.java">SuffixCalculator.java</a></p><h3 id="3-5进制转换"><a href="#3-5进制转换" class="headerlink" title="3.5进制转换"></a>3.5进制转换</h3><p><strong>✨掌握好如何使用ASCAll码</strong></p><p><strong>十进制转十六进制</strong>-</p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/DecToHex.java">DecToHex.java</a></p><p><strong>十六进制转十进制</strong></p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/HexToDec.java">HexToDec.java</a></p><h3 id="3-6回文判断"><a href="#3-6回文判断" class="headerlink" title="3.6回文判断"></a>3.6回文判断</h3><p>法1：</p><p>每次入栈前要判断该值和栈顶值是否相等，如果相等就进行弹栈操作，最后通过判断栈是否为空来决定是否为回文</p><blockquote><p>但是有一个bug，就是遇上<code>aabbccdd</code>这种也会判断成回文</p></blockquote><p>法2：</p><p>通过双指针方法进行遍历字符串，解决了法一的bug</p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/JudgingPalindrome.java">JudgingPalindrome.java</a></p><h3 id="3-7括号匹配"><a href="#3-7括号匹配" class="headerlink" title="3.7括号匹配"></a>3.7括号匹配</h3><p>法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">jshell&gt; <span class="hljs-string">&#x27;(&#x27;</span> - <span class="hljs-string">&#x27;)&#x27;</span><br>$<span class="hljs-number">2</span> ==&gt; -<span class="hljs-number">1</span><br>    <br>jshell&gt; <span class="hljs-string">&#x27;[&#x27;</span> - <span class="hljs-string">&#x27;]&#x27;</span><br>$<span class="hljs-number">3</span> ==&gt; -<span class="hljs-number">2</span><br>    <br>jshell&gt; <span class="hljs-string">&#x27;&#123;&#x27;</span> - <span class="hljs-string">&#x27;&#125;&#x27;</span><br>$<span class="hljs-number">4</span> ==&gt; -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>通过Ascall码可以知道，（）[]  {} 左括号和右括号的差值为-1或-2，可以利用这个方法进行括号匹配</p><p>法2：</p><p>通过<code>HashMap</code>来做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Character,Character&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>);<br>map.put(<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>);<br>map.put(<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>);<br>map.put(<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>只需要进行判断   栈顶元素是否是<code>map</code>中的键  &amp;&amp; 该键对应的值是否等于遍历字符串的值</p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/MatchBracket.java">MatchBracket.java</a></p><h3 id="3-8双端栈的实现"><a href="#3-8双端栈的实现" class="headerlink" title="3.8双端栈的实现"></a>3.8双端栈的实现</h3><p>只是将栈的方法拓宽了，代码实现其实不是很难</p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/ArrayDoubleEndStack.java">ArrayDoubleEndStack.java</a></p><h2 id="4-队列的实现"><a href="#4-队列的实现" class="headerlink" title="4.队列的实现"></a>4.队列的实现</h2><blockquote><p>栈是先进先出</p></blockquote><h3 id="4-1Queue接口的定义"><a href="#4-1Queue接口的定义" class="headerlink" title="4.1Queue接口的定义"></a>4.1Queue接口的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">offer()入队列<br>poll()出队列<br>element()查看队首元素<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/00da9b875d152802422e3ae8964e6f84.png" alt="image-20220114153924198"></p><p>代码位置：<a href="https://github.com/sanshisi/DS/blob/master/src/p1/%E6%8E%A5%E5%8F%A3/Queue.java">Queue.java</a></p><h3 id="4-2实现ArrayQueue"><a href="#4-2实现ArrayQueue" class="headerlink" title="4.2实现ArrayQueue"></a>4.2实现ArrayQueue</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e7e03ba50d8a65293f777a600d9fb97f.png" alt="image-20220114154224235"></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/ArrayQueue.java">ArrayQueue.java</a></p><h3 id="4-3文件遍历"><a href="#4-3文件遍历" class="headerlink" title="4.3文件遍历"></a>4.3文件遍历</h3><p>同过对队列实现文件遍历，只要队列不为空，则出队一个目录对象，将该目录对象展开，开始遍历，遇到文件则打印名称，遇到其他目录 则进队</p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/DiretoryTraversal.java">DiretoryTraversal.java</a></p><h3 id="4-4栈实现队列"><a href="#4-4栈实现队列" class="headerlink" title="4.4栈实现队列"></a>4.4栈实现队列</h3><p>这里需要两个栈：A栈和B栈</p><p>其中真正用来存放数据的是A栈，B栈仅做中转用</p><p>假设A栈中有三个元素：1,2,3</p><p><strong>现在进行出队列</strong>：出的是1，所以需要先依次将A栈中的3,2出栈，存入B栈中，再将1出栈返回，之后再将B栈中的元素依次出栈放入A栈中即可</p><p><strong>如果是进行入队列</strong>：直接人A栈即可</p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/StackToQueue.java">StackToQueue.java</a></p><h3 id="4-5队列实现栈"><a href="#4-5队列实现栈" class="headerlink" title="4.5队列实现栈"></a>4.5队列实现栈</h3><p>这里需要两个队列：A队列和B队列</p><p>两个队列可以轮流存储数据</p><p>假设在A中入了三个元素：1,2,3</p><p><strong>现在进行出栈</strong>：出的是3，需要依次将A中的1,2出了，存入B中，然后再将3出队列返回即可，此时数据就全在B中</p><p><strong>现在进行查看栈顶元素</strong>：栈顶元素为2，B中元素1,2，需要将B中1出队列，存入A队列中，然后在将1出队列，在返回前，将1入A队列，</p><p>此时元素就全存在了A栈中</p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/QueueToStack.java">QueueToStack.java</a></p><h3 id="4-6循环队列"><a href="#4-6循环队列" class="headerlink" title="4.6循环队列"></a>4.6循环队列</h3><p>将普通的队列变成一个循环队列，节省空间，因此需要定义一个头指针和尾指针</p><p>需要预留一个位置空给尾指针</p><blockquote><p>假设不留空，那么就会导致判断空或者满的时候判断条件是一样的</p></blockquote><p>因此我们需要留一个位置给尾指针，用来改变判断条件</p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/ArrayLoopQueue.java">ArrayLoopQueue.java</a></p><h3 id="4-7双端队列"><a href="#4-7双端队列" class="headerlink" title="4.7双端队列"></a>4.7双端队列</h3><p>其实就是循环队列的升级版</p><p>只是在其中加了一些对栈方法的实现</p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/ArrayDeque.java">ArrayDeque.java</a></p><h1 id="三、动态链表"><a href="#三、动态链表" class="headerlink" title="三、动态链表"></a>三、动态链表</h1><h2 id="1-单项链表"><a href="#1-单项链表" class="headerlink" title="1.单项链表"></a>1.单项链表</h2><blockquote><p>每个节点只存储数值和指向下一个节点</p></blockquote><p><strong>✨节点定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义节点对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    E data;<br>    Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>(data, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedSinglyList.java">LinkedSinglyList.java</a></p><h2 id="2-单项循环链表"><a href="#2-单项循环链表" class="headerlink" title="2.单项循环链表"></a>2.单项循环链表</h2><blockquote><p>在单项链表的基础上将首尾链接在了一起</p></blockquote><p><strong>✨节点定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义结点对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    E data;     <span class="hljs-comment">//数据域</span><br>    Node next;  <span class="hljs-comment">//指针域</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>(data, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedSinglyCircularList.java">LinkedSinglyCircularList.java</a></p><h4 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h4><blockquote><p>据说著名犹太历史学家Josephus有过一下的故事:</p><p>在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲在一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3个人该人必须自杀，然后再由下一个重新报数,直到所有人都自杀身亡为止。</p><p>然而Josephus和他的朋友并不想遵从, Josephus要他的朋友先假装遵从，他将朋友与自己安排在了第16个与第31个位置，于是逃过了这场死亡游戏。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//约瑟夫环问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">josephusLoop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (size != <span class="hljs-number">2</span>) &#123;<br>        p = p.next;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">del</span> <span class="hljs-operator">=</span> p.next;<br>        <span class="hljs-keyword">if</span> (del == head) &#123;<br>            head = del.next;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (del == tail) &#123;<br>            tail = p;<br>        &#125;<br>        p.next = del.next;<br>        del.next = <span class="hljs-literal">null</span>;<br>        p = p.next;<br>        size--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="逢七过游戏"><a href="#逢七过游戏" class="headerlink" title="逢七过游戏"></a>逢七过游戏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//逢七过游戏</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输入玩家的个数</span><br><span class="hljs-comment">输入从哪个玩家开始</span><br><span class="hljs-comment">输入该玩家从哪个数字开始</span><br><span class="hljs-comment">输入一共玩几个数字</span><br><span class="hljs-comment">打印出每个玩家将要报出的所有数字</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/SevenGame.java">SevenGame.java</a></p><h2 id="3-双向循环链表"><a href="#3-双向循环链表" class="headerlink" title="3.双向循环链表"></a>3.双向循环链表</h2><blockquote><p>每个节点存储了 元素和指向上一个节点的指针和指向下一个节点的指针</p><p>首尾相连接</p></blockquote><p><strong>✨节点定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    E data;<br>    Node pre;   <span class="hljs-comment">//直接前驱</span><br>    Node next;  <span class="hljs-comment">//直接后继</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>(data, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node pre, Node next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.pre = pre;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedList.java">LinkedList.java</a></p><h1 id="四、分治回溯"><a href="#四、分治回溯" class="headerlink" title="四、分治回溯"></a>四、分治回溯</h1><h2 id="1-棋盘覆盖"><a href="#1-棋盘覆盖" class="headerlink" title="1.棋盘覆盖"></a>1.棋盘覆盖</h2><p>博客位置：<a href="https://blog.csdn.net/weixin_46049759/article/details/122574014">https://blog.csdn.net/weixin_46049759&#x2F;article&#x2F;details&#x2F;122574014</a></p><h2 id="2-汉诺塔"><a href="#2-汉诺塔" class="headerlink" title="2.汉诺塔"></a>2.汉诺塔</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedList.java">LinkedList.java</a></p><h2 id="3-全排列"><a href="#3-全排列" class="headerlink" title="3.全排列"></a>3.全排列</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedList.java">LinkedList.java</a></p><h2 id="4-迷宫问题"><a href="#4-迷宫问题" class="headerlink" title="4.迷宫问题"></a>4.迷宫问题</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedList.java">LinkedList.java</a></p><h2 id="5-N皇后问题"><a href="#5-N皇后问题" class="headerlink" title="5.N皇后问题"></a>5.N皇后问题</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p2/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/LinkedList.java">LinkedList.java</a></p><h2 id="6-数独"><a href="#6-数独" class="headerlink" title="6.数独"></a>6.数独</h2><p>博客位置：<a href="https://blog.csdn.net/weixin_46049759/article/details/122628294">https://blog.csdn.net/weixin_46049759&#x2F;article&#x2F;details&#x2F;122628294</a></p><h1 id="五、排序算法"><a href="#五、排序算法" class="headerlink" title="五、排序算法"></a>五、排序算法</h1><p><img src="https://sansisuifeng-img.oss-cn-beijing.aliyuncs.com/img/202207161715764.png" alt="image-20220716171540636"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">下列说明在正文相应章节均有更详细的描述。<br><br>※<span class="hljs-number">1</span>冒泡: 输入数组已排序时最好。<br>※<span class="hljs-number">2</span>选择: 时间复杂度与输入数组特点无关。<br>※<span class="hljs-number">3</span>插入: 输入数组已排序时最好。<br>※<span class="hljs-number">4</span>希尔: 复杂度取决于增量序列，两行分别为希尔增量，<br>    和Knuth增量的希尔排序。输入数组已排序时最好。<br>※<span class="hljs-number">5</span>归并: 所列复杂度为「自顶向下非原地」版本。<br>    自顶向下/自底向上，非原地/原地的时间空间复杂度见该归并排序一节。<br>※<span class="hljs-number">6</span>快速: 当输入数组有序，且总是选取第一个元素为主轴时，<br>    时间复杂度退化为<span class="hljs-constructor">O(<span class="hljs-params">n</span>^2)</span>。空间开销为递归深度。<br>※<span class="hljs-number">7</span>堆: 原地堆排序空间复杂度为<span class="hljs-constructor">O(1)</span>。输入数组所有数字相等时，<br>    时间复杂度为<span class="hljs-constructor">O(<span class="hljs-params">n</span>)</span>。<br>※<span class="hljs-number">8</span>计数: k是计数数组大小。应用稳定性优化则稳定，否则不稳定。<br>    朴素版本空间复杂度为<span class="hljs-constructor">O(<span class="hljs-params">k</span>)</span>，稳定性优化版本空间复杂度为<span class="hljs-constructor">O(<span class="hljs-params">n</span> + <span class="hljs-params">k</span>)</span>。<br>※<span class="hljs-number">9</span>基数: d是最大数位数，k是计数数组大小，处理负数时k=<span class="hljs-number">19</span>。<br>    采用稳定的计数排序则稳定，否则不稳定。<br>※<span class="hljs-number">10</span>桶: 稳定性取决于桶内排序是否稳定。空间取决于桶使用数组还是容器，<br>    若采用数组为<span class="hljs-constructor">O(<span class="hljs-params">kn</span>)</span>，容器则为<span class="hljs-constructor">O(<span class="hljs-params">n</span>)</span>。所有元素放入同一个桶时复杂度最大。<br>    最坏时间复杂度取决于采用哪种桶内排序算法。<br><br>稳定性: 存在稳定和非稳定版本时，视作「稳定」。<br><br>作者：yukiyama<br>链接：https:<span class="hljs-comment">//leetcode.cn/circle/discuss/eBo9UB/</span><br></code></pre></td></tr></table></figure><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><blockquote><p>遍历数组，两两比较，如果前一个数大于后一个数就交换两个数，每次循环都会找出最大的那个数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>            swap(j, j + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在冒泡排序中可以优化的地方有两处：</p><ol><li>提前结束优化：如果某一轮未发生交换，说明排序已经完成，可以提前结束，具体实现可以增加一个 boolean 类型去记录</li><li>边界优化：记录前一轮交换的最终位置，说明该位置之后的元素为已排序状态，下一轮的交换只需执行到该处</li></ol><h2 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2.插入排序"></a>2.插入排序</h2><blockquote><p>这个可以类似于小朋友排队，我们先默认第一个是有序的，然后开始将第二个小朋友依次和前面的小朋友进行比较，如果小于前面的就交换，大于就不动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> arr[i]; <span class="hljs-comment">// 选中要和前面比较的小盆友</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (j = i; j &gt; <span class="hljs-number">0</span> &amp;&amp; arr[j - <span class="hljs-number">1</span>] &gt; e; j--) &#123; <span class="hljs-comment">// 从有序的队伍后面向前比较</span><br>        arr[j] = arr[j - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 如果前面的比他大,就把前面的向后移动一位</span><br>    &#125;<br>    arr[j] = e;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/InsertionSort.class">InsertionSort.java</a></p><h2 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h2><blockquote><p>对数组进行遍历，需要每次找到剩余元素最小的和当前元素交换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123; <span class="hljs-comment">// 如果后面元素比当前元素更小，就进行交换</span><br>            swap(i, j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>稳定性：不稳定</strong></p><p>存在跨域交换。找到本轮次最小值之后，将其与本轮起始数字交换，此时若中间有与起始元素同值的元素，将打破稳定性。</p><p>例:　7 7 2 。第一轮交换第一个7和2，则两个7位置关系改变。</p><h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h2><blockquote><p>插入排序的升级版，又叫<strong>缩小增量排序</strong></p><p>9 8 7 6 5 4 3 2 4 0</p><p>0 1 2 3 4 5 6 7 8 9</p><p>先去长度10一半，间隔为5，角标0,5进行比较大小(角标0,5中间间隔5个)，如果后面小于前面的则交换数据(插入排序)，然后依次是角标1,6；2,8……</p><p>然后再取间隔的一半，间隔为2，角标0,2进行比较，之后角标1,3进行比较，之后角标2,4进行比较，角标2,4比较完后，还可以继续向前比较角标0,2……</p><p>……</p><p>间隔为1，两两比较</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length;<br><span class="hljs-comment">// O(n^1.3)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> len / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap = gap / <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 每次取间隔为一半</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; len; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> arr[i];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j - gap] &gt; e) &#123; <span class="hljs-comment">// 插入排序的体现</span><br>            arr[j] = arr[j - gap];<br>            j = j - gap;<br>        &#125;<br>        arr[j] = e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/ShellSort.class">ShellSort.java</a></p><h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5.归并排序"></a>5.归并排序</h2><blockquote><p>依次对半分，一直分到最小一个，然后开始合并，合并的时候其实可以理解为【合并两个有序数组】</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/c62c948fb2bce64014ec6786f349333c.png" alt="image-20220202213646085"></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/MergeSort.class">MergeSort.java</a></p><h2 id="6-快排"><a href="#6-快排" class="headerlink" title="6.快排"></a>6.快排</h2><p><strong>单路快排</strong></p><blockquote><p>首先选中一个数（可以是默认第一个数，也可以是随机一个数组中的数）作为中间的数，然后将小于他的数全部放它的左边，将大于它的数全部放在右边，然后第二步，从角标0到刚刚那个中间的数再做这样的操作，从中间的数到最后一个数也做这样的操作，第三步……</p></blockquote><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/QuickSort01.class">QuickSort01.java</a></p><hr><p><strong>双路快排</strong></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/QuickSort02.class">QuickSort02.java</a></p><hr><p><strong>三路快排</strong></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/QuickSort03.class">QuickSort03.java</a></p><h2 id="7-基数排序"><a href="#7-基数排序" class="headerlink" title="7.基数排序"></a>7.基数排序</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/RadixSort.class">RadixSort.java</a></p><h2 id="8-桶排序"><a href="#8-桶排序" class="headerlink" title="8.桶排序"></a>8.桶排序</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/BucketSort.class">BucketSort.java</a></p><h2 id="9-计数排序"><a href="#9-计数排序" class="headerlink" title="9.计数排序"></a>9.计数排序</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/CountingSort.class">CountingSort.java</a></p><h2 id="10-插值查找"><a href="#10-插值查找" class="headerlink" title="10.插值查找"></a>10.插值查找</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/out/production/DS/p5/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/InterpolationSearch.class">InterpolationSearch.java</a></p><h2 id="11-堆排序"><a href="#11-堆排序" class="headerlink" title="11.堆排序"></a>11.堆排序</h2><h1 id="六、树与哈希表"><a href="#六、树与哈希表" class="headerlink" title="六、树与哈希表"></a>六、树与哈希表</h1><h2 id="1-二分搜索树"><a href="#1-二分搜索树" class="headerlink" title="1.二分搜索树"></a>1.二分搜索树</h2><blockquote><p>二分搜索树本身就是二叉树，只不过在二叉树上面加了一些规则</p></blockquote><p>博客位置：<a href="https://blog.csdn.net/weixin_46049759/article/details/123019755">树与哈希表—二分搜索树(BST)</a></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/BinarySearchTree.java">BinarySearchTree.java</a></p><h2 id="2-集合二分搜索树实现"><a href="#2-集合二分搜索树实现" class="headerlink" title="2.集合二分搜索树实现"></a>2.集合二分搜索树实现</h2><blockquote><p>集合的底层由二分搜索数实现</p></blockquote><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/TreeSet.java">TreeSet.java</a></p><h2 id="3-集合链表实现"><a href="#3-集合链表实现" class="headerlink" title="3.集合链表实现"></a>3.集合链表实现</h2><blockquote><p>集合的底层由链表实心</p></blockquote><blockquote><p> 读取文件中的单词</p></blockquote><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/LinkedSet.java">LinkedSet.java</a></p><h2 id="4-Map二分搜索树实现"><a href="#4-Map二分搜索树实现" class="headerlink" title="4.Map二分搜索树实现"></a>4.Map二分搜索树实现</h2><blockquote><p>本质上和二分搜索数还是一样的，只不过是Map</p></blockquote><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/TreeMap.java">TreeMap.java</a></p><h2 id="5-AVL平衡树"><a href="#5-AVL平衡树" class="headerlink" title="5.AVL平衡树"></a>5.AVL平衡树</h2><p>✨<strong>对于任意一个节点,左子树和右子树的高度差不能超过1</strong></p><blockquote><p>名字缘由：G.M.Adelson-Velsky和E.M.Landis</p><p>是一种最早的自平衡二分搜索树结构</p><p>满二叉树一定是平衡二叉树，高度最低</p><p>完全二叉树也是平衡二叉树，叶子节点深度相差不为1</p></blockquote><p>AVL平衡树是对BST二分搜索树进行了改善</p><p>博客位置：<a href="https://blog.csdn.net/weixin_46049759/article/details/123033337">树与哈希表—二分平衡树(AVL)</a></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/AVLTreeMap.java">AVLTreeMap.java</a></p><h2 id="6-最大堆"><a href="#6-最大堆" class="headerlink" title="6.最大堆"></a>6.最大堆</h2><p>博客位置：<a href="https://blog.csdn.net/weixin_46049759/article/details/123041016">树与哈希表—最大堆</a></p><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/MaxHeap.java">MaxHeap.java</a></p><h2 id="7-优先队列最大堆实现"><a href="#7-优先队列最大堆实现" class="headerlink" title="7.优先队列最大堆实现"></a>7.优先队列最大堆实现</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/PriorityQueue.java">PriorityQueue.java</a></p><h2 id="8-Tire树"><a href="#8-Tire树" class="headerlink" title="8.Tire树"></a>8.Tire树</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/Trie.java">Trie.java</a></p><h2 id="9-哈希表"><a href="#9-哈希表" class="headerlink" title="9.哈希表"></a>9.哈希表</h2><p>代码位置:<a href="https://github.com/sanshisi/DS/blob/master/src/p6/%E6%A0%91%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8/HashTable.java">HashTable.java</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
